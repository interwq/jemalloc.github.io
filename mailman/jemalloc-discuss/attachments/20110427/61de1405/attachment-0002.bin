Index: jemalloc-2.2.1/include/jemalloc/internal/hash.h
===================================================================
--- jemalloc-2.2.1.orig/include/jemalloc/internal/hash.h
+++ jemalloc-2.2.1/include/jemalloc/internal/hash.h
@@ -26,7 +26,7 @@ uint64_t	hash(const void *key, size_t le
 JEMALLOC_INLINE uint64_t
 hash(const void *key, size_t len, uint64_t seed)
 {
-	const uint64_t m = 0xc6a4a7935bd1e995;
+	const uint64_t m = UINT64_C(0xc6a4a7935bd1e995);
 	const int r = 47;
 	uint64_t h = seed ^ (len * m);
 	const uint64_t *data = (const uint64_t *)key;
Index: jemalloc-2.2.1/src/ckh.c
===================================================================
--- jemalloc-2.2.1.orig/src/ckh.c
+++ jemalloc-2.2.1/src/ckh.c
@@ -545,7 +545,7 @@ ckh_string_hash(const void *key, unsigne
 	assert(hash1 != NULL);
 	assert(hash2 != NULL);
 
-	h = hash(key, strlen((const char *)key), 0x94122f335b332aeaLLU);
+	h = hash(key, strlen((const char *)key), UINT64_C(0x94122f335b332aea));
 	if (minbits <= 32) {
 		/*
 		 * Avoid doing multiple hashes, since a single hash provides
@@ -556,7 +556,7 @@ ckh_string_hash(const void *key, unsigne
 	} else {
 		ret1 = h;
 		ret2 = hash(key, strlen((const char *)key),
-		    0x8432a476666bbc13U);
+                            UINT64_C(0x8432a476666bbc13));
 	}
 
 	*hash1 = ret1;
@@ -593,7 +593,7 @@ ckh_pointer_hash(const void *key, unsign
 	u.i = 0;
 #endif
 	u.v = key;
-	h = hash(&u.i, sizeof(u.i), 0xd983396e68886082LLU);
+	h = hash(&u.i, sizeof(u.i), UINT64_C(0xd983396e68886082));
 	if (minbits <= 32) {
 		/*
 		 * Avoid doing multiple hashes, since a single hash provides
@@ -604,7 +604,7 @@ ckh_pointer_hash(const void *key, unsign
 	} else {
 		assert(SIZEOF_PTR == 8);
 		ret1 = h;
-		ret2 = hash(&u.i, sizeof(u.i), 0x5e2be9aff8709a5dLLU);
+		ret2 = hash(&u.i, sizeof(u.i), UINT64_C(0x5e2be9aff8709a5d));
 	}
 
 	*hash1 = ret1;
Index: jemalloc-2.2.1/src/prof.c
===================================================================
--- jemalloc-2.2.1.orig/src/prof.c
+++ jemalloc-2.2.1/src/prof.c
@@ -950,7 +950,7 @@ prof_dump_filename(char *filename, char 
 	filename[i] = v;
 	i++;
 
-	if (vseq != 0xffffffffffffffffLLU) {
+	if (vseq != ~0) {
 		s = u2s(vseq, 10, buf);
 		slen = strlen(s);
 		memcpy(&filename[i], s, slen);
@@ -975,7 +975,7 @@ prof_fdump(void)
 
 	if (opt_prof_prefix[0] != '\0') {
 		malloc_mutex_lock(&prof_dump_seq_mtx);
-		prof_dump_filename(filename, 'f', 0xffffffffffffffffLLU);
+		prof_dump_filename(filename, 'f', ~0);
 		malloc_mutex_unlock(&prof_dump_seq_mtx);
 		prof_dump(filename, opt_prof_leak, false);
 	}
@@ -1061,7 +1061,8 @@ prof_bt_hash(const void *key, unsigned m
 	assert(hash1 != NULL);
 	assert(hash2 != NULL);
 
-	h = hash(bt->vec, bt->len * sizeof(void *), 0x94122f335b332aeaLLU);
+	h = hash(bt->vec, bt->len * sizeof(void *),
+                 UINT64_C(0x94122f335b332aea));
 	if (minbits <= 32) {
 		/*
 		 * Avoid doing multiple hashes, since a single hash provides