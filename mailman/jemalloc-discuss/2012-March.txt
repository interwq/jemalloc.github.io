From mh+jemalloc at glandium.org  Thu Mar  1 06:44:28 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 1 Mar 2012 15:44:28 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
Message-ID: <20120301144428.GA22596@glandium.org>

On Wed, Feb 29, 2012 at 04:15:37PM -0800, Jason Evans wrote:
> On Feb 23, 2012, at 3:23 AM, Mike Hommey wrote:
> > From: Mike Hommey <mh at glandium.org>
> > 
> > In some cases, it can be interesting to use different prefixes for
> > the "standard" libc malloc functions and for jemalloc specific
> > functions. One such case is to use the "__wrap_" prefix on libc
> > malloc functions (for use with ld's --wrap option) and no prefix or
> > "je_" for jemalloc functions.
> > 
> > In such cases, it can also me interesting not to exclude memalign
> > and valloc, so this change also adds an option not to omit them when
> > the prefix is set.
> 
> Do you have a practical use case that makes this a compelling feature?
> I'm reluctant to hard-code the set of JEMALLOC_LIBC() functions to
> make distinct from JEMALLOC_P() functions, because it may vary by
> operating system.

The exact one that is in the patch message: on android, we use ld's
--wrap option to wrap the "standard" libc functions. It is cumbersome
to have to use --wrap for jemalloc-specific functions as well.
Arguably, we could probably use symbol aliases when linking the library
containing jemalloc.

Mike


From mh+jemalloc at glandium.org  Thu Mar  1 06:56:21 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 1 Mar 2012 15:56:21 +0100
Subject: jemalloc win32 port
In-Reply-To: <7E8A65C2-0F92-4665-A0AE-22B87AF25735@canonware.com>
References: <4F27C183.3020201@hola.org> <4F3A958B.6020409@hola.org>
	<7E8A65C2-0F92-4665-A0AE-22B87AF25735@canonware.com>
Message-ID: <20120301145621.GA23445@glandium.org>

On Wed, Feb 29, 2012 at 01:41:13PM -0800, Jason Evans wrote:
> I looked through your patch and found numerous issues that would make
> it a lot of work to integrate, some of which Mike Hommey pointed out.
> The real non-starter though is that it uses hand-edited versions of
> the *.h.in header files.  That's not a maintainable solution.  I don't
> regularly use Windows, and even if I integrated this patch, the
> Windows support would be sure to break almost immediately due to
> innocuous changes.

One thing that could be integrated straight away is the prn.h file
rename. When I was looking at the patch originally, I thought this was a
file addition, but now that I have actually looked at jemalloc2 code, I
see what the problem is. For what it's worth, mercurial already barfs
because of that filename when importing jemalloc2 code.

Cheers,

Mike


From jasone at canonware.com  Thu Mar  1 17:49:33 2012
From: jasone at canonware.com (Jason Evans)
Date: Thu, 1 Mar 2012 17:49:33 -0800
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120301144428.GA22596@glandium.org>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
Message-ID: <9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>

On Mar 1, 2012, at 6:44 AM, Mike Hommey wrote:
> On Wed, Feb 29, 2012 at 04:15:37PM -0800, Jason Evans wrote:
>> On Feb 23, 2012, at 3:23 AM, Mike Hommey wrote:
>>> From: Mike Hommey <mh at glandium.org>
>>> 
>>> In some cases, it can be interesting to use different prefixes for
>>> the "standard" libc malloc functions and for jemalloc specific
>>> functions. One such case is to use the "__wrap_" prefix on libc
>>> malloc functions (for use with ld's --wrap option) and no prefix or
>>> "je_" for jemalloc functions.
>>> 
>>> In such cases, it can also me interesting not to exclude memalign
>>> and valloc, so this change also adds an option not to omit them when
>>> the prefix is set.
>> 
>> Do you have a practical use case that makes this a compelling feature?
>> I'm reluctant to hard-code the set of JEMALLOC_LIBC() functions to
>> make distinct from JEMALLOC_P() functions, because it may vary by
>> operating system.
> 
> The exact one that is in the patch message: on android, we use ld's
> --wrap option to wrap the "standard" libc functions. It is cumbersome
> to have to use --wrap for jemalloc-specific functions as well.
> Arguably, we could probably use symbol aliases when linking the library
> containing jemalloc.

I went a slightly different direction with this and added --with-mangling:

  http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc

Please let me know if this fails to meet your needs for some reason.

Thanks,
Jason

From jasone at canonware.com  Mon Mar  5 12:30:48 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 5 Mar 2012 12:30:48 -0800
Subject: Cross-compiling and configure.ac macros
In-Reply-To: <BANLkTikuGkt4LuKhAcdWefPDOqCB8yoEbg@mail.gmail.com>
References: <BANLkTimnKR3sEvf0EH3SK-0JV5-zD4Ch2A@mail.gmail.com>
	<BANLkTimZz1_t-qxArotak7iPMJiV3A+T_w@mail.gmail.com>
	<4DA8713C.9040109@canonware.com>
	<BANLkTikuGkt4LuKhAcdWefPDOqCB8yoEbg@mail.gmail.com>
Message-ID: <47DA518F-C037-4CC0-82D9-458152F787F9@canonware.com>

On Apr 27, 2011, at 1:54 AM, Andreas Vinsander wrote:
> 2011/4/15 Jason Evans <jasone at canonware.com>:
>> On 04/15/2011 07:07 AM, Andreas Vinsander wrote:
>>> 
>>> Seems like autoconf has its own idea where ffsl should be found.
>>> According to manual pages on my Fedora desktop, ffsl should be found
>>> in string.h if _GNU_SOURCE is defined.
>>> Any idea what is going on here?
>> 
>> Wow, that looks like a mess.  Maybe the cleanest solution is to switch the
>> test to a simple JE_COMPILABLE() program.
> 
> I haven't had the time to work on this until now. I have something
> that compiles for both SH4 and mips now.
> My patches are attached to this mail, would be nice if someone could
> review them and maybe Jason will incorporate them into jemalloc in
> time for next release?
> I also attach my default autoconf cache used when cross compiling for
> the SH4 CPU.
> 
> I have run a device (having an SH4 based CPU) and it seems to work
> when doing some rudimentary smoke testing. I still have to do some
> benchmark testing to decide if I should switch from the default uclibc
> allocator or not.
> 
> Thanks,
> /Andreas
> <configure.ac.patch><jemalloc_internal.h.in.patch><fix_64bit_literals.patch><atomic.h.patch><sh4.cache>

Whoops, I lost track of this email and failed to integrate your diffs until Rich Lane prodded me.  Thanks, both of you.

Jason

From rlane at club.cc.cmu.edu  Mon Mar  5 22:17:14 2012
From: rlane at club.cc.cmu.edu (Rich Lane)
Date: Mon,  5 Mar 2012 22:17:14 -0800
Subject: [PATCH] update config.sub to autoconf 2.68
Message-ID: <1331014634-3672-1-git-send-email-rlane@club.cc.cmu.edu>

This adds support for Google Native Client among other platforms.
---
 config.sub |  354 ++++++++++++++++++++++++++++++++++++++++++++++--------------
 1 files changed, 272 insertions(+), 82 deletions(-)

diff --git a/config.sub b/config.sub
index 264f820..320e303 100755
--- a/config.sub
+++ b/config.sub
@@ -1,9 +1,10 @@
 #! /bin/sh
 # Configuration validation subroutine script.
 #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
-#   2000, 2001, 2002, 2003 Free Software Foundation, Inc.
+#   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
+#   Free Software Foundation, Inc.
 
-timestamp='2004-02-23'
+timestamp='2010-09-11'
 
 # This file is (in principle) common to ALL GNU software.
 # The presence of a machine in this file suggests that SOME GNU software
@@ -21,22 +22,26 @@ timestamp='2004-02-23'
 #
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place - Suite 330,
-# Boston, MA 02111-1307, USA.
-
+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
 # As a special exception to the GNU General Public License, if you
 # distribute this file as part of a program that contains a
 # configuration script generated by Autoconf, you may include it under
 # the same distribution terms that you use for the rest of that program.
 
+
 # Please send patches to <config-patches at gnu.org>.  Submit a context
-# diff and a properly formatted ChangeLog entry.
+# diff and a properly formatted GNU ChangeLog entry.
 #
 # Configuration subroutine to validate and canonicalize a configuration type.
 # Supply the specified configuration type as an argument.
 # If it is invalid, we print an error message on stderr and exit with code 1.
 # Otherwise, we print the canonical config type on stdout and succeed.
 
+# You can get the latest version of this script from:
+# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD
+
 # This file is supposed to be the same for all GNU packages
 # and recognize all the CPU types, system types and aliases
 # that are meaningful with *any* GNU software.
@@ -70,8 +75,9 @@ Report bugs and patches to <config-patches at gnu.org>."
 version="\
 GNU config.sub ($timestamp)
 
-Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
-Free Software Foundation, Inc.
+Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
+2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free
+Software Foundation, Inc.
 
 This is free software; see the source for copying conditions.  There is NO
 warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
@@ -83,11 +89,11 @@ Try \`$me --help' for more information."
 while test $# -gt 0 ; do
   case $1 in
     --time-stamp | --time* | -t )
-       echo "$timestamp" ; exit 0 ;;
+       echo "$timestamp" ; exit ;;
     --version | -v )
-       echo "$version" ; exit 0 ;;
+       echo "$version" ; exit ;;
     --help | --h* | -h )
-       echo "$usage"; exit 0 ;;
+       echo "$usage"; exit ;;
     -- )     # Stop option processing
        shift; break ;;
     - )	# Use stdin as input.
@@ -99,7 +105,7 @@ while test $# -gt 0 ; do
     *local*)
        # First pass through any local machine types.
        echo $1
-       exit 0;;
+       exit ;;
 
     * )
        break ;;
@@ -118,8 +124,11 @@ esac
 # Here we must recognize all the valid KERNEL-OS combinations.
 maybe_os=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
 case $maybe_os in
-  nto-qnx* | linux-gnu* | linux-dietlibc | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | \
-  kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* | storm-chaos* | os2-emx* | rtmk-nova*)
+  nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \
+  linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \
+  knetbsd*-gnu* | netbsd*-gnu* | \
+  kopensolaris*-gnu* | \
+  storm-chaos* | os2-emx* | rtmk-nova*)
     os=-$maybe_os
     basic_machine=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
     ;;
@@ -145,10 +154,13 @@ case $os in
 	-convergent* | -ncr* | -news | -32* | -3600* | -3100* | -hitachi* |\
 	-c[123]* | -convex* | -sun | -crds | -omron* | -dg | -ultra | -tti* | \
 	-harris | -dolphin | -highlevel | -gould | -cbm | -ns | -masscomp | \
-	-apple | -axis)
+	-apple | -axis | -knuth | -cray | -microblaze)
 		os=
 		basic_machine=$1
 		;;
+        -bluegene*)
+	        os=-cnk
+		;;
 	-sim | -cisco | -oki | -wec | -winbond)
 		os=
 		basic_machine=$1
@@ -170,6 +182,10 @@ case $os in
 	-hiux*)
 		os=-hiuxwe2
 		;;
+	-sco6)
+		os=-sco5v6
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
 	-sco5)
 		os=-sco3.2v5
 		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
@@ -186,6 +202,10 @@ case $os in
 		# Don't forget version if it is 3.2v4 or newer.
 		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
 		;;
+	-sco5v6*)
+		# Don't forget version if it is 3.2v4 or newer.
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
 	-sco*)
 		os=-sco3.2v2
 		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
@@ -230,22 +250,28 @@ case $basic_machine in
 	| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \
 	| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \
 	| am33_2.0 \
-	| arc | arm | arm[bl]e | arme[lb] | armv[2345] | armv[345][lb] | avr \
+	| arc | arm | arm[bl]e | arme[lb] | armv[2345] | armv[345][lb] | avr | avr32 \
+	| bfin \
 	| c4x | clipper \
 	| d10v | d30v | dlx | dsp16xx \
-	| fr30 | frv \
+	| fido | fr30 | frv \
 	| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \
 	| i370 | i860 | i960 | ia64 \
 	| ip2k | iq2000 \
-	| m32r | m68000 | m68k | m88k | mcore \
+	| lm32 \
+	| m32c | m32r | m32rle | m68000 | m68k | m88k \
+	| maxq | mb | microblaze | mcore | mep | metag \
 	| mips | mipsbe | mipseb | mipsel | mipsle \
 	| mips16 \
 	| mips64 | mips64el \
-	| mips64vr | mips64vrel \
+	| mips64octeon | mips64octeonel \
 	| mips64orion | mips64orionel \
+	| mips64r5900 | mips64r5900el \
+	| mips64vr | mips64vrel \
 	| mips64vr4100 | mips64vr4100el \
 	| mips64vr4300 | mips64vr4300el \
 	| mips64vr5000 | mips64vr5000el \
+	| mips64vr5900 | mips64vr5900el \
 	| mipsisa32 | mipsisa32el \
 	| mipsisa32r2 | mipsisa32r2el \
 	| mipsisa64 | mipsisa64el \
@@ -254,30 +280,50 @@ case $basic_machine in
 	| mipsisa64sr71k | mipsisa64sr71kel \
 	| mipstx39 | mipstx39el \
 	| mn10200 | mn10300 \
+	| moxie \
+	| mt \
 	| msp430 \
+	| nds32 | nds32le | nds32be \
+	| nios | nios2 \
 	| ns16k | ns32k \
-	| openrisc | or32 \
+	| or32 \
 	| pdp10 | pdp11 | pj | pjl \
 	| powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \
 	| pyramid \
-	| sh | sh[1234] | sh[23]e | sh[34]eb | shbe | shle | sh[1234]le | sh3ele \
+	| rx \
+	| score \
+	| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \
 	| sh64 | sh64le \
-	| sparc | sparc64 | sparc86x | sparclet | sparclite | sparcv9 | sparcv9b \
-	| strongarm \
-	| tahoe | thumb | tic4x | tic80 | tron \
+	| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \
+	| sparcv8 | sparcv9 | sparcv9b | sparcv9v \
+	| spu | strongarm \
+	| tahoe | thumb | tic4x | tic54x | tic55x | tic6x | tic80 | tron \
+	| ubicom32 \
 	| v850 | v850e \
 	| we32k \
-	| x86 | xscale | xstormy16 | xtensa \
-	| z8k)
+	| x86 | xc16x | xscale | xscalee[bl] | xstormy16 | xtensa \
+	| z8k | z80)
 		basic_machine=$basic_machine-unknown
 		;;
-	m6811 | m68hc11 | m6812 | m68hc12)
+	c54x)
+		basic_machine=tic54x-unknown
+		;;
+	c55x)
+		basic_machine=tic55x-unknown
+		;;
+	c6x)
+		basic_machine=tic6x-unknown
+		;;
+	m6811 | m68hc11 | m6812 | m68hc12 | picochip)
 		# Motorola 68HC11/12.
 		basic_machine=$basic_machine-unknown
 		os=-none
 		;;
 	m88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)
 		;;
+	ms1)
+		basic_machine=mt-unknown
+		;;
 
 	# We use `pc' rather than `unknown'
 	# because (1) that's what they normally are, and
@@ -297,28 +343,32 @@ case $basic_machine in
 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
 	| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \
-	| avr-* \
-	| bs2000-* \
-	| c[123]* | c30-* | [cjt]90-* | c4x-* | c54x-* | c55x-* | c6x-* \
-	| clipper-* | cydra-* \
+	| avr-* | avr32-* \
+	| bfin-* | bs2000-* \
+	| c[123]* | c30-* | [cjt]90-* | c4x-* \
+	| clipper-* | craynv-* | cydra-* \
 	| d10v-* | d30v-* | dlx-* \
 	| elxsi-* \
-	| f30[01]-* | f700-* | fr30-* | frv-* | fx80-* \
+	| f30[01]-* | f700-* | fido-* | fr30-* | frv-* | fx80-* \
 	| h8300-* | h8500-* \
 	| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \
 	| i*86-* | i860-* | i960-* | ia64-* \
 	| ip2k-* | iq2000-* \
-	| m32r-* \
+	| lm32-* \
+	| m32c-* | m32r-* | m32rle-* \
 	| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \
-	| m88110-* | m88k-* | mcore-* \
+	| m88110-* | m88k-* | maxq-* | mcore-* | metag-* | microblaze-* \
 	| mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \
 	| mips16-* \
 	| mips64-* | mips64el-* \
-	| mips64vr-* | mips64vrel-* \
+	| mips64octeon-* | mips64octeonel-* \
 	| mips64orion-* | mips64orionel-* \
+	| mips64r5900-* | mips64r5900el-* \
+	| mips64vr-* | mips64vrel-* \
 	| mips64vr4100-* | mips64vr4100el-* \
 	| mips64vr4300-* | mips64vr4300el-* \
 	| mips64vr5000-* | mips64vr5000el-* \
+	| mips64vr5900-* | mips64vr5900el-* \
 	| mipsisa32-* | mipsisa32el-* \
 	| mipsisa32r2-* | mipsisa32r2el-* \
 	| mipsisa64-* | mipsisa64el-* \
@@ -326,26 +376,37 @@ case $basic_machine in
 	| mipsisa64sb1-* | mipsisa64sb1el-* \
 	| mipsisa64sr71k-* | mipsisa64sr71kel-* \
 	| mipstx39-* | mipstx39el-* \
+	| mmix-* \
+	| mt-* \
 	| msp430-* \
-	| none-* | np1-* | nv1-* | ns16k-* | ns32k-* \
+	| nds32-* | nds32le-* | nds32be-* \
+	| nios-* | nios2-* \
+	| none-* | np1-* | ns16k-* | ns32k-* \
 	| orion-* \
 	| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \
 	| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \
 	| pyramid-* \
-	| romp-* | rs6000-* \
-	| sh-* | sh[1234]-* | sh[23]e-* | sh[34]eb-* | shbe-* \
+	| romp-* | rs6000-* | rx-* \
+	| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \
 	| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \
-	| sparc-* | sparc64-* | sparc86x-* | sparclet-* | sparclite-* \
-	| sparcv9-* | sparcv9b-* | strongarm-* | sv1-* | sx?-* \
+	| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \
+	| sparclite-* \
+	| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | strongarm-* | sv1-* | sx?-* \
 	| tahoe-* | thumb-* \
 	| tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \
+	| tile-* | tilegx-* \
 	| tron-* \
+	| ubicom32-* \
 	| v850-* | v850e-* | vax-* \
 	| we32k-* \
-	| x86-* | x86_64-* | xps100-* | xscale-* | xstormy16-* \
-	| xtensa-* \
+	| x86-* | x86_64-* | xc16x-* | xps100-* | xscale-* | xscalee[bl]-* \
+	| xstormy16-* | xtensa*-* \
 	| ymp-* \
-	| z8k-*)
+	| z8k-* | z80-*)
+		;;
+	# Recognize the basic CPU types without company name, with glob match.
+	xtensa*)
+		basic_machine=$basic_machine-unknown
 		;;
 	# Recognize the various machine names and aliases which stand
 	# for a CPU type and a company and sometimes even an OS.
@@ -409,6 +470,10 @@ case $basic_machine in
 		basic_machine=m68k-apollo
 		os=-bsd
 		;;
+	aros)
+		basic_machine=i386-pc
+		os=-aros
+		;;
 	aux)
 		basic_machine=m68k-apple
 		os=-aux
@@ -417,10 +482,35 @@ case $basic_machine in
 		basic_machine=ns32k-sequent
 		os=-dynix
 		;;
+	blackfin)
+		basic_machine=bfin-unknown
+		os=-linux
+		;;
+	blackfin-*)
+		basic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
+	bluegene*)
+		basic_machine=powerpc-ibm
+		os=-cnk
+		;;
+	c54x-*)
+		basic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	c55x-*)
+		basic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	c6x-*)
+		basic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
 	c90)
 		basic_machine=c90-cray
 		os=-unicos
 		;;
+        cegcc)
+		basic_machine=arm-unknown
+		os=-cegcc
+		;;
 	convex-c1)
 		basic_machine=c1-convex
 		os=-bsd
@@ -445,13 +535,20 @@ case $basic_machine in
 		basic_machine=j90-cray
 		os=-unicos
 		;;
-	cr16c)
-		basic_machine=cr16c-unknown
+	craynv)
+		basic_machine=craynv-cray
+		os=-unicosmp
+		;;
+	cr16)
+		basic_machine=cr16-unknown
 		os=-elf
 		;;
 	crds | unos)
 		basic_machine=m68k-crds
 		;;
+	crisv32 | crisv32-* | etraxfs*)
+		basic_machine=crisv32-axis
+		;;
 	cris | cris-* | etrax*)
 		basic_machine=cris-axis
 		;;
@@ -481,6 +578,14 @@ case $basic_machine in
 		basic_machine=m88k-motorola
 		os=-sysv3
 		;;
+	dicos)
+		basic_machine=i686-pc
+		os=-dicos
+		;;
+	djgpp)
+		basic_machine=i586-pc
+		os=-msdosdjgpp
+		;;
 	dpx20 | dpx20-*)
 		basic_machine=rs6000-bull
 		os=-bosx
@@ -631,6 +736,14 @@ case $basic_machine in
 		basic_machine=m68k-isi
 		os=-sysv
 		;;
+	m68knommu)
+		basic_machine=m68k-unknown
+		os=-linux
+		;;
+	m68knommu-*)
+		basic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
 	m88k-omron*)
 		basic_machine=m88k-omron
 		;;
@@ -642,10 +755,17 @@ case $basic_machine in
 		basic_machine=ns32k-utek
 		os=-sysv
 		;;
+        microblaze)
+		basic_machine=microblaze-xilinx
+		;;
 	mingw32)
 		basic_machine=i386-pc
 		os=-mingw32
 		;;
+	mingw32ce)
+		basic_machine=arm-unknown
+		os=-mingw32ce
+		;;
 	miniframe)
 		basic_machine=m68000-convergent
 		;;
@@ -659,10 +779,6 @@ case $basic_machine in
 	mips3*)
 		basic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown
 		;;
-	mmix*)
-		basic_machine=mmix-knuth
-		os=-mmixware
-		;;
 	monitor)
 		basic_machine=m68k-rom68k
 		os=-coff
@@ -675,6 +791,9 @@ case $basic_machine in
 		basic_machine=i386-pc
 		os=-msdos
 		;;
+	ms1-*)
+		basic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`
+		;;
 	mvs)
 		basic_machine=i370-ibm
 		os=-mvs
@@ -743,9 +862,11 @@ case $basic_machine in
 	np1)
 		basic_machine=np1-gould
 		;;
-	nv1)
-		basic_machine=nv1-cray
-		os=-unicosmp
+        neo-tandem)
+		basic_machine=neo-tandem
+		;;
+        nse-tandem)
+		basic_machine=nse-tandem
 		;;
 	nsr-tandem)
 		basic_machine=nsr-tandem
@@ -754,9 +875,8 @@ case $basic_machine in
 		basic_machine=hppa1.1-oki
 		os=-proelf
 		;;
-	or32 | or32-*)
+	openrisc | openrisc-*)
 		basic_machine=or32-unknown
-		os=-coff
 		;;
 	os400)
 		basic_machine=powerpc-ibm
@@ -778,6 +898,14 @@ case $basic_machine in
 		basic_machine=i860-intel
 		os=-osf
 		;;
+	parisc)
+		basic_machine=hppa-unknown
+		os=-linux
+		;;
+	parisc-*)
+		basic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
 	pbd)
 		basic_machine=sparc-tti
 		;;
@@ -787,6 +915,12 @@ case $basic_machine in
 	pc532 | pc532-*)
 		basic_machine=ns32k-pc532
 		;;
+	pc98)
+		basic_machine=i386-pc
+		;;
+	pc98-*)
+		basic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
 	pentium | p5 | k5 | k6 | nexgen | viac3)
 		basic_machine=i586-pc
 		;;
@@ -843,6 +977,10 @@ case $basic_machine in
 		basic_machine=i586-unknown
 		os=-pw32
 		;;
+	rdos)
+		basic_machine=i386-pc
+		os=-rdos
+		;;
 	rom68k)
 		basic_machine=m68k-rom68k
 		os=-coff
@@ -869,6 +1007,10 @@ case $basic_machine in
 	sb1el)
 		basic_machine=mipsisa64sb1el-unknown
 		;;
+	sde)
+		basic_machine=mipsisa32-sde
+		os=-elf
+		;;
 	sei)
 		basic_machine=mips-sei
 		os=-seiux
@@ -880,6 +1022,9 @@ case $basic_machine in
 		basic_machine=sh-hitachi
 		os=-hms
 		;;
+	sh5el)
+		basic_machine=sh5le-unknown
+		;;
 	sh64)
 		basic_machine=sh64-unknown
 		;;
@@ -957,17 +1102,14 @@ case $basic_machine in
 		basic_machine=t90-cray
 		os=-unicos
 		;;
-	tic54x | c54x*)
-		basic_machine=tic54x-unknown
-		os=-coff
+        # This must be matched before tile*.
+        tilegx*)
+		basic_machine=tilegx-unknown
+		os=-linux-gnu
 		;;
-	tic55x | c55x*)
-		basic_machine=tic55x-unknown
-		os=-coff
-		;;
-	tic6x | c6x*)
-		basic_machine=tic6x-unknown
-		os=-coff
+	tile*)
+		basic_machine=tile-unknown
+		os=-linux-gnu
 		;;
 	tx39)
 		basic_machine=mipstx39-unknown
@@ -1029,6 +1171,10 @@ case $basic_machine in
 		basic_machine=hppa1.1-winbond
 		os=-proelf
 		;;
+	xbox)
+		basic_machine=i686-pc
+		os=-mingw32
+		;;
 	xps | xps100)
 		basic_machine=xps100-honeywell
 		;;
@@ -1040,6 +1186,10 @@ case $basic_machine in
 		basic_machine=z8k-unknown
 		os=-sim
 		;;
+	z80-*-coff)
+		basic_machine=z80-unknown
+		os=-sim
+		;;
 	none)
 		basic_machine=none-none
 		os=-none
@@ -1059,6 +1209,9 @@ case $basic_machine in
 	romp)
 		basic_machine=romp-ibm
 		;;
+	mmix)
+		basic_machine=mmix-knuth
+		;;
 	rs6000)
 		basic_machine=rs6000-ibm
 		;;
@@ -1075,13 +1228,10 @@ case $basic_machine in
 	we32k)
 		basic_machine=we32k-att
 		;;
-	sh3 | sh4 | sh[34]eb | sh[1234]le | sh[23]ele)
+	sh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)
 		basic_machine=sh-unknown
 		;;
-	sh64)
-		basic_machine=sh64-unknown
-		;;
-	sparc | sparcv9 | sparcv9b)
+	sparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)
 		basic_machine=sparc-sun
 		;;
 	cydra)
@@ -1128,6 +1278,9 @@ case $os in
         # First match some system type aliases
         # that might get confused with valid system types.
 	# -solaris* is a basic system type, with this one exception.
+        -auroraux)
+	        os=-auroraux
+		;;
 	-solaris1 | -solaris1.*)
 		os=`echo $os | sed -e 's|solaris1|sunos4|'`
 		;;
@@ -1148,26 +1301,31 @@ case $os in
 	# Each alternative MUST END IN A *, to match a version number.
 	# -sysv* is not here because it comes later, after sysvr4.
 	-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \
-	      | -*vms* | -sco* | -esix* | -isc* | -aix* | -sunos | -sunos[34]*\
-	      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -solaris* | -sym* \
+	      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\
+	      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -auroraux* | -solaris* \
+	      | -sym* | -kopensolaris* \
 	      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \
-	      | -aos* \
+	      | -aos* | -aros* \
 	      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \
 	      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \
-	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* | -openbsd* \
+	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \
+	      | -openbsd* | -solidbsd* \
 	      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \
 	      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \
 	      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \
 	      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \
-	      | -chorusos* | -chorusrdb* \
+	      | -chorusos* | -chorusrdb* | -cegcc* \
 	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \
-	      | -mingw32* | -linux-gnu* | -linux-uclibc* | -uxpv* | -beos* | -mpeix* | -udk* \
+	      | -mingw32* | -linux-gnu* | -linux-android* \
+	      | -linux-newlib* | -linux-uclibc* \
+	      | -uxpv* | -beos* | -mpeix* | -udk* \
 	      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \
 	      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \
 	      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \
 	      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \
 	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
-	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly*)
+	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
+	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	-qnx*)
@@ -1185,7 +1343,7 @@ case $os in
 		os=`echo $os | sed -e 's|nto|nto-qnx|'`
 		;;
 	-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \
-	      | -windows* | -osx | -abug | -netware* | -os9* | -beos* \
+	      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \
 	      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)
 		;;
 	-mac*)
@@ -1294,6 +1452,14 @@ case $os in
 	-kaos*)
 		os=-kaos
 		;;
+	-zvmoe)
+		os=-zvmoe
+		;;
+	-dicos*)
+		os=-dicos
+		;;
+        -nacl*)
+	        ;;
 	-none)
 		;;
 	*)
@@ -1316,6 +1482,12 @@ else
 # system, and we'll never get to this point.
 
 case $basic_machine in
+        score-*)
+		os=-elf
+		;;
+        spu-*)
+		os=-elf
+		;;
 	*-acorn)
 		os=-riscix1.2
 		;;
@@ -1325,9 +1497,18 @@ case $basic_machine in
 	arm*-semi)
 		os=-aout
 		;;
-    c4x-* | tic4x-*)
-        os=-coff
-        ;;
+        c4x-* | tic4x-*)
+        	os=-coff
+		;;
+	tic54x-*)
+		os=-coff
+		;;
+	tic55x-*)
+		os=-coff
+		;;
+	tic6x-*)
+		os=-coff
+		;;
 	# This must come before the *-dec entry.
 	pdp10-*)
 		os=-tops20
@@ -1353,6 +1534,9 @@ case $basic_machine in
 	m68*-cisco)
 		os=-aout
 		;;
+        mep-*)
+		os=-elf
+		;;
 	mips*-cisco)
 		os=-elf
 		;;
@@ -1371,9 +1555,15 @@ case $basic_machine in
 	*-be)
 		os=-beos
 		;;
+	*-haiku)
+		os=-haiku
+		;;
 	*-ibm)
 		os=-aix
 		;;
+    	*-knuth)
+		os=-mmixware
+		;;
 	*-wec)
 		os=-proelf
 		;;
@@ -1476,7 +1666,7 @@ case $basic_machine in
 			-sunos*)
 				vendor=sun
 				;;
-			-aix*)
+			-cnk*|-aix*)
 				vendor=ibm
 				;;
 			-beos*)
@@ -1539,7 +1729,7 @@ case $basic_machine in
 esac
 
 echo $basic_machine$os
-exit 0
+exit
 
 # Local variables:
 # eval: (add-hook 'write-file-hooks 'time-stamp)
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Mon Mar 12 02:23:00 2012
From: mh+jemalloc at glandium.org (mh+jemalloc at glandium.org)
Date: Mon, 12 Mar 2012 10:23:00 +0100
Subject: [PATCH] Remove bashism from size_classes.sh
Message-ID: <1331544180-536-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 include/jemalloc/internal/size_classes.sh |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/include/jemalloc/internal/size_classes.sh b/include/jemalloc/internal/size_classes.sh
index d8306a5..79b4ba2 100755
--- a/include/jemalloc/internal/size_classes.sh
+++ b/include/jemalloc/internal/size_classes.sh
@@ -13,7 +13,7 @@ lg_tmin=3
 lg_pmin=12
 lg_pmax=16
 
-function pow2() {
+pow2() {
   e=$1
   pow2_result=1
   while [ ${e} -gt 0 ] ; do
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Mon Mar 12 02:27:30 2012
From: mh+jemalloc at glandium.org (mh+jemalloc at glandium.org)
Date: Mon, 12 Mar 2012 10:27:30 +0100
Subject: [PATCH] Remove extra } in malloc_vsnprintf
Message-ID: <1331544450-5907-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 src/util.c |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/src/util.c b/src/util.c
index 7c4c0d4..7d658aa 100644
--- a/src/util.c
+++ b/src/util.c
@@ -443,7 +443,6 @@ malloc_vsnprintf(char *str, size_t size, const char *format, va_list ap)
 		tret = vsnprintf(buf, sizeof(buf), format, tap);
 		assert(tret == ret);
 		assert(memcmp(str, buf, ret + 1) == 0);
-		}
 	}
 
 #undef APPEND_C
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Mon Mar 12 02:49:07 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 12 Mar 2012 10:49:07 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
Message-ID: <20120312094907.GA25158@glandium.org>

On Thu, Mar 01, 2012 at 05:49:33PM -0800, Jason Evans wrote:
> On Mar 1, 2012, at 6:44 AM, Mike Hommey wrote:
> > On Wed, Feb 29, 2012 at 04:15:37PM -0800, Jason Evans wrote:
> >> On Feb 23, 2012, at 3:23 AM, Mike Hommey wrote:
> >>> From: Mike Hommey <mh at glandium.org>
> >>> 
> >>> In some cases, it can be interesting to use different prefixes for
> >>> the "standard" libc malloc functions and for jemalloc specific
> >>> functions. One such case is to use the "__wrap_" prefix on libc
> >>> malloc functions (for use with ld's --wrap option) and no prefix or
> >>> "je_" for jemalloc functions.
> >>> 
> >>> In such cases, it can also me interesting not to exclude memalign
> >>> and valloc, so this change also adds an option not to omit them when
> >>> the prefix is set.
> >> 
> >> Do you have a practical use case that makes this a compelling feature?
> >> I'm reluctant to hard-code the set of JEMALLOC_LIBC() functions to
> >> make distinct from JEMALLOC_P() functions, because it may vary by
> >> operating system.
> > 
> > The exact one that is in the patch message: on android, we use ld's
> > --wrap option to wrap the "standard" libc functions. It is cumbersome
> > to have to use --wrap for jemalloc-specific functions as well.
> > Arguably, we could probably use symbol aliases when linking the library
> > containing jemalloc.
> 
> I went a slightly different direction with this and added --with-mangling:
> 
>   http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc
> 
> Please let me know if this fails to meet your needs for some reason.

The fact that --with-jemalloc-prefix overrides anything set with
--with-mangling makes it unconvenient for our usecase, where we want to
prefix with je_ except a few functions we want to either not prefix (on
desktop) or wrap (on android). Sure, we can use --with-mangling to set
the je_ prefix, but that won't cover new APIs when they appear.

Cheers,

Mike


From mh+jemalloc at glandium.org  Mon Mar 12 07:36:23 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 12 Mar 2012 15:36:23 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120312094907.GA25158@glandium.org>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
Message-ID: <20120312143623.GA31049@glandium.org>

On Mon, Mar 12, 2012 at 10:49:07AM +0100, Mike Hommey wrote:
> On Thu, Mar 01, 2012 at 05:49:33PM -0800, Jason Evans wrote:
> > I went a slightly different direction with this and added --with-mangling:
> > 
> >   http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc
> > 
> > Please let me know if this fails to meet your needs for some reason.
> 
> The fact that --with-jemalloc-prefix overrides anything set with
> --with-mangling makes it unconvenient for our usecase, where we want to
> prefix with je_ except a few functions we want to either not prefix (on
> desktop) or wrap (on android). Sure, we can use --with-mangling to set
> the je_ prefix, but that won't cover new APIs when they appear.

In fact, --with-mangling doesn't work at all. Everything stays as #under
in jemalloc.h.

Mike


From mh+jemalloc at glandium.org  Mon Mar 12 10:03:55 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 12 Mar 2012 18:03:55 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120312143623.GA31049@glandium.org>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<20120312143623.GA31049@glandium.org>
Message-ID: <20120312170355.GA22245@glandium.org>

On Mon, Mar 12, 2012 at 03:36:23PM +0100, Mike Hommey wrote:
> On Mon, Mar 12, 2012 at 10:49:07AM +0100, Mike Hommey wrote:
> > On Thu, Mar 01, 2012 at 05:49:33PM -0800, Jason Evans wrote:
> > > I went a slightly different direction with this and added --with-mangling:
> > > 
> > >   http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc
> > > 
> > > Please let me know if this fails to meet your needs for some reason.
> > 
> > The fact that --with-jemalloc-prefix overrides anything set with
> > --with-mangling makes it unconvenient for our usecase, where we want to
> > prefix with je_ except a few functions we want to either not prefix (on
> > desktop) or wrap (on android). Sure, we can use --with-mangling to set
> > the je_ prefix, but that won't cover new APIs when they appear.
> 
> In fact, --with-mangling doesn't work at all. Everything stays as #under
> in jemalloc.h.

I wasn't looking at the right file, but in fact the problem is that all
${public_syms} are re-AC_DEFINE_UNQUOTED, even when
--with-jemalloc-prefix is not used.

Mike


From jasone at canonware.com  Mon Mar 12 11:35:42 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 11:35:42 -0700
Subject: [PATCH] Remove bashism from size_classes.sh
In-Reply-To: <1331544180-536-1-git-send-email-mh+jemalloc@glandium.org>
References: <1331544180-536-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <AA42AAC3-1C84-4617-B895-59AA1CEF9570@canonware.com>

On Mar 12, 2012, at 2:23 AM, mh+jemalloc at glandium.org wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> include/jemalloc/internal/size_classes.sh |    2 +-
> 1 files changed, 1 insertions(+), 1 deletions(-)


Applied.

Thanks,
Jason


From jasone at canonware.com  Mon Mar 12 11:36:31 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 11:36:31 -0700
Subject: [PATCH] Remove extra } in malloc_vsnprintf
In-Reply-To: <1331544450-5907-1-git-send-email-mh+jemalloc@glandium.org>
References: <1331544450-5907-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <DF771133-4965-489F-8016-8F0AFC6838F2@canonware.com>

On Mar 12, 2012, at 2:27 AM, mh+jemalloc at glandium.org wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> src/util.c |    1 -
> 1 files changed, 0 insertions(+), 1 deletions(-)
> 
> diff --git a/src/util.c b/src/util.c
> index 7c4c0d4..7d658aa 100644
> --- a/src/util.c
> +++ b/src/util.c
> @@ -443,7 +443,6 @@ malloc_vsnprintf(char *str, size_t size, const char *format, va_list ap)
> 		tret = vsnprintf(buf, sizeof(buf), format, tap);
> 		assert(tret == ret);
> 		assert(memcmp(str, buf, ret + 1) == 0);
> -		}
> 	}

Fixed.  I have no idea how that slipped in?

Thanks,
Jason

From jasone at canonware.com  Mon Mar 12 11:44:41 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 11:44:41 -0700
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120312094907.GA25158@glandium.org>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
Message-ID: <2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>


On Mar 12, 2012, at 2:49 AM, Mike Hommey wrote:

> On Thu, Mar 01, 2012 at 05:49:33PM -0800, Jason Evans wrote:
>> On Mar 1, 2012, at 6:44 AM, Mike Hommey wrote:
>>> On Wed, Feb 29, 2012 at 04:15:37PM -0800, Jason Evans wrote:
>>>> On Feb 23, 2012, at 3:23 AM, Mike Hommey wrote:
>>>>> From: Mike Hommey <mh at glandium.org>
>>>>> 
>>>>> In some cases, it can be interesting to use different prefixes for
>>>>> the "standard" libc malloc functions and for jemalloc specific
>>>>> functions. One such case is to use the "__wrap_" prefix on libc
>>>>> malloc functions (for use with ld's --wrap option) and no prefix or
>>>>> "je_" for jemalloc functions.
>>>>> 
>>>>> In such cases, it can also me interesting not to exclude memalign
>>>>> and valloc, so this change also adds an option not to omit them when
>>>>> the prefix is set.
>>>> 
>>>> Do you have a practical use case that makes this a compelling feature?
>>>> I'm reluctant to hard-code the set of JEMALLOC_LIBC() functions to
>>>> make distinct from JEMALLOC_P() functions, because it may vary by
>>>> operating system.
>>> 
>>> The exact one that is in the patch message: on android, we use ld's
>>> --wrap option to wrap the "standard" libc functions. It is cumbersome
>>> to have to use --wrap for jemalloc-specific functions as well.
>>> Arguably, we could probably use symbol aliases when linking the library
>>> containing jemalloc.
>> 
>> I went a slightly different direction with this and added --with-mangling:
>> 
>>  http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc
>> 
>> Please let me know if this fails to meet your needs for some reason.
> 
> The fact that --with-jemalloc-prefix overrides anything set with
> --with-mangling makes it unconvenient for our usecase, where we want to
> prefix with je_ except a few functions we want to either not prefix (on
> desktop) or wrap (on android). Sure, we can use --with-mangling to set
> the je_ prefix, but that won't cover new APIs when they appear.

The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.

./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
[?]
nm -a lib/libjemalloc.so.1 |grep ' [TBD] '
0000000000006dfc T __wrap_calloc
000000000000797d T __wrap_free
00000000000065d4 T __wrap_malloc
00000000000071e3 T __wrap_realloc
000000000002f398 T _fini
0000000000002ed0 T _init
0000000000007dc4 T je_allocm
0000000000008a73 T je_dallocm
0000000000007c0a T je_mallctl
0000000000007c9b T je_mallctlbymib
0000000000007c5c T je_mallctlnametomib
0000000000249e20 B je_malloc_conf
0000000000239a48 D je_malloc_message
0000000000007be3 T je_malloc_stats_print
0000000000007b16 T je_malloc_usable_size
0000000000007ab1 T je_memalign
0000000000008be2 T je_nallocm
0000000000006dd0 T je_posix_memalign
0000000000008293 T je_rallocm
0000000000008958 T je_sallocm
0000000000007ae5 T je_valloc

Do you get different behavior on your system?

Thanks,
Jason

From mh+jemalloc at glandium.org  Mon Mar 12 12:28:06 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 12 Mar 2012 20:28:06 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
Message-ID: <20120312192806.GA4972@glandium.org>

On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
> 
> On Mar 12, 2012, at 2:49 AM, Mike Hommey wrote:
> 
> > On Thu, Mar 01, 2012 at 05:49:33PM -0800, Jason Evans wrote:
> >> On Mar 1, 2012, at 6:44 AM, Mike Hommey wrote:
> >>> On Wed, Feb 29, 2012 at 04:15:37PM -0800, Jason Evans wrote:
> >>>> On Feb 23, 2012, at 3:23 AM, Mike Hommey wrote:
> >>>>> From: Mike Hommey <mh at glandium.org>
> >>>>> 
> >>>>> In some cases, it can be interesting to use different prefixes for
> >>>>> the "standard" libc malloc functions and for jemalloc specific
> >>>>> functions. One such case is to use the "__wrap_" prefix on libc
> >>>>> malloc functions (for use with ld's --wrap option) and no prefix or
> >>>>> "je_" for jemalloc functions.
> >>>>> 
> >>>>> In such cases, it can also me interesting not to exclude memalign
> >>>>> and valloc, so this change also adds an option not to omit them when
> >>>>> the prefix is set.
> >>>> 
> >>>> Do you have a practical use case that makes this a compelling feature?
> >>>> I'm reluctant to hard-code the set of JEMALLOC_LIBC() functions to
> >>>> make distinct from JEMALLOC_P() functions, because it may vary by
> >>>> operating system.
> >>> 
> >>> The exact one that is in the patch message: on android, we use ld's
> >>> --wrap option to wrap the "standard" libc functions. It is cumbersome
> >>> to have to use --wrap for jemalloc-specific functions as well.
> >>> Arguably, we could probably use symbol aliases when linking the library
> >>> containing jemalloc.
> >> 
> >> I went a slightly different direction with this and added --with-mangling:
> >> 
> >>  http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=0a5489e37da88a1a50fbf8552e0d3a7f8fd93ffc
> >> 
> >> Please let me know if this fails to meet your needs for some reason.
> > 
> > The fact that --with-jemalloc-prefix overrides anything set with
> > --with-mangling makes it unconvenient for our usecase, where we want to
> > prefix with je_ except a few functions we want to either not prefix (on
> > desktop) or wrap (on android). Sure, we can use --with-mangling to set
> > the je_ prefix, but that won't cover new APIs when they appear.
> 
> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
> 
> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_

After running that, this is what jemalloc_defs.h contains:
#define je_malloc_conf je_malloc_conf
#define je_malloc_message je_malloc_message
#define je_malloc je_malloc
#define je_calloc je_calloc
#define je_posix_memalign je_posix_memalign
#define je_realloc je_realloc
#define je_free je_free
#define je_malloc_usable_size je_malloc_usable_size
#define je_malloc_stats_print je_malloc_stats_print
#define je_mallctl je_mallctl
#define je_mallctlnametomib je_mallctlnametomib
#define je_mallctlbymib je_mallctlbymib
#define je_memalign je_memalign
#define je_valloc je_valloc
#define je_allocm je_allocm
#define je_rallocm je_rallocm
#define je_sallocm je_sallocm
#define je_dallocm je_dallocm
#define je_nallocm je_nallocm

Even without --with-jemalloc-prefix=je_, I get the same output.

Mike


From jasone at canonware.com  Mon Mar 12 13:12:33 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 13:12:33 -0700
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120312192806.GA4972@glandium.org>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
	<20120312192806.GA4972@glandium.org>
Message-ID: <BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>

On Mar 12, 2012, at 12:28 PM, Mike Hommey wrote:
> On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
>> 
>> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
>> 
>> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
> 
> After running that, this is what jemalloc_defs.h contains:
> #define je_malloc_conf je_malloc_conf
> #define je_malloc_message je_malloc_message
> #define je_malloc je_malloc
> #define je_calloc je_calloc
> #define je_posix_memalign je_posix_memalign
> #define je_realloc je_realloc
> #define je_free je_free
> #define je_malloc_usable_size je_malloc_usable_size
> #define je_malloc_stats_print je_malloc_stats_print
> #define je_mallctl je_mallctl
> #define je_mallctlnametomib je_mallctlnametomib
> #define je_mallctlbymib je_mallctlbymib
> #define je_memalign je_memalign
> #define je_valloc je_valloc
> #define je_allocm je_allocm
> #define je_rallocm je_rallocm
> #define je_sallocm je_sallocm
> #define je_dallocm je_dallocm
> #define je_nallocm je_nallocm
> 
> Even without --with-jemalloc-prefix=je_, I get the same output.

What operating system are you using?

Thanks,
Jason

From jasone at canonware.com  Mon Mar 12 13:36:06 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 13:36:06 -0700
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
	<20120312192806.GA4972@glandium.org>
	<BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>
Message-ID: <82262E92-B898-4697-A62C-1270A839D477@canonware.com>

On Mar 12, 2012, at 1:12 PM, Jason Evans wrote:
> On Mar 12, 2012, at 12:28 PM, Mike Hommey wrote:
>> On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
>>> 
>>> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
>>> 
>>> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
>> 
>> After running that, this is what jemalloc_defs.h contains:
>> #define je_malloc_conf je_malloc_conf
>> #define je_malloc_message je_malloc_message
>> #define je_malloc je_malloc
>> #define je_calloc je_calloc
>> #define je_posix_memalign je_posix_memalign
>> #define je_realloc je_realloc
>> #define je_free je_free
>> #define je_malloc_usable_size je_malloc_usable_size
>> #define je_malloc_stats_print je_malloc_stats_print
>> #define je_mallctl je_mallctl
>> #define je_mallctlnametomib je_mallctlnametomib
>> #define je_mallctlbymib je_mallctlbymib
>> #define je_memalign je_memalign
>> #define je_valloc je_valloc
>> #define je_allocm je_allocm
>> #define je_rallocm je_rallocm
>> #define je_sallocm je_sallocm
>> #define je_dallocm je_dallocm
>> #define je_nallocm je_nallocm
>> 
>> Even without --with-jemalloc-prefix=je_, I get the same output.
> 
> What operating system are you using?

I reproduced the problem on an Ubuntu 10.04 system, and will come up with a fix.

Thanks,
Jason

From jasone at canonware.com  Mon Mar 12 15:15:54 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 15:15:54 -0700
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <82262E92-B898-4697-A62C-1270A839D477@canonware.com>
References: <1329932210-25776-1-git-send-email-mh+jemalloc@glandium.org>
	<1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
	<20120312192806.GA4972@glandium.org>
	<BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>
	<82262E92-B898-4697-A62C-1270A839D477@canonware.com>
Message-ID: <39EBB0A6-4E49-43E4-9AF3-1E7EA0917994@canonware.com>


On Mar 12, 2012, at 1:36 PM, Jason Evans wrote:

> On Mar 12, 2012, at 1:12 PM, Jason Evans wrote:
>> On Mar 12, 2012, at 12:28 PM, Mike Hommey wrote:
>>> On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
>>>> 
>>>> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
>>>> 
>>>> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
>>> 
>>> After running that, this is what jemalloc_defs.h contains:
>>> [?]
>>> 
>>> Even without --with-jemalloc-prefix=je_, I get the same output.
>> 
>> What operating system are you using?
> 
> I reproduced the problem on an Ubuntu 10.04 system, and will come up with a fix.

This should be fixed now:

  http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=08fc3b2d5173512a2c1fdbe11cf00c8c70bad503

Thanks,
Jason

From jasone at canonware.com  Mon Mar 12 16:01:33 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 12 Mar 2012 16:01:33 -0700
Subject: [PATCH] update config.sub to autoconf 2.68
In-Reply-To: <1331014634-3672-1-git-send-email-rlane@club.cc.cmu.edu>
References: <1331014634-3672-1-git-send-email-rlane@club.cc.cmu.edu>
Message-ID: <0FC7D079-AD97-4AA9-9A56-13C73693F28F@canonware.com>

On Mar 5, 2012, at 10:17 PM, Rich Lane wrote:
> This adds support for Google Native Client among other platforms.

Thanks for the patch.  I applied it, then started looking around for a newer config.guess as well.  I eventually found it and updated as such:

  wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O config.guess
  wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -O config.sub

The config.sub is newer than the one you submitted, so hopefully it will work fine for Google Native Client.

Thanks,
Jason

From mh+jemalloc at glandium.org  Tue Mar 13 02:49:50 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 13 Mar 2012 10:49:50 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <39EBB0A6-4E49-43E4-9AF3-1E7EA0917994@canonware.com>
References: <1329996181-706-2-git-send-email-mh+jemalloc@glandium.org>
	<B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
	<20120312192806.GA4972@glandium.org>
	<BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>
	<82262E92-B898-4697-A62C-1270A839D477@canonware.com>
	<39EBB0A6-4E49-43E4-9AF3-1E7EA0917994@canonware.com>
Message-ID: <20120313094950.GA12280@glandium.org>

On Mon, Mar 12, 2012 at 03:15:54PM -0700, Jason Evans wrote:
> 
> On Mar 12, 2012, at 1:36 PM, Jason Evans wrote:
> 
> > On Mar 12, 2012, at 1:12 PM, Jason Evans wrote:
> >> On Mar 12, 2012, at 12:28 PM, Mike Hommey wrote:
> >>> On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
> >>>> 
> >>>> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
> >>>> 
> >>>> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
> >>> 
> >>> After running that, this is what jemalloc_defs.h contains:
> >>> [?]
> >>> 
> >>> Even without --with-jemalloc-prefix=je_, I get the same output.
> >> 
> >> What operating system are you using?
> > 
> > I reproduced the problem on an Ubuntu 10.04 system, and will come up with a fix.
> 
> This should be fixed now:
> 
>   http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=08fc3b2d5173512a2c1fdbe11cf00c8c70bad503

It works as expected. Thanks.

Mike


From ingvar at redpill-linpro.com  Tue Mar 13 14:52:30 2012
From: ingvar at redpill-linpro.com (Ingvar Hagelund)
Date: Tue, 13 Mar 2012 22:52:30 +0100 (CET)
Subject: [PATCH] atomic operations for ppc
In-Reply-To: <902977757.22167540.1331674851806.JavaMail.root@claudius.linpro.no>
Message-ID: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>

This patch should, if it is correct, add the functions atomic_add_uint32 and atomic_sub_uint32 that are missing on some platforms, at least RHEL5/ppc[64]. With this patch, jemalloc may be updated to 2.2.x also in the EPEL5 repositories.

The code was borrowed from the Boost library, see http://www.boost.org/doc/libs/1_49_0/boost/interprocess/detail/atomic.hpp . The Boost library is under the Boost license, which is quite BSD-like, but the license should probably be checked out for compatibility. See http://www.boost.org/LICENSE_1_0.txt 

Since I actually know nothing about ppc assembler myself, and have never used the Boost library, I should thank Federico G. Schwindt for valuable input on the patch.

Jason, could you produce a test case that confirms that the patch works?

Best regards,
Ingvar Hagelund





--- ../jemalloc-2.2.5.orig/include/jemalloc/internal/atomic.h   2011-11-15 02:18:06.000000000 +0100
+++ include/jemalloc/internal/atomic.h  2012-03-09 08:44:45.930652898 +0100
@@ -160,6 +160,33 @@

        return (x);
 }
+#elif (defined(__ppc__) || defined(__PPC__))
+// Code shamelessly stolen from the boost library
+// Please do a license check before distributing
+JEMALLOC_INLINE uint32_t
+atomic_add_uint32(uint32_t *p, uint32_t x)
+{
+       uint32_t prev, temp;
+
+       asm volatile ("0:\n\t"                 // retry local label     
+               "lwarx  %0,0,%2\n\t"       // load prev and reserve 
+               "add    %1,%0,%3\n\t"      // temp = prev + x 
+               "stwcx. %1,0,%2\n\t"       // conditionally store   
+               "bne-   0b"                // start over if we lost
+                                          // the reservation
+               //XXX find a cleaner way to define the temp         
+               //it's not an output
+               : "=&r" (prev), "=&r" (temp)        // output, temp 
+               : "b" (p), "r" (x)                  // inputs       
+               : "memory", "cc");                  // clobbered    
+       return temp;
+}
+
+JEMALLOC_INLINE uint32_t
+atomic_sub_uint32(uint32_t *p, uint32_t x)
+{
+       return atomic_add_uint32(p, -x);
+}
 #else
 #  error "Missing implementation for 32-bit atomic operations"
 #endif


From jasone at canonware.com  Tue Mar 13 15:19:28 2012
From: jasone at canonware.com (Jason Evans)
Date: Tue, 13 Mar 2012 15:19:28 -0700
Subject: [PATCH] atomic operations for ppc
In-Reply-To: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>
References: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>
Message-ID: <5BC259BB-02BF-4CB2-A5D0-B09760772051@canonware.com>

On Mar 13, 2012, at 2:52 PM, Ingvar Hagelund wrote:
> This patch should, if it is correct, add the functions atomic_add_uint32 and atomic_sub_uint32 that are missing on some platforms, at least RHEL5/ppc[64]. With this patch, jemalloc may be updated to 2.2.x also in the EPEL5 repositories.
> 
> The code was borrowed from the Boost library, see http://www.boost.org/doc/libs/1_49_0/boost/interprocess/detail/atomic.hpp . The Boost library is under the Boost license, which is quite BSD-like, but the license should probably be checked out for compatibility. See http://www.boost.org/LICENSE_1_0.txt 
> 
> Since I actually know nothing about ppc assembler myself, and have never used the Boost library, I should thank Federico G. Schwindt for valuable input on the patch.
> 
> Jason, could you produce a test case that confirms that the patch works?

I think this should be a sufficient sanity check: after running 'make check', run 'MALLOC_CONF=stats_print:true ./test/allocated' and look at the "Current active ceiling" statistic as it relates to the "active" statistic.  Here's the relevant output on my system:

  Allocated: 53728, active: 57344, mapped: 12582912
  Current active ceiling: 4194304

The active ceiling should be >= active, and certainly less than 10 MiB.

I'm a bit confused about where the code actually originated.  A quick web search finds hits both in APR (Apache license) and Boost.

Thanks,
Jason

> 
> Best regards,
> Ingvar Hagelund
> 
> 
> 
> 
> 
> --- ../jemalloc-2.2.5.orig/include/jemalloc/internal/atomic.h   2011-11-15 02:18:06.000000000 +0100
> +++ include/jemalloc/internal/atomic.h  2012-03-09 08:44:45.930652898 +0100
> @@ -160,6 +160,33 @@
> 
>        return (x);
> }
> +#elif (defined(__ppc__) || defined(__PPC__))
> +// Code shamelessly stolen from the boost library
> +// Please do a license check before distributing
> +JEMALLOC_INLINE uint32_t
> +atomic_add_uint32(uint32_t *p, uint32_t x)
> +{
> +       uint32_t prev, temp;
> +
> +       asm volatile ("0:\n\t"                 // retry local label     
> +               "lwarx  %0,0,%2\n\t"       // load prev and reserve 
> +               "add    %1,%0,%3\n\t"      // temp = prev + x 
> +               "stwcx. %1,0,%2\n\t"       // conditionally store   
> +               "bne-   0b"                // start over if we lost
> +                                          // the reservation
> +               //XXX find a cleaner way to define the temp         
> +               //it's not an output
> +               : "=&r" (prev), "=&r" (temp)        // output, temp 
> +               : "b" (p), "r" (x)                  // inputs       
> +               : "memory", "cc");                  // clobbered    
> +       return temp;
> +}
> +
> +JEMALLOC_INLINE uint32_t
> +atomic_sub_uint32(uint32_t *p, uint32_t x)
> +{
> +       return atomic_add_uint32(p, -x);
> +}
> #else
> #  error "Missing implementation for 32-bit atomic operations"
> #endif
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss
> 



From fgsch at lodoss.net  Tue Mar 13 19:13:43 2012
From: fgsch at lodoss.net (Federico Schwindt)
Date: Wed, 14 Mar 2012 02:13:43 +0000
Subject: [PATCH] atomic operations for ppc
In-Reply-To: <5BC259BB-02BF-4CB2-A5D0-B09760772051@canonware.com>
References: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>
	<5BC259BB-02BF-4CB2-A5D0-B09760772051@canonware.com>
Message-ID: <CAJV_h0ajZZjpvmTvkkwWYnbJQPBnX63b5Yqa3foStM5yafXrVg@mail.gmail.com>

On Tue, Mar 13, 2012 at 10:19 PM, Jason Evans <jasone at canonware.com> wrote:
> On Mar 13, 2012, at 2:52 PM, Ingvar Hagelund wrote:
>> This patch should, if it is correct, add the functions atomic_add_uint32 and atomic_sub_uint32 that are missing on some platforms, at least RHEL5/ppc[64]. With this patch, jemalloc may be updated to 2.2.x also in the EPEL5 repositories.
> [..]
> I'm a bit confused about where the code actually originated. ?A quick web search finds hits both in APR (Apache license) and Boost.

Hi,

I'm checking the licensing with boost and apr.
I will let you know when I have the confirmation but it looks like it
first appeared in apr 1.0.0 under Apache License 2.0 so that might be
a problem.

f.-


From mh+jemalloc at glandium.org  Thu Mar 15 12:58:39 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 15 Mar 2012 20:58:39 +0100
Subject: Android issues
Message-ID: <20120315195839.GA22205@glandium.org>

Hi,

I'm trying to get jemalloc built for Android, and here is a short list
of things that go wrong:
- pthread_create is not defined in libpthread, but in libc, which makes
  the configure.ac test fail.
- The AC_RUN_IFELSE test for STATIC_PAGE_SHIFT fails because it requires
  not to be cross-compiling, which makes configure.ac hard-fail.
- Android system headers don't provide sys/sysctl.h. But it seems it's
  not used anyways, so removing the include worked for me (and worked on
  plain Linux too)
- There are no atomic ops for arm, but the __sync_* ones work. Sadly,
  the compiler doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.
- Older Android stack doesn't have pthread_atfork. But I don't think you
  should care about that. We have a workaround for that.

Apparently, that's all, though I haven't run it yet because of other
integration problems with Firefox.

Cheers,

Mike


From jasone at canonware.com  Thu Mar 15 17:13:58 2012
From: jasone at canonware.com (Jason Evans)
Date: Thu, 15 Mar 2012 17:13:58 -0700
Subject: Android issues
In-Reply-To: <20120315195839.GA22205@glandium.org>
References: <20120315195839.GA22205@glandium.org>
Message-ID: <DA0AF279-052B-4ACF-AA39-9B0B70595344@canonware.com>

On Mar 15, 2012, at 12:58 PM, Mike Hommey wrote:
> I'm trying to get jemalloc built for Android, and here is a short list
> of things that go wrong:
> - pthread_create is not defined in libpthread, but in libc, which makes
>  the configure.ac test fail.

Interesting.  A workaround for this should be pretty straightforward (on my todo list now).

> - The AC_RUN_IFELSE test for STATIC_PAGE_SHIFT fails because it requires
>  not to be cross-compiling, which makes configure.ac hard-fail.

Andreas Vinsander cross-compiled for SH4 by providing sh4.cache to configure:

	http://www.canonware.com/pipermail/jemalloc-discuss/2011-April/000018.html

Perhaps something similar will work for Android.

> - Android system headers don't provide sys/sysctl.h. But it seems it's
>  not used anyways, so removing the include worked for me (and worked on
>  plain Linux too)

I think this was a holdover from using sysctl to get the number of CPUs.  I just removed it on the dev branch.

> - There are no atomic ops for arm, but the __sync_* ones work. Sadly,
>  the compiler doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.

Ouch.  Maybe "CPPFLAGS=-D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 configure ?" will be an adequate workaround.

Thanks,
Jason

From mh+jemalloc at glandium.org  Thu Mar 15 23:22:47 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Fri, 16 Mar 2012 07:22:47 +0100
Subject: Android issues
In-Reply-To: <DA0AF279-052B-4ACF-AA39-9B0B70595344@canonware.com>
References: <20120315195839.GA22205@glandium.org>
	<DA0AF279-052B-4ACF-AA39-9B0B70595344@canonware.com>
Message-ID: <20120316062247.GA30443@glandium.org>

On Thu, Mar 15, 2012 at 05:13:58PM -0700, Jason Evans wrote:
> On Mar 15, 2012, at 12:58 PM, Mike Hommey wrote:
> > I'm trying to get jemalloc built for Android, and here is a short list
> > of things that go wrong:
> > - pthread_create is not defined in libpthread, but in libc, which makes
> >  the configure.ac test fail.
> 
> Interesting.  A workaround for this should be pretty straightforward (on my todo list now).
> 
> > - The AC_RUN_IFELSE test for STATIC_PAGE_SHIFT fails because it requires
> >  not to be cross-compiling, which makes configure.ac hard-fail.
> 
> Andreas Vinsander cross-compiled for SH4 by providing sh4.cache to configure:
> 
> 	http://www.canonware.com/pipermail/jemalloc-discuss/2011-April/000018.html
> 
> Perhaps something similar will work for Android.

Yeah, what I did was to pass je_cv_static_page_shift=12 to configure.
That works, too.

> > - Android system headers don't provide sys/sysctl.h. But it seems it's
> >  not used anyways, so removing the include worked for me (and worked on
> >  plain Linux too)
> 
> I think this was a holdover from using sysctl to get the number of CPUs.  I just removed it on the dev branch.
> 
> > - There are no atomic ops for arm, but the __sync_* ones work. Sadly,
> >  the compiler doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.
> 
> Ouch.  Maybe "CPPFLAGS=-D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 configure ?" will be an adequate workaround.

Alternatively, adding __arm__ to the other place where the __sync_*
functions are used works too. (where currently there is sha4 and mips)

Mike


From mh+jemalloc at glandium.org  Sun Mar 18 13:41:23 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Sun, 18 Mar 2012 21:41:23 +0100
Subject: 4c2faa8 Fix a regression in JE_COMPILABLE()
Message-ID: <20120318204123.GA3217@glandium.org>

> Revert JE_COMPILABLE() so that it detects link errors.
> Cross-compiling should still work as long as a valid configure cache
> is provided.

Having to provide a cache value for each of those is going to get
quickly annoying. Is there a particular reason you need to use
AC_RUN_IFELSE instead of AC_TRY_LINK?

Mike


From mh+jemalloc at glandium.org  Mon Mar 19 04:57:29 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 19 Mar 2012 12:57:29 +0100
Subject: 4e2e3dd Fix fork-related bugs.
Message-ID: <20120319115729.GA4299@glandium.org>

Hi,

This commit broke building on OSX, because jemalloc_postfork, used in
zone.c, isn't there anymore.

Cheers,

Mike


From mh+jemalloc at glandium.org  Mon Mar 19 05:02:24 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 19 Mar 2012 13:02:24 +0100
Subject: d81e4bdd Implement malloc_vsnprintf().
Message-ID: <20120319120224.GB4299@glandium.org>

Hi,

This commit added a use of __thread in malloc_vtprintf. Unfortunately,
this keyword is not supported everywhere, and this breaks building on
OSX, where the keyword is not supported by the compiler.

It also breaks assumptions you'd make when you --disable-tls, which is
needed on Android, because while the compiler supports __thread, the
runtime doesn't.

Cheers,

Mike


From jasone at canonware.com  Mon Mar 19 07:02:48 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 19 Mar 2012 07:02:48 -0700
Subject: 4e2e3dd Fix fork-related bugs.
In-Reply-To: <20120319115729.GA4299@glandium.org>
References: <20120319115729.GA4299@glandium.org>
Message-ID: <6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>

On Mar 19, 2012, at 4:57 AM, Mike Hommey wrote:
> This commit broke building on OSX, because jemalloc_postfork, used in
> zone.c, isn't there anymore.


Thanks for the heads up on this and the __thread regression.  Clearly it's time for me to add support for Lion so that I can start testing on OS X again. =)

Jason

From mh+jemalloc at glandium.org  Mon Mar 19 07:20:39 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 19 Mar 2012 15:20:39 +0100
Subject: 4e2e3dd Fix fork-related bugs.
In-Reply-To: <6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>
References: <20120319115729.GA4299@glandium.org>
	<6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>
Message-ID: <20120319142039.GB25374@glandium.org>

On Mon, Mar 19, 2012 at 07:02:48AM -0700, Jason Evans wrote:
> On Mar 19, 2012, at 4:57 AM, Mike Hommey wrote:
> > This commit broke building on OSX, because jemalloc_postfork, used
> > in zone.c, isn't there anymore.
> 
> 
> Thanks for the heads up on this and the __thread regression.  Clearly
> it's time for me to add support for Lion so that I can start testing
> on OS X again. =)

I'll probably have patches for that tomorrow, as I'm almost done with
Android, and OSX is next.

Mike


From mh+jemalloc at glandium.org  Mon Mar 19 09:25:14 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 19 Mar 2012 17:25:14 +0100
Subject: Android issues
In-Reply-To: <20120316062247.GA30443@glandium.org>
References: <20120315195839.GA22205@glandium.org>
	<DA0AF279-052B-4ACF-AA39-9B0B70595344@canonware.com>
	<20120316062247.GA30443@glandium.org>
Message-ID: <20120319162514.GA6946@glandium.org>

On Fri, Mar 16, 2012 at 07:22:47AM +0100, Mike Hommey wrote:
> > Ouch.  Maybe "CPPFLAGS=-D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 configure ?" will be an adequate workaround.
> 
> Alternatively, adding __arm__ to the other place where the __sync_*
> functions are used works too. (where currently there is sha4 and mips)

So, I've found the pattern, and we should probably test for it in
configure instead of relying on endless if defined() || defined() tests.

When no __GCC_HAVE_SYNC_COMPARE_AND_SWAP_* is defined by the compiler,
the __sync_* functions may actually be defined in libgcc.a. So we should
have an AC_TRY_LINK test using the __sync_* functions when
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_* is not set and AC_DEFINE something
when that works.

Mike


From mh+jemalloc at glandium.org  Mon Mar 19 09:36:54 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 19 Mar 2012 17:36:54 +0100
Subject: 4c2faa8 Fix a regression in JE_COMPILABLE()
In-Reply-To: <20120318204123.GA3217@glandium.org>
References: <20120318204123.GA3217@glandium.org>
Message-ID: <20120319163654.GA7637@glandium.org>

On Sun, Mar 18, 2012 at 09:41:23PM +0100, Mike Hommey wrote:
> > Revert JE_COMPILABLE() so that it detects link errors.
> > Cross-compiling should still work as long as a valid configure cache
> > is provided.
> 
> Having to provide a cache value for each of those is going to get
> quickly annoying. Is there a particular reason you need to use
> AC_RUN_IFELSE instead of AC_TRY_LINK?

or instead of AC_LINK_IFELSE, for that matter.

Mike


From jasone at canonware.com  Mon Mar 19 09:56:07 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 19 Mar 2012 09:56:07 -0700
Subject: 4c2faa8 Fix a regression in JE_COMPILABLE()
In-Reply-To: <20120319163654.GA7637@glandium.org>
References: <20120318204123.GA3217@glandium.org>
	<20120319163654.GA7637@glandium.org>
Message-ID: <706A86CE-48CB-4114-899D-92FD234E3724@canonware.com>

On Mar 19, 2012, at 9:36 AM, Mike Hommey wrote:
> On Sun, Mar 18, 2012 at 09:41:23PM +0100, Mike Hommey wrote:
>>> Revert JE_COMPILABLE() so that it detects link errors.
>>> Cross-compiling should still work as long as a valid configure cache
>>> is provided.
>> 
>> Having to provide a cache value for each of those is going to get
>> quickly annoying. Is there a particular reason you need to use
>> AC_RUN_IFELSE instead of AC_TRY_LINK?
> 
> or instead of AC_LINK_IFELSE, for that matter.

AC_LINK_IFELSE() does the right thing here.  Thanks for pointing it out.

Jason


From fgsch at lodoss.net  Mon Mar 19 18:50:10 2012
From: fgsch at lodoss.net (Federico Schwindt)
Date: Tue, 20 Mar 2012 01:50:10 +0000
Subject: [PATCH] atomic operations for ppc
In-Reply-To: <CAJV_h0ajZZjpvmTvkkwWYnbJQPBnX63b5Yqa3foStM5yafXrVg@mail.gmail.com>
References: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>
	<5BC259BB-02BF-4CB2-A5D0-B09760772051@canonware.com>
	<CAJV_h0ajZZjpvmTvkkwWYnbJQPBnX63b5Yqa3foStM5yafXrVg@mail.gmail.com>
Message-ID: <CAJV_h0axXQ=8P=fa6QOSomGHGssOFabk--j+1FF3iPwkQUMULg@mail.gmail.com>

On Wed, Mar 14, 2012 at 2:13 AM, Federico Schwindt <fgsch at lodoss.net> wrote:
> On Tue, Mar 13, 2012 at 10:19 PM, Jason Evans <jasone at canonware.com> wrote:
>> On Mar 13, 2012, at 2:52 PM, Ingvar Hagelund wrote:
>>> This patch should, if it is correct, add the functions atomic_add_uint32 and atomic_sub_uint32 that are missing on some platforms, at least RHEL5/ppc[64]. With this patch, jemalloc may be updated to 2.2.x also in the EPEL5 repositories.
>> [..]
>> I'm a bit confused about where the code actually originated. ?A quick web search finds hits both in APR (Apache license) and Boost.
>
> Hi,
>
> I'm checking the licensing with boost and apr.
> I will let you know when I have the confirmation but it looks like it
> first appeared in apr 1.0.0 under Apache License 2.0 so that might be
> a problem.

Hi,

I've contacted both apr and boost respective developers and they have
confirmed the code comes from apr.
Now, considering that there are a limited number of ways to implement
an atomic operation in assembler, the size of the code and the amount
of almost identical implementations around (i.e [1], [2] or [3]) it'd
be very difficult (if not impossible) to copyright the code.
If you truly want to be on the safe side removing the comments and
changing the variable names would be enough.
Regards,

f.-

1. http://www.ibm.com/developerworks/library/pa-atom/
2. http://www.mulle-kybernetik.com/artikel/Optimization/opti-4-atomic.html
3. http://www.opensource.apple.com/source/xnu/xnu-792.2.4/osfmk/ppc/commpage/atomic.s


From mh+jemalloc at glandium.org  Mon Mar 19 23:53:31 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 20 Mar 2012 07:53:31 +0100
Subject: [PATCH] Allow to use different prefixes for jemalloc-specific
	functions and libc functions
In-Reply-To: <20120313094950.GA12280@glandium.org>
References: <B667717E-8CB4-4C6F-B244-D8F57CD17D88@canonware.com>
	<20120301144428.GA22596@glandium.org>
	<9D79926B-3D10-4617-B90E-5BFA2B273800@canonware.com>
	<20120312094907.GA25158@glandium.org>
	<2E620F8C-3C2B-4E80-866E-1A2260AE0C94@canonware.com>
	<20120312192806.GA4972@glandium.org>
	<BBBBA4FA-5275-4B40-B1F4-F3E93BBA5CB3@canonware.com>
	<82262E92-B898-4697-A62C-1270A839D477@canonware.com>
	<39EBB0A6-4E49-43E4-9AF3-1E7EA0917994@canonware.com>
	<20120313094950.GA12280@glandium.org>
Message-ID: <20120320065331.GA23326@glandium.org>

On Tue, Mar 13, 2012 at 10:49:50AM +0100, Mike Hommey wrote:
> On Mon, Mar 12, 2012 at 03:15:54PM -0700, Jason Evans wrote:
> > 
> > On Mar 12, 2012, at 1:36 PM, Jason Evans wrote:
> > 
> > > On Mar 12, 2012, at 1:12 PM, Jason Evans wrote:
> > >> On Mar 12, 2012, at 12:28 PM, Mike Hommey wrote:
> > >>> On Mon, Mar 12, 2012 at 11:44:41AM -0700, Jason Evans wrote:
> > >>>> 
> > >>>> The name mangling that is specified via --with-mangling overrides --with-jemalloc-prefix, so I thought this would do what you want.
> > >>>> 
> > >>>> ./autogen.sh --enable-cc-silence --enable-prof --enable-debug --with-mangling=malloc:__wrap_malloc,calloc:__wrap_calloc,realloc:__wrap_realloc,free:__wrap_free --with-jemalloc-prefix=je_
> > >>> 
> > >>> After running that, this is what jemalloc_defs.h contains:
> > >>> [?]
> > >>> 
> > >>> Even without --with-jemalloc-prefix=je_, I get the same output.
> > >> 
> > >> What operating system are you using?
> > > 
> > > I reproduced the problem on an Ubuntu 10.04 system, and will come up with a fix.
> > 
> > This should be fixed now:
> > 
> >   http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=08fc3b2d5173512a2c1fdbe11cf00c8c70bad503
> 
> It works as expected. Thanks.

It broke commit 4bb09830, because it made the hooks only present if
there is no JEMALLOC_PREFIX, which is good, but not enough: I'm building
with JEMALLOC_PREFIX=je_ and mangling to have malloc, free, etc.
declared as malloc, free, etc., which is the typical case where the
hooks from commit 4bb09830 are necessary (without the hooks, Firefox
crashes on shutdown because libc tries to deallocate tls data with
jemalloc's free, when it allocated it internally ; arguably, there's a
bug in the libc, there).

The only way I can think of that would make it work is to use a
configure option to add the hooks (checking whether the mangling leads
to the relevant functions overriding libc's doesn't look very possible
from the preprocessor).

Mike


From mh+jemalloc at glandium.org  Tue Mar 20 09:50:06 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 20 Mar 2012 17:50:06 +0100
Subject: 4e2e3dd Fix fork-related bugs.
In-Reply-To: <6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>
References: <20120319115729.GA4299@glandium.org>
	<6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>
Message-ID: <20120320165006.GA20305@glandium.org>

On Mon, Mar 19, 2012 at 07:02:48AM -0700, Jason Evans wrote:
> On Mar 19, 2012, at 4:57 AM, Mike Hommey wrote:
> > This commit broke building on OSX, because jemalloc_postfork, used
> > in zone.c, isn't there anymore.
> 
> 
> Thanks for the heads up on this and the __thread regression.  Clearly
> it's time for me to add support for Lion so that I can start testing
> on OS X again. =)

Since I looked at the OSX libc source, I have some additional
information about force_lock and force_unlock in the introspection
struct. As it turns out, these functions are called before and after
forking, so they actually have the exact role of jemalloc_prefork and
jemalloc_postfork. But now that postfork has a different code for parent
and child, and since there is no such distinction in the zone allocator,
I guess what should happen is for jemalloc to check if the pid of the
process in postfork is the same as the one it saw during prefork, and
dispatch to postfork_child or postfork_parent accordingly.

Thoughts?

Cheers,

Mike


From jasone at canonware.com  Tue Mar 20 09:53:12 2012
From: jasone at canonware.com (Jason Evans)
Date: Tue, 20 Mar 2012 09:53:12 -0700
Subject: 4e2e3dd Fix fork-related bugs.
In-Reply-To: <20120320165006.GA20305@glandium.org>
References: <20120319115729.GA4299@glandium.org>
	<6F007ED7-1713-41BE-9389-A66B9D1D71E2@canonware.com>
	<20120320165006.GA20305@glandium.org>
Message-ID: <CDB43246-FD7C-40FC-89FF-E8B84E2F450E@canonware.com>

On Mar 20, 2012, at 9:50 AM, Mike Hommey wrote:
> On Mon, Mar 19, 2012 at 07:02:48AM -0700, Jason Evans wrote:
>> On Mar 19, 2012, at 4:57 AM, Mike Hommey wrote:
>>> This commit broke building on OSX, because jemalloc_postfork, used
>>> in zone.c, isn't there anymore.
>> 
>> 
>> Thanks for the heads up on this and the __thread regression.  Clearly
>> it's time for me to add support for Lion so that I can start testing
>> on OS X again. =)
> 
> Since I looked at the OSX libc source, I have some additional
> information about force_lock and force_unlock in the introspection
> struct. As it turns out, these functions are called before and after
> forking, so they actually have the exact role of jemalloc_prefork and
> jemalloc_postfork. But now that postfork has a different code for parent
> and child, and since there is no such distinction in the zone allocator,
> I guess what should happen is for jemalloc to check if the pid of the
> process in postfork is the same as the one it saw during prefork, and
> dispatch to postfork_child or postfork_parent accordingly.
> 
> Thoughts?

In practice, most mutex implementations can safely be unlocked in the child rather than being reinitialized, so I think it's okay to just use the parent version of the function here.

Thanks,
Jason

From mh+jemalloc at glandium.org  Tue Mar 20 10:01:38 2012
From: mh+jemalloc at glandium.org (mh+jemalloc at glandium.org)
Date: Tue, 20 Mar 2012 18:01:38 +0100
Subject: [PATCH 3/3] Improve zone support for OSX
Message-ID: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
I tested a build from 10.7 run on 10.7 and 10.6, and a build from 10.6
run on 10.6.
The AC_COMPILE_IFELSE limbo is to avoid running a program during
configure, which presumably makes it work when cross compiling for iOS.

 configure.ac   |   59 ++++++++----------
 src/jemalloc.c |   20 ++++--
 src/zone.c     |  191 +++++++-------------------------------------------------
 3 files changed, 63 insertions(+), 207 deletions(-)

diff --git a/configure.ac b/configure.ac
index 76cb670..02d4f53 100644
--- a/configure.ac
+++ b/configure.ac
@@ -877,39 +877,32 @@ if test "x${abi}" = "xmacho" ; then
   dnl releases.  malloc_zone_t and malloc_introspection_t have new fields in
   dnl 10.6, which is the only source-level indication of the change.
   AC_MSG_CHECKING([malloc zone version])
-  AC_TRY_COMPILE([#include <stdlib.h>
-#include <malloc/malloc.h>], [
-	static malloc_zone_t zone;
-	static struct malloc_introspection_t zone_introspect;
-
-	zone.size = NULL;
-	zone.malloc = NULL;
-	zone.calloc = NULL;
-	zone.valloc = NULL;
-	zone.free = NULL;
-	zone.realloc = NULL;
-	zone.destroy = NULL;
-	zone.zone_name = "jemalloc_zone";
-	zone.batch_malloc = NULL;
-	zone.batch_free = NULL;
-	zone.introspect = &zone_introspect;
-	zone.version = 6;
-	zone.memalign = NULL;
-	zone.free_definite_size = NULL;
-
-	zone_introspect.enumerator = NULL;
-	zone_introspect.good_size = NULL;
-	zone_introspect.check = NULL;
-	zone_introspect.print = NULL;
-	zone_introspect.log = NULL;
-	zone_introspect.force_lock = NULL;
-	zone_introspect.force_unlock = NULL;
-	zone_introspect.statistics = NULL;
-	zone_introspect.zone_locked = NULL;
-], [AC_DEFINE_UNQUOTED([JEMALLOC_ZONE_VERSION], [6])
-    AC_MSG_RESULT([6])],
-   [AC_DEFINE_UNQUOTED([JEMALLOC_ZONE_VERSION], [3])
-   AC_MSG_RESULT([3])])
+  AC_DEFUN([JE_ZONE_PROGRAM],
+    [AC_LANG_PROGRAM(
+      [#include <malloc/malloc.h>],
+      [static foo[[sizeof($1) $2 sizeof(void *) * $3 ? 1 : -1]]]
+    )])
+
+  AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,14)],[JEMALLOC_ZONE_VERSION=3],[
+  AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,15)],[JEMALLOC_ZONE_VERSION=5],[
+  AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,16)],[
+    AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_introspection_t,==,9)],[JEMALLOC_ZONE_VERSION=6],[
+    AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_introspection_t,==,13)],[JEMALLOC_ZONE_VERSION=7],[JEMALLOC_ZONE_VERSION=]
+  )])],[
+  AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,17)],[JEMALLOC_ZONE_VERSION=8],[
+  AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,>,17)],[JEMALLOC_ZONE_VERSION=9],[JEMALLOC_ZONE_VERSION=]
+  )])])])])
+  if test "x${JEMALLOC_ZONE_VERSION}" = "x"; then
+    AC_MSG_RESULT([unsupported])
+    AC_MSG_ERROR([Unsupported malloc zone version])
+  fi
+  if test "${JEMALLOC_ZONE_VERSION}" = 9; then
+    JEMALLOC_ZONE_VERSION=8
+    AC_MSG_RESULT([> 8])
+  else
+    AC_MSG_RESULT([$JEMALLOC_ZONE_VERSION])
+  fi
+  AC_DEFINE_UNQUOTED(JEMALLOC_ZONE_VERSION, [$JEMALLOC_ZONE_VERSION])
 fi
 
 dnl ============================================================================
diff --git a/src/jemalloc.c b/src/jemalloc.c
index e2b6134..2610452 100644
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -747,15 +747,23 @@ malloc_init_hard(void)
 	arenas[0] = init_arenas[0];
 
 #ifdef JEMALLOC_ZONE
-	/* Register the custom zone. */
-	malloc_zone_register(create_zone());
+	/* Register the custom zone. At this point it won't be the default. */
+	malloc_zone_t *jemalloc_zone = create_zone();
+	malloc_zone_register(jemalloc_zone);
 
 	/*
-	 * Convert the default szone to an "overlay zone" that is capable of
-	 * deallocating szone-allocated objects, but allocating new objects
-	 * from jemalloc.
+	 * Unregister and reregister the default zone. On OSX >= 10.6,
+	 * unregistering takes the last registered zone and places it at the
+	 * location of the specified zone. Unregistering the default zone thus
+	 * makes the last registered one the default. On OSX < 10.6,
+	 * unregistering shifts all registered zones. The first registered zone
+	 * then becomes the default.
 	 */
-	szone2ozone(malloc_default_zone());
+	do {
+		malloc_zone_t *default_zone = malloc_default_zone();
+		malloc_zone_unregister(default_zone);
+		malloc_zone_register(default_zone);
+	} while (malloc_default_zone() != jemalloc_zone);
 #endif
 
 	malloc_initialized = true;
diff --git a/src/zone.c b/src/zone.c
index a0372e1..a8f09c9 100644
--- a/src/zone.c
+++ b/src/zone.c
@@ -6,8 +6,8 @@
 /******************************************************************************/
 /* Data. */
 
-static malloc_zone_t zone, szone;
-static struct malloc_introspection_t zone_introspect, ozone_introspect;
+static malloc_zone_t zone;
+static struct malloc_introspection_t zone_introspect;
 
 /******************************************************************************/
 /* Function prototypes for non-inline static functions. */
@@ -18,8 +18,10 @@ static void	*zone_calloc(malloc_zone_t *zone, size_t num, size_t size);
 static void	*zone_valloc(malloc_zone_t *zone, size_t size);
 static void	zone_free(malloc_zone_t *zone, void *ptr);
 static void	*zone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
-#if (JEMALLOC_ZONE_VERSION >= 6)
+#if (JEMALLOC_ZONE_VERSION >= 5)
 static void	*zone_memalign(malloc_zone_t *zone, size_t alignment,
+#endif
+#if (JEMALLOC_ZONE_VERSION >= 6)
     size_t size);
 static void	zone_free_definite_size(malloc_zone_t *zone, void *ptr,
     size_t size);
@@ -28,19 +30,6 @@ static void	*zone_destroy(malloc_zone_t *zone);
 static size_t	zone_good_size(malloc_zone_t *zone, size_t size);
 static void	zone_force_lock(malloc_zone_t *zone);
 static void	zone_force_unlock(malloc_zone_t *zone);
-static size_t	ozone_size(malloc_zone_t *zone, void *ptr);
-static void	ozone_free(malloc_zone_t *zone, void *ptr);
-static void	*ozone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
-static unsigned	ozone_batch_malloc(malloc_zone_t *zone, size_t size,
-    void **results, unsigned num_requested);
-static void	ozone_batch_free(malloc_zone_t *zone, void **to_be_freed,
-    unsigned num);
-#if (JEMALLOC_ZONE_VERSION >= 6)
-static void	ozone_free_definite_size(malloc_zone_t *zone, void *ptr,
-    size_t size);
-#endif
-static void	ozone_force_lock(malloc_zone_t *zone);
-static void	ozone_force_unlock(malloc_zone_t *zone);
 
 /******************************************************************************/
 /*
@@ -101,7 +90,7 @@ zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
 	return (je_realloc(ptr, size));
 }
 
-#if (JEMALLOC_ZONE_VERSION >= 6)
+#if (JEMALLOC_ZONE_VERSION >= 5)
 static void *
 zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
 {
@@ -111,7 +100,9 @@ zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
 
 	return (ret);
 }
+#endif
 
+#if (JEMALLOC_ZONE_VERSION >= 6)
 static void
 zone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
 {
@@ -171,10 +162,15 @@ create_zone(void)
 	zone.batch_free = NULL;
 	zone.introspect = &zone_introspect;
 	zone.version = JEMALLOC_ZONE_VERSION;
-#if (JEMALLOC_ZONE_VERSION >= 6)
+#if (JEMALLOC_ZONE_VERSION >= 5)
 	zone.memalign = zone_memalign;
+#endif
+#if (JEMALLOC_ZONE_VERSION >= 6)
 	zone.free_definite_size = zone_free_definite_size;
 #endif
+#if (JEMALLOC_ZONE_VERSION >= 8)
+	zone.pressure_relief = NULL;
+#endif
 
 	zone_introspect.enumerator = NULL;
 	zone_introspect.good_size = (void *)zone_good_size;
@@ -187,156 +183,15 @@ create_zone(void)
 #if (JEMALLOC_ZONE_VERSION >= 6)
 	zone_introspect.zone_locked = NULL;
 #endif
-
-	return (&zone);
-}
-
-static size_t
-ozone_size(malloc_zone_t *zone, void *ptr)
-{
-	size_t ret;
-
-	ret = ivsalloc(ptr);
-	if (ret == 0)
-		ret = szone.size(zone, ptr);
-
-	return (ret);
-}
-
-static void
-ozone_free(malloc_zone_t *zone, void *ptr)
-{
-
-	if (ivsalloc(ptr) != 0)
-		je_free(ptr);
-	else {
-		size_t size = szone.size(zone, ptr);
-		if (size != 0)
-			(szone.free)(zone, ptr);
-	}
-}
-
-static void *
-ozone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
-{
-	size_t oldsize;
-
-	if (ptr == NULL)
-		return (je_malloc(size));
-
-	oldsize = ivsalloc(ptr);
-	if (oldsize != 0)
-		return (je_realloc(ptr, size));
-	else {
-		oldsize = szone.size(zone, ptr);
-		if (oldsize == 0)
-			return (je_malloc(size));
-		else {
-			void *ret = je_malloc(size);
-			if (ret != NULL) {
-				memcpy(ret, ptr, (oldsize < size) ? oldsize :
-				    size);
-				(szone.free)(zone, ptr);
-			}
-			return (ret);
-		}
-	}
-}
-
-static unsigned
-ozone_batch_malloc(malloc_zone_t *zone, size_t size, void **results,
-    unsigned num_requested)
-{
-
-	/* Don't bother implementing this interface, since it isn't required. */
-	return (0);
-}
-
-static void
-ozone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned num)
-{
-	unsigned i;
-
-	for (i = 0; i < num; i++)
-		ozone_free(zone, to_be_freed[i]);
-}
-
-#if (JEMALLOC_ZONE_VERSION >= 6)
-static void
-ozone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
-{
-
-	if (ivsalloc(ptr) != 0) {
-		assert(ivsalloc(ptr) == size);
-		je_free(ptr);
-	} else {
-		assert(size == szone.size(zone, ptr));
-		szone.free_definite_size(zone, ptr, size);
-	}
-}
-#endif
-
-static void
-ozone_force_lock(malloc_zone_t *zone)
-{
-
-	/* jemalloc locking is taken care of by the normal jemalloc zone. */
-	szone.introspect->force_lock(zone);
-}
-
-static void
-ozone_force_unlock(malloc_zone_t *zone)
-{
-
-	/* jemalloc locking is taken care of by the normal jemalloc zone. */
-	szone.introspect->force_unlock(zone);
-}
-
-/*
- * Overlay the default scalable zone (szone) such that existing allocations are
- * drained, and further allocations come from jemalloc.  This is necessary
- * because Core Foundation directly accesses and uses the szone before the
- * jemalloc library is even loaded.
- */
-void
-szone2ozone(malloc_zone_t *zone)
-{
-
-	/*
-	 * Stash a copy of the original szone so that we can call its
-	 * functions as needed.  Note that the internally, the szone stores its
-	 * bookkeeping data structures immediately following the malloc_zone_t
-	 * header, so when calling szone functions, we need to pass a pointer
-	 * to the original zone structure.
-	 */
-	memcpy(&szone, zone, sizeof(malloc_zone_t));
-
-	zone->size = (void *)ozone_size;
-	zone->malloc = (void *)zone_malloc;
-	zone->calloc = (void *)zone_calloc;
-	zone->valloc = (void *)zone_valloc;
-	zone->free = (void *)ozone_free;
-	zone->realloc = (void *)ozone_realloc;
-	zone->destroy = (void *)zone_destroy;
-	zone->zone_name = "jemalloc_ozone";
-	zone->batch_malloc = ozone_batch_malloc;
-	zone->batch_free = ozone_batch_free;
-	zone->introspect = &ozone_introspect;
-	zone->version = JEMALLOC_ZONE_VERSION;
-#if (JEMALLOC_ZONE_VERSION >= 6)
-	zone->memalign = zone_memalign;
-	zone->free_definite_size = ozone_free_definite_size;
+#if (JEMALLOC_ZONE_VERSION >= 7)
+	zone_introspect.enable_discharge_checking = NULL;
+	zone_introspect.disable_discharge_checking = NULL;
+	zone_introspect.discharge = NULL;
+#ifdef __BLOCKS__
+	zone_introspect.enumerate_discharged_pointers = NULL;
+#else
+	zone_introspect.enumerate_unavailable_without_blocks = NULL;
 #endif
-
-	ozone_introspect.enumerator = NULL;
-	ozone_introspect.good_size = (void *)zone_good_size;
-	ozone_introspect.check = NULL;
-	ozone_introspect.print = NULL;
-	ozone_introspect.log = NULL;
-	ozone_introspect.force_lock = (void *)ozone_force_lock;
-	ozone_introspect.force_unlock = (void *)ozone_force_unlock;
-	ozone_introspect.statistics = NULL;
-#if (JEMALLOC_ZONE_VERSION >= 6)
-	ozone_introspect.zone_locked = NULL;
 #endif
+	return (&zone);
 }
-- 
1.7.5.4



From mh+jemalloc at glandium.org  Tue Mar 20 10:03:09 2012
From: mh+jemalloc at glandium.org (mh+jemalloc at glandium.org)
Date: Tue, 20 Mar 2012 18:03:09 +0100
Subject: [PATCH] Unbreak mac after commit 4e2e3dd
In-Reply-To: <CDB43246-FD7C-40FC-89FF-E8B84E2F450E@canonware.com>
References: <CDB43246-FD7C-40FC-89FF-E8B84E2F450E@canonware.com>
Message-ID: <1332262989-31979-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 src/zone.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/zone.c b/src/zone.c
index 5beed5f..a0372e1 100644
--- a/src/zone.c
+++ b/src/zone.c
@@ -152,7 +152,7 @@ zone_force_unlock(malloc_zone_t *zone)
 {
 
 	if (isthreaded)
-		jemalloc_postfork();
+		jemalloc_postfork_parent();
 }
 
 malloc_zone_t *
-- 
1.7.5.4



From justin.lebar at gmail.com  Tue Mar 20 10:04:54 2012
From: justin.lebar at gmail.com (Justin Lebar)
Date: Tue, 20 Mar 2012 13:04:54 -0400
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>

btw, I'm skeptical of the value of supporting OSX 10.5, because 10.5
occasionally passes invalid pointers to ozone_size [1].

[1] https://bugzilla.mozilla.org/show_bug.cgi?id=694335

On Tue, Mar 20, 2012 at 1:01 PM,  <mh+jemalloc at glandium.org> wrote:
> From: Mike Hommey <mh at glandium.org>
>
> ---
> I tested a build from 10.7 run on 10.7 and 10.6, and a build from 10.6
> run on 10.6.
> The AC_COMPILE_IFELSE limbo is to avoid running a program during
> configure, which presumably makes it work when cross compiling for iOS.
>
> ?configure.ac ? | ? 59 ++++++++----------
> ?src/jemalloc.c | ? 20 ++++--
> ?src/zone.c ? ? | ?191 +++++++-------------------------------------------------
> ?3 files changed, 63 insertions(+), 207 deletions(-)
>
> diff --git a/configure.ac b/configure.ac
> index 76cb670..02d4f53 100644
> --- a/configure.ac
> +++ b/configure.ac
> @@ -877,39 +877,32 @@ if test "x${abi}" = "xmacho" ; then
> ? dnl releases. ?malloc_zone_t and malloc_introspection_t have new fields in
> ? dnl 10.6, which is the only source-level indication of the change.
> ? AC_MSG_CHECKING([malloc zone version])
> - ?AC_TRY_COMPILE([#include <stdlib.h>
> -#include <malloc/malloc.h>], [
> - ? ? ? static malloc_zone_t zone;
> - ? ? ? static struct malloc_introspection_t zone_introspect;
> -
> - ? ? ? zone.size = NULL;
> - ? ? ? zone.malloc = NULL;
> - ? ? ? zone.calloc = NULL;
> - ? ? ? zone.valloc = NULL;
> - ? ? ? zone.free = NULL;
> - ? ? ? zone.realloc = NULL;
> - ? ? ? zone.destroy = NULL;
> - ? ? ? zone.zone_name = "jemalloc_zone";
> - ? ? ? zone.batch_malloc = NULL;
> - ? ? ? zone.batch_free = NULL;
> - ? ? ? zone.introspect = &zone_introspect;
> - ? ? ? zone.version = 6;
> - ? ? ? zone.memalign = NULL;
> - ? ? ? zone.free_definite_size = NULL;
> -
> - ? ? ? zone_introspect.enumerator = NULL;
> - ? ? ? zone_introspect.good_size = NULL;
> - ? ? ? zone_introspect.check = NULL;
> - ? ? ? zone_introspect.print = NULL;
> - ? ? ? zone_introspect.log = NULL;
> - ? ? ? zone_introspect.force_lock = NULL;
> - ? ? ? zone_introspect.force_unlock = NULL;
> - ? ? ? zone_introspect.statistics = NULL;
> - ? ? ? zone_introspect.zone_locked = NULL;
> -], [AC_DEFINE_UNQUOTED([JEMALLOC_ZONE_VERSION], [6])
> - ? ?AC_MSG_RESULT([6])],
> - ? [AC_DEFINE_UNQUOTED([JEMALLOC_ZONE_VERSION], [3])
> - ? AC_MSG_RESULT([3])])
> + ?AC_DEFUN([JE_ZONE_PROGRAM],
> + ? ?[AC_LANG_PROGRAM(
> + ? ? ?[#include <malloc/malloc.h>],
> + ? ? ?[static foo[[sizeof($1) $2 sizeof(void *) * $3 ? 1 : -1]]]
> + ? ?)])
> +
> + ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,14)],[JEMALLOC_ZONE_VERSION=3],[
> + ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,15)],[JEMALLOC_ZONE_VERSION=5],[
> + ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,16)],[
> + ? ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_introspection_t,==,9)],[JEMALLOC_ZONE_VERSION=6],[
> + ? ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_introspection_t,==,13)],[JEMALLOC_ZONE_VERSION=7],[JEMALLOC_ZONE_VERSION=]
> + ?)])],[
> + ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,==,17)],[JEMALLOC_ZONE_VERSION=8],[
> + ?AC_COMPILE_IFELSE([JE_ZONE_PROGRAM(malloc_zone_t,>,17)],[JEMALLOC_ZONE_VERSION=9],[JEMALLOC_ZONE_VERSION=]
> + ?)])])])])
> + ?if test "x${JEMALLOC_ZONE_VERSION}" = "x"; then
> + ? ?AC_MSG_RESULT([unsupported])
> + ? ?AC_MSG_ERROR([Unsupported malloc zone version])
> + ?fi
> + ?if test "${JEMALLOC_ZONE_VERSION}" = 9; then
> + ? ?JEMALLOC_ZONE_VERSION=8
> + ? ?AC_MSG_RESULT([> 8])
> + ?else
> + ? ?AC_MSG_RESULT([$JEMALLOC_ZONE_VERSION])
> + ?fi
> + ?AC_DEFINE_UNQUOTED(JEMALLOC_ZONE_VERSION, [$JEMALLOC_ZONE_VERSION])
> ?fi
>
> ?dnl ============================================================================
> diff --git a/src/jemalloc.c b/src/jemalloc.c
> index e2b6134..2610452 100644
> --- a/src/jemalloc.c
> +++ b/src/jemalloc.c
> @@ -747,15 +747,23 @@ malloc_init_hard(void)
> ? ? ? ?arenas[0] = init_arenas[0];
>
> ?#ifdef JEMALLOC_ZONE
> - ? ? ? /* Register the custom zone. */
> - ? ? ? malloc_zone_register(create_zone());
> + ? ? ? /* Register the custom zone. At this point it won't be the default. */
> + ? ? ? malloc_zone_t *jemalloc_zone = create_zone();
> + ? ? ? malloc_zone_register(jemalloc_zone);
>
> ? ? ? ?/*
> - ? ? ? ?* Convert the default szone to an "overlay zone" that is capable of
> - ? ? ? ?* deallocating szone-allocated objects, but allocating new objects
> - ? ? ? ?* from jemalloc.
> + ? ? ? ?* Unregister and reregister the default zone. On OSX >= 10.6,
> + ? ? ? ?* unregistering takes the last registered zone and places it at the
> + ? ? ? ?* location of the specified zone. Unregistering the default zone thus
> + ? ? ? ?* makes the last registered one the default. On OSX < 10.6,
> + ? ? ? ?* unregistering shifts all registered zones. The first registered zone
> + ? ? ? ?* then becomes the default.
> ? ? ? ? */
> - ? ? ? szone2ozone(malloc_default_zone());
> + ? ? ? do {
> + ? ? ? ? ? ? ? malloc_zone_t *default_zone = malloc_default_zone();
> + ? ? ? ? ? ? ? malloc_zone_unregister(default_zone);
> + ? ? ? ? ? ? ? malloc_zone_register(default_zone);
> + ? ? ? } while (malloc_default_zone() != jemalloc_zone);
> ?#endif
>
> ? ? ? ?malloc_initialized = true;
> diff --git a/src/zone.c b/src/zone.c
> index a0372e1..a8f09c9 100644
> --- a/src/zone.c
> +++ b/src/zone.c
> @@ -6,8 +6,8 @@
> ?/******************************************************************************/
> ?/* Data. */
>
> -static malloc_zone_t zone, szone;
> -static struct malloc_introspection_t zone_introspect, ozone_introspect;
> +static malloc_zone_t zone;
> +static struct malloc_introspection_t zone_introspect;
>
> ?/******************************************************************************/
> ?/* Function prototypes for non-inline static functions. */
> @@ -18,8 +18,10 @@ static void ?*zone_calloc(malloc_zone_t *zone, size_t num, size_t size);
> ?static void ? ?*zone_valloc(malloc_zone_t *zone, size_t size);
> ?static void ? ?zone_free(malloc_zone_t *zone, void *ptr);
> ?static void ? ?*zone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> +#if (JEMALLOC_ZONE_VERSION >= 5)
> ?static void ? ?*zone_memalign(malloc_zone_t *zone, size_t alignment,
> +#endif
> +#if (JEMALLOC_ZONE_VERSION >= 6)
> ? ? size_t size);
> ?static void ? ?zone_free_definite_size(malloc_zone_t *zone, void *ptr,
> ? ? size_t size);
> @@ -28,19 +30,6 @@ static void ?*zone_destroy(malloc_zone_t *zone);
> ?static size_t ?zone_good_size(malloc_zone_t *zone, size_t size);
> ?static void ? ?zone_force_lock(malloc_zone_t *zone);
> ?static void ? ?zone_force_unlock(malloc_zone_t *zone);
> -static size_t ?ozone_size(malloc_zone_t *zone, void *ptr);
> -static void ? ?ozone_free(malloc_zone_t *zone, void *ptr);
> -static void ? ?*ozone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
> -static unsigned ? ? ? ?ozone_batch_malloc(malloc_zone_t *zone, size_t size,
> - ? ?void **results, unsigned num_requested);
> -static void ? ?ozone_batch_free(malloc_zone_t *zone, void **to_be_freed,
> - ? ?unsigned num);
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> -static void ? ?ozone_free_definite_size(malloc_zone_t *zone, void *ptr,
> - ? ?size_t size);
> -#endif
> -static void ? ?ozone_force_lock(malloc_zone_t *zone);
> -static void ? ?ozone_force_unlock(malloc_zone_t *zone);
>
> ?/******************************************************************************/
> ?/*
> @@ -101,7 +90,7 @@ zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
> ? ? ? ?return (je_realloc(ptr, size));
> ?}
>
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> +#if (JEMALLOC_ZONE_VERSION >= 5)
> ?static void *
> ?zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
> ?{
> @@ -111,7 +100,9 @@ zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
>
> ? ? ? ?return (ret);
> ?}
> +#endif
>
> +#if (JEMALLOC_ZONE_VERSION >= 6)
> ?static void
> ?zone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
> ?{
> @@ -171,10 +162,15 @@ create_zone(void)
> ? ? ? ?zone.batch_free = NULL;
> ? ? ? ?zone.introspect = &zone_introspect;
> ? ? ? ?zone.version = JEMALLOC_ZONE_VERSION;
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> +#if (JEMALLOC_ZONE_VERSION >= 5)
> ? ? ? ?zone.memalign = zone_memalign;
> +#endif
> +#if (JEMALLOC_ZONE_VERSION >= 6)
> ? ? ? ?zone.free_definite_size = zone_free_definite_size;
> ?#endif
> +#if (JEMALLOC_ZONE_VERSION >= 8)
> + ? ? ? zone.pressure_relief = NULL;
> +#endif
>
> ? ? ? ?zone_introspect.enumerator = NULL;
> ? ? ? ?zone_introspect.good_size = (void *)zone_good_size;
> @@ -187,156 +183,15 @@ create_zone(void)
> ?#if (JEMALLOC_ZONE_VERSION >= 6)
> ? ? ? ?zone_introspect.zone_locked = NULL;
> ?#endif
> -
> - ? ? ? return (&zone);
> -}
> -
> -static size_t
> -ozone_size(malloc_zone_t *zone, void *ptr)
> -{
> - ? ? ? size_t ret;
> -
> - ? ? ? ret = ivsalloc(ptr);
> - ? ? ? if (ret == 0)
> - ? ? ? ? ? ? ? ret = szone.size(zone, ptr);
> -
> - ? ? ? return (ret);
> -}
> -
> -static void
> -ozone_free(malloc_zone_t *zone, void *ptr)
> -{
> -
> - ? ? ? if (ivsalloc(ptr) != 0)
> - ? ? ? ? ? ? ? je_free(ptr);
> - ? ? ? else {
> - ? ? ? ? ? ? ? size_t size = szone.size(zone, ptr);
> - ? ? ? ? ? ? ? if (size != 0)
> - ? ? ? ? ? ? ? ? ? ? ? (szone.free)(zone, ptr);
> - ? ? ? }
> -}
> -
> -static void *
> -ozone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
> -{
> - ? ? ? size_t oldsize;
> -
> - ? ? ? if (ptr == NULL)
> - ? ? ? ? ? ? ? return (je_malloc(size));
> -
> - ? ? ? oldsize = ivsalloc(ptr);
> - ? ? ? if (oldsize != 0)
> - ? ? ? ? ? ? ? return (je_realloc(ptr, size));
> - ? ? ? else {
> - ? ? ? ? ? ? ? oldsize = szone.size(zone, ptr);
> - ? ? ? ? ? ? ? if (oldsize == 0)
> - ? ? ? ? ? ? ? ? ? ? ? return (je_malloc(size));
> - ? ? ? ? ? ? ? else {
> - ? ? ? ? ? ? ? ? ? ? ? void *ret = je_malloc(size);
> - ? ? ? ? ? ? ? ? ? ? ? if (ret != NULL) {
> - ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? memcpy(ret, ptr, (oldsize < size) ? oldsize :
> - ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? size);
> - ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? (szone.free)(zone, ptr);
> - ? ? ? ? ? ? ? ? ? ? ? }
> - ? ? ? ? ? ? ? ? ? ? ? return (ret);
> - ? ? ? ? ? ? ? }
> - ? ? ? }
> -}
> -
> -static unsigned
> -ozone_batch_malloc(malloc_zone_t *zone, size_t size, void **results,
> - ? ?unsigned num_requested)
> -{
> -
> - ? ? ? /* Don't bother implementing this interface, since it isn't required. */
> - ? ? ? return (0);
> -}
> -
> -static void
> -ozone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned num)
> -{
> - ? ? ? unsigned i;
> -
> - ? ? ? for (i = 0; i < num; i++)
> - ? ? ? ? ? ? ? ozone_free(zone, to_be_freed[i]);
> -}
> -
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> -static void
> -ozone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
> -{
> -
> - ? ? ? if (ivsalloc(ptr) != 0) {
> - ? ? ? ? ? ? ? assert(ivsalloc(ptr) == size);
> - ? ? ? ? ? ? ? je_free(ptr);
> - ? ? ? } else {
> - ? ? ? ? ? ? ? assert(size == szone.size(zone, ptr));
> - ? ? ? ? ? ? ? szone.free_definite_size(zone, ptr, size);
> - ? ? ? }
> -}
> -#endif
> -
> -static void
> -ozone_force_lock(malloc_zone_t *zone)
> -{
> -
> - ? ? ? /* jemalloc locking is taken care of by the normal jemalloc zone. */
> - ? ? ? szone.introspect->force_lock(zone);
> -}
> -
> -static void
> -ozone_force_unlock(malloc_zone_t *zone)
> -{
> -
> - ? ? ? /* jemalloc locking is taken care of by the normal jemalloc zone. */
> - ? ? ? szone.introspect->force_unlock(zone);
> -}
> -
> -/*
> - * Overlay the default scalable zone (szone) such that existing allocations are
> - * drained, and further allocations come from jemalloc. ?This is necessary
> - * because Core Foundation directly accesses and uses the szone before the
> - * jemalloc library is even loaded.
> - */
> -void
> -szone2ozone(malloc_zone_t *zone)
> -{
> -
> - ? ? ? /*
> - ? ? ? ?* Stash a copy of the original szone so that we can call its
> - ? ? ? ?* functions as needed. ?Note that the internally, the szone stores its
> - ? ? ? ?* bookkeeping data structures immediately following the malloc_zone_t
> - ? ? ? ?* header, so when calling szone functions, we need to pass a pointer
> - ? ? ? ?* to the original zone structure.
> - ? ? ? ?*/
> - ? ? ? memcpy(&szone, zone, sizeof(malloc_zone_t));
> -
> - ? ? ? zone->size = (void *)ozone_size;
> - ? ? ? zone->malloc = (void *)zone_malloc;
> - ? ? ? zone->calloc = (void *)zone_calloc;
> - ? ? ? zone->valloc = (void *)zone_valloc;
> - ? ? ? zone->free = (void *)ozone_free;
> - ? ? ? zone->realloc = (void *)ozone_realloc;
> - ? ? ? zone->destroy = (void *)zone_destroy;
> - ? ? ? zone->zone_name = "jemalloc_ozone";
> - ? ? ? zone->batch_malloc = ozone_batch_malloc;
> - ? ? ? zone->batch_free = ozone_batch_free;
> - ? ? ? zone->introspect = &ozone_introspect;
> - ? ? ? zone->version = JEMALLOC_ZONE_VERSION;
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> - ? ? ? zone->memalign = zone_memalign;
> - ? ? ? zone->free_definite_size = ozone_free_definite_size;
> +#if (JEMALLOC_ZONE_VERSION >= 7)
> + ? ? ? zone_introspect.enable_discharge_checking = NULL;
> + ? ? ? zone_introspect.disable_discharge_checking = NULL;
> + ? ? ? zone_introspect.discharge = NULL;
> +#ifdef __BLOCKS__
> + ? ? ? zone_introspect.enumerate_discharged_pointers = NULL;
> +#else
> + ? ? ? zone_introspect.enumerate_unavailable_without_blocks = NULL;
> ?#endif
> -
> - ? ? ? ozone_introspect.enumerator = NULL;
> - ? ? ? ozone_introspect.good_size = (void *)zone_good_size;
> - ? ? ? ozone_introspect.check = NULL;
> - ? ? ? ozone_introspect.print = NULL;
> - ? ? ? ozone_introspect.log = NULL;
> - ? ? ? ozone_introspect.force_lock = (void *)ozone_force_lock;
> - ? ? ? ozone_introspect.force_unlock = (void *)ozone_force_unlock;
> - ? ? ? ozone_introspect.statistics = NULL;
> -#if (JEMALLOC_ZONE_VERSION >= 6)
> - ? ? ? ozone_introspect.zone_locked = NULL;
> ?#endif
> + ? ? ? return (&zone);
> ?}
> --
> 1.7.5.4
>
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss


From mh+jemalloc at glandium.org  Tue Mar 20 10:10:48 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 20 Mar 2012 18:10:48 +0100
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
	<CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
Message-ID: <20120320171048.GA32129@glandium.org>

On Tue, Mar 20, 2012 at 01:04:54PM -0400, Justin Lebar wrote:
> btw, I'm skeptical of the value of supporting OSX 10.5, because 10.5
> occasionally passes invalid pointers to ozone_size [1].
> 
> [1] https://bugzilla.mozilla.org/show_bug.cgi?id=694335

For one, not all jemalloc users are going to have the problem, which is
limited to some APIs.
Also, AIUI, the current jemalloc code does the right thing for the
ozone_size, which is not the case in the old jemalloc fork we use in
Firefox, so depending on what is done with the result of ozone_size,
it might be okay.

Mike


From mh+jemalloc at glandium.org  Tue Mar 20 10:15:09 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 20 Mar 2012 18:15:09 +0100
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
	<CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
Message-ID: <20120320171509.GA32396@glandium.org>

On Tue, Mar 20, 2012 at 01:04:54PM -0400, Justin Lebar wrote:
> btw, I'm skeptical of the value of supporting OSX 10.5, because 10.5
> occasionally passes invalid pointers to ozone_size [1].
> 
> [1] https://bugzilla.mozilla.org/show_bug.cgi?id=694335

BTW, I guess you wanted to point to
https://bugzilla.mozilla.org/show_bug.cgi?id=702250#c30

Mike


From justin.lebar at gmail.com  Tue Mar 20 10:18:13 2012
From: justin.lebar at gmail.com (Justin Lebar)
Date: Tue, 20 Mar 2012 13:18:13 -0400
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <20120320171048.GA32129@glandium.org>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
	<CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
	<20120320171048.GA32129@glandium.org>
Message-ID: <CAFWcpZ52eDJfNsLst1Zw9U8L06jeum_seTzdCoGqUm2A9apyiQ@mail.gmail.com>

On Tue, Mar 20, 2012 at 1:10 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> On Tue, Mar 20, 2012 at 01:04:54PM -0400, Justin Lebar wrote:
>> btw, I'm skeptical of the value of supporting OSX 10.5, because 10.5
>> occasionally passes invalid pointers to ozone_size [1].
>>
>> [1] https://bugzilla.mozilla.org/show_bug.cgi?id=694335
>
> For one, not all jemalloc users are going to have the problem, which is
> limited to some APIs.

True, but we of course don't know the full set of circumstances under
which OSX will pass an invalid pointer.

> Also, AIUI, the current jemalloc code does the right thing for the
> ozone_size, which is not the case in the old jemalloc fork we use in
> Firefox, so depending on what is done with the result of ozone_size,
> it might be okay.

What's the difference in behavior?

> BTW, I guess you wanted to point to
> https://bugzilla.mozilla.org/show_bug.cgi?id=702250#c30

Yes, thanks.  And my analysis there is that 10.5 tries to free the
internal pointer.  I'd be impressed if jemalloc handled this
correctly!  (And even more impressed if it worked in general, for
non-huge allocations too.  :)

Anyway, I'm not saying we should strip out all the 10.5 support in
jemalloc.  At least, not immediately.  :)


From mh+jemalloc at glandium.org  Tue Mar 20 10:19:13 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 20 Mar 2012 18:19:13 +0100
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <20120320171048.GA32129@glandium.org>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
	<CAFWcpZ656Z=VaTpKp2NLd=VYdxi1yEp=48WA+LGkwWtxd3AReQ@mail.gmail.com>
	<20120320171048.GA32129@glandium.org>
Message-ID: <20120320171913.GA32566@glandium.org>

On Tue, Mar 20, 2012 at 06:10:48PM +0100, Mike Hommey wrote:
> Also, AIUI, the current jemalloc code does the right thing for the
> ozone_size

In fact, it doesn't.

Mike


From jasone at canonware.com  Tue Mar 20 11:56:23 2012
From: jasone at canonware.com (Jason Evans)
Date: Tue, 20 Mar 2012 11:56:23 -0700
Subject: [PATCH 3/3] Improve zone support for OSX
In-Reply-To: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332262898-31839-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <D64AD622-29BB-4CF4-9963-9F16744099E5@canonware.com>

On Mar 20, 2012, at 10:01 AM, mh+jemalloc at glandium.org wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> I tested a build from 10.7 run on 10.7 and 10.6, and a build from 10.6
> run on 10.6.
> The AC_COMPILE_IFELSE limbo is to avoid running a program during
> configure, which presumably makes it work when cross compiling for iOS.
> 
> configure.ac   |   59 ++++++++----------
> src/jemalloc.c |   20 ++++--
> src/zone.c     |  191 +++++++-------------------------------------------------
> 3 files changed, 63 insertions(+), 207 deletions(-)

Applied; thanks!

I'm currently merging a TLS/TSD abstraction from a year-old FreeBSD porting attempt, so hopefully I'll have the malloc_vtprintf() compilation error fixed today or tomorrow.

Jason

From douglas at creagertino.net  Tue Mar 20 06:52:23 2012
From: douglas at creagertino.net (Douglas Creager)
Date: Tue, 20 Mar 2012 09:52:23 -0400
Subject: [PATCH] atomic operations for ppc
In-Reply-To: <CAJV_h0axXQ=8P=fa6QOSomGHGssOFabk--j+1FF3iPwkQUMULg@mail.gmail.com>
References: <2083960132.22183797.1331675550825.JavaMail.root@claudius.linpro.no>
	<5BC259BB-02BF-4CB2-A5D0-B09760772051@canonware.com>
	<CAJV_h0ajZZjpvmTvkkwWYnbJQPBnX63b5Yqa3foStM5yafXrVg@mail.gmail.com>
	<CAJV_h0axXQ=8P=fa6QOSomGHGssOFabk--j+1FF3iPwkQUMULg@mail.gmail.com>
Message-ID: <3D0CE4B6-1502-4B14-A30E-5E1038CD8DD3@creagertino.net>

> I've contacted both apr and boost respective developers and they have
> confirmed the code comes from apr.
> Now, considering that there are a limited number of ways to implement
> an atomic operation in assembler, the size of the code and the amount
> of almost identical implementations around (i.e [1], [2] or [3]) it'd
> be very difficult (if not impossible) to copyright the code.
> If you truly want to be on the safe side removing the comments and
> changing the variable names would be enough.
> Regards,

You could also draw the PPC atomics from the MIT-licensed OpenPA project [1].  It's structured differently (platform-specific LL and SC in separate static inline functions, with atomic-add implemented generically in terms of them), so any copyright on the APR code wouldn't apply.

[1] http://trac.mcs.anl.gov/projects/openpa/

?doug


From mh+jemalloc at glandium.org  Thu Mar 22 11:03:02 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 22 Mar 2012 19:03:02 +0100
Subject: Jemalloc stats
Message-ID: <20120322180302.GA1229@glandium.org>

Hi,

In Firefox, we're tracking some of the stats provided by our fork of
jemalloc. One of them is:
- HeapCommitted - Memory mapped by the heap allocator that is committed,
  i.e. in physical memory or paged to disk.  When heap-committed is
  larger than heap-allocated, the difference between the two values is
  likely due to external fragmentation; that is, the allocator allocated
  a large block of memory and is unable to decommit it because a small
  part of that block is currently in use.

It would seem like this could match stats.active, but i'm not entirely
sure it is the case. In particular, we don't count madvised pages in
that metric, but it would seem stats.active does, although I haven't dug
deep enough yet.

Mike


From jasone at canonware.com  Thu Mar 22 11:22:03 2012
From: jasone at canonware.com (Jason Evans)
Date: Thu, 22 Mar 2012 11:22:03 -0700
Subject: Jemalloc stats
In-Reply-To: <20120322180302.GA1229@glandium.org>
References: <20120322180302.GA1229@glandium.org>
Message-ID: <7272EAB5-55EC-424F-8E3B-597B459856F2@canonware.com>

On Mar 22, 2012, at 11:03 AM, Mike Hommey wrote:
> In Firefox, we're tracking some of the stats provided by our fork of
> jemalloc. One of them is:
> - HeapCommitted - Memory mapped by the heap allocator that is committed,
>  i.e. in physical memory or paged to disk.  When heap-committed is
>  larger than heap-allocated, the difference between the two values is
>  likely due to external fragmentation; that is, the allocator allocated
>  a large block of memory and is unable to decommit it because a small
>  part of that block is currently in use.
> 
> It would seem like this could match stats.active, but i'm not entirely
> sure it is the case. In particular, we don't count madvised pages in
> that metric, but it would seem stats.active does, although I haven't dug
> deep enough yet.

stats.active tracks all pages with active application allocations in them.  It does not include dirty unused pages for which madvise() has not yet been called, nor does it include pages that are entirely devoted to allocator metadata.  stats.allocated/stats.active is a precise indicator for external fragmentation, but since stats.active does not incorporate allocator metadata (e.g., chunk header pages), it does not represent the complete size of "committed" memory.  It would be possible to track the metadata pages with little extra effort, but I haven't found it to be very important in understanding what's going on internally, so I haven't added it.  Is the distinction important for Firefox?

Thanks,
Jason

From vijay2win at gmail.com  Fri Mar 23 16:21:38 2012
From: vijay2win at gmail.com (Vijay)
Date: Fri, 23 Mar 2012 16:21:38 -0700
Subject: Question regarding jemalloc and JVM
Message-ID: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>

Hi,

Is there any reason i should not be using LD_PRELOAD to force JVM use
jemalloc instead of native gcc malloc?
Background: This is for Apache-Cassandra we do off-heap cache where we
explicitly call malloc and free and by using jemalloc we see a fair amount
of space savings and was wondering if there is anything which we have to
consider before using it.

Regards,
</VJ>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20120323/648b8507/attachment.html>

From jasone at canonware.com  Sat Mar 24 11:46:58 2012
From: jasone at canonware.com (Jason Evans)
Date: Sat, 24 Mar 2012 11:46:58 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
Message-ID: <3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>

On Mar 23, 2012, at 4:21 PM, Vijay wrote:
> Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
> Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.

LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.

Jason



From vijay2win at gmail.com  Sat Mar 24 16:09:01 2012
From: vijay2win at gmail.com (vijay2win at gmail.com)
Date: Sat, 24 Mar 2012 16:09:01 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
Message-ID: <D0CF5D71-E53D-4B31-AB86-EF70AA50A9C1@gmail.com>

Thanks Jason,

Regards
VJ
On Mar 24, 2012, at 11:46 AM, Jason Evans wrote:

> On Mar 23, 2012, at 4:21 PM, Vijay wrote:
>> Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
>> Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.
> 
> LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.
> 
> Jason
> 



From jasone at canonware.com  Sat Mar 24 21:00:17 2012
From: jasone at canonware.com (Jason Evans)
Date: Sat, 24 Mar 2012 21:00:17 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
Message-ID: <D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>

On Mar 24, 2012, at 11:46 AM, Jason Evans wrote:
> On Mar 23, 2012, at 4:21 PM, Vijay wrote:
>> Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
>> Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.
> 
> LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.

I was just looking through some of my notes and noticed an issue that may be relevant here.  jemalloc has a configure option called lazy-lock that has apparently caused problems in some Java use cases.  Java was using dlopen() to load a library that was dynamically linked with jemalloc, so jemalloc came along too late to intercept pthread_create() calls and turn on locking.  I don't think your use case will hit the same issue, but beware of dlopen() anywhere in the mix.

Jason

From vijay2win at gmail.com  Sun Mar 25 00:21:01 2012
From: vijay2win at gmail.com (vijay2win at gmail.com)
Date: Sun, 25 Mar 2012 00:21:01 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
Message-ID: <E896A488-6939-4214-A672-2921579C6052@gmail.com>

Thanks Jason, 
I had one crash in the with in JVM version 1.6 and it crashed with following... So far with JVM 1.7 the test looks good still waiting for a way to crash it (I did verify that it uses JEMalloc).

# Problematic frame:
# C  [libjemalloc.so+0xb79a]
#
# If you would like to submit a bug report, please include
# instructions how to reproduce the bug and visit:
#   http://icedtea.classpath.org/bugzilla
#

---------------  T H R E A D  ---------------

Current thread (0x00002aac4ede7000):  JavaThread "Selector-Thread-3" [_thread_new, id=1555, stack(0x0000000000000000,0x0000000000000000)]

siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x00002ab252cd9368

Registers:
RAX=0x00000000c217906f, RBX=0x00002aac42110000, RCX=0x0000000000000002, RDX=0x0000000000000000
RSP=0x0000000042aa3eb0, RBP=0x0000000000000020, RSI=0x00002aac42110040, RDI=0x0000000000000006
R8 =0x00002aaaab0009c0, R9 =0x0000000000000003, R10=0x00002aac42110ff0, R11=0x00000000c217906f
R12=0xffffffffffffffe8, R13=0x0000000042aa3f80, R14=0x0000000000000020, R15=0x0000000000000000
RIP=0x00002aaaaaab879a, EFL=0x0000000000010283, CSGSFS=0x000000000000e033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x0000000042aa3eb0)
0x0000000042aa3eb0:   0000000000000000 0000000000000020
0x0000000042aa3ec0:   0000000042aa3fe0 0000000042aa3ff0
0x0000000042aa3ed0:   0000000042aa3f80 0000000000000020
0x0000000042aa3ee0:   0000000000000000 00002aaaaaab2740
0x0000000042aa3ef0:   0000000042aa4940 0000003a0cc08373
0x0000000042aa3f00:   0000000000000000 0000000000000000
0x0000000042aa3f10:   0000000000000000 0000000000000000
0x0000000042aa3f20:   0000000000000000 0000000000000000
0x0000000042aa3f30:   00002aad67d6c728 0000000000000000
0x0000000042aa3f40:   0000003a0cc0a0e7 0000000042aa3ff8
0x0000000042aa3f50:   0000000042aa3fe0 0000000042aa3ff0
0x0000000042aa3f60:   0000000042aa3f80 00002aac4ede7000
0x0000000042aa3f70:   0000000000000000 00002aaaabdaa354
0x0000000042aa3f80:   0000000000000000 0000000000000009
0x0000000042aa3f90:   0000000000000000 0000000042aa5000
0x0000000042aa3fa0:   0000000000021000 00002aaaac432600
0x0000000042aa3fb0:   00002aaaabb68da0 0000000000000007
0x0000000042aa3fc0:   0000000042aa3ff0 00002aac4ede7000
0x0000000042aa3fd0:   00002aac4ee12400 00002aac4ee06400
0x0000000042aa3fe0:   0000000042aa4000 00002aaaabdaa415
0x0000000042aa3ff0:   0000000042aa4020 00002aaaabea046e
0x0000000042aa4000:   0000000042aa4020 00002aaaabe967b1
0x0000000042aa4010:   00002aac4ee12400 00002aac4ede7000
0x0000000042aa4020:   0000000042aa4040 00002aaaabe9cb14
0x0000000042aa4030:   00002aac4ede7000 0000000000000000
0x0000000042aa4040:   0000000042aa4110 00002aaaabda8ed4
0x0000000042aa4050:   0000000000000000 0000000000000000
0x0000000042aa4060:   0000000000000000 0000000000000000
0x0000000042aa4070:   0000000000000000 0000000000000000
0x0000000042aa4080:   0000000000000000 0000000000000000
0x0000000042aa4090:   0000000000000000 0000000000000000
0x0000000042aa40a0:   0000000000000000 0000000000000000

Instructions: (pc=0x00002aaaaaab879a)
0x00002aaaaaab878a:   06 89 46 08 7d 02 89 06 44 8b 5e 08 4c 8b 56 10
0x00002aaaaaab879a:   4f 8b 34 da 4d 85 f6 0f 84 71 02 00 00 45 84 ff

Stack: [0x0000000000000000,0x0000000000000000],  sp=0x0000000042aa3eb0,  free space=1092239k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjemalloc.so+0xb79a]

[error occurred during error reporting (printing native stack), id 0xb]


On Mar 24, 2012, at 9:00 PM, Jason Evans wrote:

> On Mar 24, 2012, at 11:46 AM, Jason Evans wrote:
>> On Mar 23, 2012, at 4:21 PM, Vijay wrote:
>>> Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
>>> Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.
>> 
>> LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.
> 
> I was just looking through some of my notes and noticed an issue that may be relevant here.  jemalloc has a configure option called lazy-lock that has apparently caused problems in some Java use cases.  Java was using dlopen() to load a library that was dynamically linked with jemalloc, so jemalloc came along too late to intercept pthread_create() calls and turn on locking.  I don't think your use case will hit the same issue, but beware of dlopen() anywhere in the mix.
> 
> Jason



From ingvar at redpill-linpro.com  Mon Mar 26 00:44:58 2012
From: ingvar at redpill-linpro.com (Ingvar Hagelund)
Date: Mon, 26 Mar 2012 09:44:58 +0200
Subject: make check fails on rhel5/ppc
Message-ID: <1332747898.15499.9.camel@yum.linpro.no>

With the proposed atomic operations for ppc patch, I can finally build
jemalloc-2.2.5 on rhel5/ppc. make check fails like this for all but the
bitmap test.

Too many small size classes (269 > max 256)

More details below.

Is this just missing tuning? Where are the knobs to turn?

Ingvar


$ make check
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/allocated.o
test/allocated.c
gcc -o test/allocated test/allocated.o -Wl,-rpath,lib -Llib -ljemalloc
-lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/allocm.o test/allocm.c
gcc -o test/allocm test/allocm.o -Wl,-rpath,lib -Llib -ljemalloc
-lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/bitmap.o test/bitmap.c
gcc -o test/bitmap test/bitmap.o -Wl,-rpath,lib -Llib -ljemalloc
-lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/mremap.o test/mremap.c
gcc -o test/mremap test/mremap.o -Wl,-rpath,lib -Llib -ljemalloc
-lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/posix_memalign.o
test/posix_memalign.c
gcc -o test/posix_memalign test/posix_memalign.o -Wl,-rpath,lib -Llib
-ljemalloc -lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/rallocm.o test/rallocm.c
gcc -o test/rallocm test/rallocm.o -Wl,-rpath,lib -Llib -ljemalloc
-lpthread
gcc -O2 -g -m32 -fsigned-char -fvisibility=hidden -c -D_GNU_SOURCE
-D_REENTRANT -Iinclude -Iinclude -Itest -o test/thread_arena.o
test/thread_arena.c
gcc -o test/thread_arena test/thread_arena.o -Wl,-rpath,lib -Llib
-ljemalloc -lpthread
=========================================
test/allocated ... /bin/sh: line 3:  8020 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
test/allocm ... /bin/sh: line 3:  8027 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
test/bitmap ... pass
test/mremap ... /bin/sh: line 3:  8039 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
test/posix_memalign ... /bin/sh: line 3:  8046 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
test/rallocm ... /bin/sh: line 3:  8053 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
test/thread_arena ... /bin/sh: line 3:  8060 Avbrutt (SIGABRT)
${t} /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ /home/ingvar/rpmbuild/BUILD/jemalloc-2.2.5/ > ${t}.out 2>&1
*** FAIL ***
=========================================
Failures: 6/7



$ for i in test/*out; do echo; echo $i; cat $i; done

test/allocated.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)

test/allocm.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)

test/bitmap.out
Test begin
Test end

test/mremap.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)

test/posix_memalign.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)

test/rallocm.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)

test/thread_arena.out
Test begin
<jemalloc>: Too many small size classes (269 > max 256)




From mh+jemalloc at glandium.org  Mon Mar 26 08:03:41 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 26 Mar 2012 17:03:41 +0200
Subject: [PATCH] Use __sync_add_and_fetch and __sync_sub_and_fetch when they
	are available
In-Reply-To: <20120319162514.GA6946@glandium.org>
References: <20120319162514.GA6946@glandium.org>
Message-ID: <1332774221-20788-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

These functions may be available as inlines or as libgcc functions. In the
former case, a __GCC_HAVE_SYNC_COMPARE_AND_SWAP_n macro is defined. But we
still want to use these functions in the latter case, when we don't have
our own implementation.
---
 configure.ac                        |   34 ++++++++++++++++++++++++++++++++++
 include/jemalloc/internal/atomic.h  |   18 +++++++++++++++---
 include/jemalloc/jemalloc_defs.h.in |   16 ++++++++++++++++
 3 files changed, 65 insertions(+), 3 deletions(-)

diff --git a/configure.ac b/configure.ac
index 478ae9d..5999a33 100644
--- a/configure.ac
+++ b/configure.ac
@@ -887,6 +887,40 @@ if test "x${je_cv_osatomic}" = "xyes" ; then
 fi
 
 dnl ============================================================================
+dnl Check whether __sync_{add,sub}_and_fetch() are available despite
+dnl __GCC_HAVE_SYNC_COMPARE_AND_SWAP_n macros being undefined.
+
+AC_DEFUN([JE_SYNC_COMPARE_AND_SWAP_CHECK],[
+  AC_CACHE_CHECK([whether to force $1-bit __sync_{add,sub}_and_fetch()],
+               [je_cv_sync_compare_and_swap_$2],
+               [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
+                                                    #include <stdint.h>
+                                                   ],
+                                                   [
+                                                    #ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2
+                                                    {
+                                                       uint$1_t x$1 = 0;
+                                                       __sync_add_and_fetch(&x$1, 42);
+                                                       __sync_sub_and_fetch(&x$1, 1);
+                                                    }
+                                                    #else
+                                                    #error __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2 is defined, no need to force
+                                                    #endif
+                                                   ])],
+                               [je_cv_sync_compare_and_swap_$2=yes],
+                               [je_cv_sync_compare_and_swap_$2=no])])
+
+  if test "x${je_cv_sync_compare_and_swap_$2}" = "xyes" ; then
+    AC_DEFINE([JE_FORCE_SYNC_COMPARE_AND_SWAP_$2], [ ])
+  fi
+])
+
+if test "x${je_cv_osatomic}" != "xyes" ; then
+  JE_SYNC_COMPARE_AND_SWAP_CHECK(32, 4)
+  JE_SYNC_COMPARE_AND_SWAP_CHECK(64, 8)
+fi
+
+dnl ============================================================================
 dnl Check for spinlock(3) operations as provided on Darwin.
 
 JE_COMPILABLE([Darwin OSSpin*()], [
diff --git a/include/jemalloc/internal/atomic.h b/include/jemalloc/internal/atomic.h
index 7a9cb61..d8f6ca5 100644
--- a/include/jemalloc/internal/atomic.h
+++ b/include/jemalloc/internal/atomic.h
@@ -87,6 +87,20 @@ atomic_sub_uint64(uint64_t *p, uint64_t x)
 
 	return (x);
 }
+#elif (defined(JE_FORCE_SYNC_COMPARE_AND_SWAP_8))
+JEMALLOC_INLINE uint64_t
+atomic_add_uint64(uint64_t *p, uint64_t x)
+{
+
+	return (__sync_add_and_fetch(p, x));
+}
+
+JEMALLOC_INLINE uint64_t
+atomic_sub_uint64(uint64_t *p, uint64_t x)
+{
+
+	return (__sync_sub_and_fetch(p, x));
+}
 #else
 #  if (LG_SIZEOF_PTR == 3)
 #    error "Missing implementation for 64-bit atomic operations"
@@ -150,9 +164,7 @@ atomic_sub_uint32(uint32_t *p, uint32_t x)
 
 	return (x);
 }
-#elif (defined __SH4__ || defined __mips__) && (__GNUC__ > 4 ||		\
-    (__GNUC__ == 4 && (__GNUC_MINOR__ > 1 || (__GNUC_MINOR__ == 1 &&	\
-    __GNUC_PATCHLEVEL__ > 1))))
+#elif (defined(JE_FORCE_SYNC_COMPARE_AND_SWAP_4))
 JEMALLOC_INLINE uint32_t
 atomic_add_uint32(uint32_t *p, uint32_t x)
 {
diff --git a/include/jemalloc/jemalloc_defs.h.in b/include/jemalloc/jemalloc_defs.h.in
index f150413..e4bfa04 100644
--- a/include/jemalloc/jemalloc_defs.h.in
+++ b/include/jemalloc/jemalloc_defs.h.in
@@ -54,6 +54,22 @@
 #undef JEMALLOC_OSATOMIC
 
 /*
+ * Defined if __sync_add_and_fetch(uint32_t *, uint32_t) and
+ * __sync_sub_and_fetch(uint32_t *, uint32_t) are available, despite
+ * __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 not being defined (which means the
+ * functions are defined in libgcc instead of being inlines)
+ */
+#undef JE_FORCE_SYNC_COMPARE_AND_SWAP_4
+
+/*
+ * Defined if __sync_add_and_fetch(uint64_t *, uint64_t) and
+ * __sync_sub_and_fetch(uint64_t *, uint64_t) are available, despite
+ * __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 not being defined (which means the
+ * functions are defined in libgcc instead of being inlines)
+ */
+#undef JE_FORCE_SYNC_COMPARE_AND_SWAP_8
+
+/*
  * Defined if OSSpin*() functions are available, as provided by Darwin, and
  * documented in the spinlock(3) manual page.
  */
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Mon Mar 26 08:46:57 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 26 Mar 2012 17:46:57 +0200
Subject: [PATCH] Fix glibc hooks when using both --with-jemalloc-prefix and
	--with-mangling
In-Reply-To: <20120320065331.GA23326@glandium.org>
References: <20120320065331.GA23326@glandium.org>
Message-ID: <1332776817-9886-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 src/jemalloc.c |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/src/jemalloc.c b/src/jemalloc.c
index 3e168fd..54c8334 100644
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -1181,7 +1181,15 @@ je_valloc(size_t size)
 }
 #endif
 
-#if (!defined(JEMALLOC_PREFIX) && defined(__GLIBC__) && !defined(__UCLIBC__))
+/*
+ * is_malloc(je_malloc) is some macro magic to detect if jemalloc_defs.h has
+ * #define je_malloc malloc
+ */
+#define malloc_is_malloc 1
+#define is_malloc_(a) malloc_is_ ## a
+#define is_malloc(a) is_malloc_(a)
+
+#if ((is_malloc(je_malloc) == 1) && defined(__GLIBC__) && !defined(__UCLIBC__))
 /*
  * glibc provides the RTLD_DEEPBIND flag for dlopen which can make it possible
  * to inconsistently reference libc's malloc(3)-compatible functions
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Mon Mar 26 09:39:35 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 26 Mar 2012 18:39:35 +0200
Subject: [PATCH] Make zone_{free, realloc,
	free_definite_size} fallback to the system allocator if they are
	called with a pointer that jemalloc didn't allocate
Message-ID: <1332779975-11443-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

It turns out some OSX system libraries (like CoreGraphics on 10.6) like
to call malloc_zone_* functions, but giving them pointers that weren't
allocated with the zone they are using.

Possibly, they do malloc_zone_malloc(malloc_default_zone()) before we
register the jemalloc zone, and malloc_zone_realloc(malloc_default_zone())
after. malloc_default_zone() returning a different value in both cases.
---
 src/zone.c |   18 ++++++++++++++----
 1 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/zone.c b/src/zone.c
index a8f09c9..23f22fa 100644
--- a/src/zone.c
+++ b/src/zone.c
@@ -79,15 +79,21 @@ zone_valloc(malloc_zone_t *zone, size_t size)
 static void
 zone_free(malloc_zone_t *zone, void *ptr)
 {
+	if (ivsalloc(ptr) != 0) {
+		je_free(ptr);
+		return;
+	}
 
-	je_free(ptr);
+	free(ptr);
 }
 
 static void *
 zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
 {
+	if (ivsalloc(ptr) != 0)
+		return (je_realloc(ptr, size));
 
-	return (je_realloc(ptr, size));
+	return (realloc(ptr, size));
 }
 
 #if (JEMALLOC_ZONE_VERSION >= 5)
@@ -106,9 +112,13 @@ zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
 static void
 zone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
 {
+	if (ivsalloc(ptr) != 0) {
+		assert(ivsalloc(ptr) == size);
+		je_free(ptr);
+		return;
+	}
 
-	assert(ivsalloc(ptr) == size);
-	je_free(ptr);
+	free(ptr);
 }
 #endif
 
-- 
1.7.9.1



From vparthasarathy at netflix.com  Mon Mar 26 09:51:54 2012
From: vparthasarathy at netflix.com (Vijay Parthasarathy)
Date: Mon, 26 Mar 2012 16:51:54 +0000
Subject: Question regarding jemalloc and JVM
In-Reply-To: <E896A488-6939-4214-A672-2921579C6052@gmail.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
Message-ID: <2EE439F4-6608-440B-9806-9701FA595283@netflix.com>

Hi Jason,

looks like it is problematic to use LD_PRELOAD i had various crashes. I understand it is too much to ask, any configuration to look out for?
I think most probably i will use JNI to load jemalloc (LD_LIBRARY_PATH), looks like that works fine so far.

grep -A2 Problematic *
hs_err_pid1309.log:# Problematic frame:
hs_err_pid1309.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid1309.log-#
--
hs_err_pid1622.log:# Problematic frame:
hs_err_pid1622.log-# C  [libjemalloc.so+0x57f4]  free+0x54
hs_err_pid1622.log-#
--
hs_err_pid16902.log:# Problematic frame:
hs_err_pid16902.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid16902.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid16902.log:# Problematic frame:
hs_err_pid16902.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid16902.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid2813.log:# Problematic frame:
hs_err_pid2813.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid2813.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid2813.log:# Problematic frame:
hs_err_pid2813.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid2813.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid29892.log:# Problematic frame:
hs_err_pid29892.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid29892.log-#
--
hs_err_pid30273.log:# Problematic frame:
hs_err_pid30273.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid30273.log-#
--
hs_err_pid30645.log:# Problematic frame:
hs_err_pid30645.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid30645.log-#
--
hs_err_pid4037.log:# Problematic frame:
hs_err_pid4037.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid4037.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid7733.log:# Problematic frame:
hs_err_pid7733.log-# C  [libc.so.6+0x618a2]
hs_err_pid7733.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid7733.log:# Problematic frame:
hs_err_pid7733.log-# C  [libc.so.6+0x618a2]
hs_err_pid7733.log-[error occurred during error reporting (printing problematic frame), id 0xb]
[vijay_tcasstest at vijay_tcass-i-a91ee8cd crash]$


On Mar 25, 2012, at 12:21 AM, VIJAY2WIN at gmail.com<mailto:VIJAY2WIN at gmail.com> wrote:

Thanks Jason,
I had one crash in the with in JVM version 1.6 and it crashed with following... So far with JVM 1.7 the test looks good still waiting for a way to crash it (I did verify that it uses JEMalloc).

# Problematic frame:
# C  [libjemalloc.so+0xb79a]
#
# If you would like to submit a bug report, please include
# instructions how to reproduce the bug and visit:
#   http://icedtea.classpath.org/bugzilla
#

---------------  T H R E A D  ---------------

Current thread (0x00002aac4ede7000):  JavaThread "Selector-Thread-3" [_thread_new, id=1555, stack(0x0000000000000000,0x0000000000000000)]

siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x00002ab252cd9368

Registers:
RAX=0x00000000c217906f, RBX=0x00002aac42110000, RCX=0x0000000000000002, RDX=0x0000000000000000
RSP=0x0000000042aa3eb0, RBP=0x0000000000000020, RSI=0x00002aac42110040, RDI=0x0000000000000006
R8 =0x00002aaaab0009c0, R9 =0x0000000000000003, R10=0x00002aac42110ff0, R11=0x00000000c217906f
R12=0xffffffffffffffe8, R13=0x0000000042aa3f80, R14=0x0000000000000020, R15=0x0000000000000000
RIP=0x00002aaaaaab879a, EFL=0x0000000000010283, CSGSFS=0x000000000000e033, ERR=0x0000000000000004
 TRAPNO=0x000000000000000e

Top of Stack: (sp=0x0000000042aa3eb0)
0x0000000042aa3eb0:   0000000000000000 0000000000000020
0x0000000042aa3ec0:   0000000042aa3fe0 0000000042aa3ff0
0x0000000042aa3ed0:   0000000042aa3f80 0000000000000020
0x0000000042aa3ee0:   0000000000000000 00002aaaaaab2740
0x0000000042aa3ef0:   0000000042aa4940 0000003a0cc08373
0x0000000042aa3f00:   0000000000000000 0000000000000000
0x0000000042aa3f10:   0000000000000000 0000000000000000
0x0000000042aa3f20:   0000000000000000 0000000000000000
0x0000000042aa3f30:   00002aad67d6c728 0000000000000000
0x0000000042aa3f40:   0000003a0cc0a0e7 0000000042aa3ff8
0x0000000042aa3f50:   0000000042aa3fe0 0000000042aa3ff0
0x0000000042aa3f60:   0000000042aa3f80 00002aac4ede7000
0x0000000042aa3f70:   0000000000000000 00002aaaabdaa354
0x0000000042aa3f80:   0000000000000000 0000000000000009
0x0000000042aa3f90:   0000000000000000 0000000042aa5000
0x0000000042aa3fa0:   0000000000021000 00002aaaac432600
0x0000000042aa3fb0:   00002aaaabb68da0 0000000000000007
0x0000000042aa3fc0:   0000000042aa3ff0 00002aac4ede7000
0x0000000042aa3fd0:   00002aac4ee12400 00002aac4ee06400
0x0000000042aa3fe0:   0000000042aa4000 00002aaaabdaa415
0x0000000042aa3ff0:   0000000042aa4020 00002aaaabea046e
0x0000000042aa4000:   0000000042aa4020 00002aaaabe967b1
0x0000000042aa4010:   00002aac4ee12400 00002aac4ede7000
0x0000000042aa4020:   0000000042aa4040 00002aaaabe9cb14
0x0000000042aa4030:   00002aac4ede7000 0000000000000000
0x0000000042aa4040:   0000000042aa4110 00002aaaabda8ed4
0x0000000042aa4050:   0000000000000000 0000000000000000
0x0000000042aa4060:   0000000000000000 0000000000000000
0x0000000042aa4070:   0000000000000000 0000000000000000
0x0000000042aa4080:   0000000000000000 0000000000000000
0x0000000042aa4090:   0000000000000000 0000000000000000
0x0000000042aa40a0:   0000000000000000 0000000000000000

Instructions: (pc=0x00002aaaaaab879a)
0x00002aaaaaab878a:   06 89 46 08 7d 02 89 06 44 8b 5e 08 4c 8b 56 10
0x00002aaaaaab879a:   4f 8b 34 da 4d 85 f6 0f 84 71 02 00 00 45 84 ff

Stack: [0x0000000000000000,0x0000000000000000],  sp=0x0000000042aa3eb0,  free space=1092239k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjemalloc.so+0xb79a]

[error occurred during error reporting (printing native stack), id 0xb]


On Mar 24, 2012, at 9:00 PM, Jason Evans wrote:

On Mar 24, 2012, at 11:46 AM, Jason Evans wrote:
On Mar 23, 2012, at 4:21 PM, Vijay wrote:
Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.

LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.

I was just looking through some of my notes and noticed an issue that may be relevant here.  jemalloc has a configure option called lazy-lock that has apparently caused problems in some Java use cases.  Java was using dlopen() to load a library that was dynamically linked with jemalloc, so jemalloc came along too late to intercept pthread_create() calls and turn on locking.  I don't think your use case will hit the same issue, but beware of dlopen() anywhere in the mix.

Jason


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20120326/d0450b79/attachment.html>

From vijay2win at gmail.com  Mon Mar 26 09:57:43 2012
From: vijay2win at gmail.com (vijay2win at gmail.com)
Date: Mon, 26 Mar 2012 09:57:43 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <E896A488-6939-4214-A672-2921579C6052@gmail.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
Message-ID: <A5F916B0-CC34-4C57-BCBE-125A7148328D@gmail.com>

Hi Jason, 

looks like it is problematic to use LD_PRELOAD i had various crashes. I understand it is too much to ask, any configuration to look out for? 
I think most probably i will use JNI to load jemalloc (LD_LIBRARY_PATH), looks like that works fine so far.

grep -A2 Problematic *
hs_err_pid1309.log:# Problematic frame:
hs_err_pid1309.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid1309.log-#
--
hs_err_pid1622.log:# Problematic frame:
hs_err_pid1622.log-# C  [libjemalloc.so+0x57f4]  free+0x54
hs_err_pid1622.log-#
--
hs_err_pid16902.log:# Problematic frame:
hs_err_pid16902.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid16902.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid16902.log:# Problematic frame:
hs_err_pid16902.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid16902.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid2813.log:# Problematic frame:
hs_err_pid2813.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid2813.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid2813.log:# Problematic frame:
hs_err_pid2813.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid2813.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid29892.log:# Problematic frame:
hs_err_pid29892.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid29892.log-#
--
hs_err_pid30273.log:# Problematic frame:
hs_err_pid30273.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid30273.log-#
--
hs_err_pid30645.log:# Problematic frame:
hs_err_pid30645.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid30645.log-#
--
hs_err_pid4037.log:# Problematic frame:
hs_err_pid4037.log-# C  [libjemalloc.so+0xb79a]
hs_err_pid4037.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid7733.log:# Problematic frame:
hs_err_pid7733.log-# C  [libc.so.6+0x618a2]
hs_err_pid7733.log-[error occurred during error reporting (printing problematic frame), id 0xb]
--
hs_err_pid7733.log:# Problematic frame:
hs_err_pid7733.log-# C  [libc.so.6+0x618a2]
hs_err_pid7733.log-[error occurred during error reporting (printing problematic frame), id 0xb]
[vijay_tcasstest at vijay_tcass-i-a91ee8cd crash]$ 

On Mar 25, 2012, at 12:21 AM, VIJAY2WIN at gmail.com wrote:

> Thanks Jason, 
> I had one crash in the with in JVM version 1.6 and it crashed with following... So far with JVM 1.7 the test looks good still waiting for a way to crash it (I did verify that it uses JEMalloc).
> 
> # Problematic frame:
> # C  [libjemalloc.so+0xb79a]
> #
> # If you would like to submit a bug report, please include
> # instructions how to reproduce the bug and visit:
> #   http://icedtea.classpath.org/bugzilla
> #
> 
> ---------------  T H R E A D  ---------------
> 
> Current thread (0x00002aac4ede7000):  JavaThread "Selector-Thread-3" [_thread_new, id=1555, stack(0x0000000000000000,0x0000000000000000)]
> 
> siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x00002ab252cd9368
> 
> Registers:
> RAX=0x00000000c217906f, RBX=0x00002aac42110000, RCX=0x0000000000000002, RDX=0x0000000000000000
> RSP=0x0000000042aa3eb0, RBP=0x0000000000000020, RSI=0x00002aac42110040, RDI=0x0000000000000006
> R8 =0x00002aaaab0009c0, R9 =0x0000000000000003, R10=0x00002aac42110ff0, R11=0x00000000c217906f
> R12=0xffffffffffffffe8, R13=0x0000000042aa3f80, R14=0x0000000000000020, R15=0x0000000000000000
> RIP=0x00002aaaaaab879a, EFL=0x0000000000010283, CSGSFS=0x000000000000e033, ERR=0x0000000000000004
>  TRAPNO=0x000000000000000e
> 
> Top of Stack: (sp=0x0000000042aa3eb0)
> 0x0000000042aa3eb0:   0000000000000000 0000000000000020
> 0x0000000042aa3ec0:   0000000042aa3fe0 0000000042aa3ff0
> 0x0000000042aa3ed0:   0000000042aa3f80 0000000000000020
> 0x0000000042aa3ee0:   0000000000000000 00002aaaaaab2740
> 0x0000000042aa3ef0:   0000000042aa4940 0000003a0cc08373
> 0x0000000042aa3f00:   0000000000000000 0000000000000000
> 0x0000000042aa3f10:   0000000000000000 0000000000000000
> 0x0000000042aa3f20:   0000000000000000 0000000000000000
> 0x0000000042aa3f30:   00002aad67d6c728 0000000000000000
> 0x0000000042aa3f40:   0000003a0cc0a0e7 0000000042aa3ff8
> 0x0000000042aa3f50:   0000000042aa3fe0 0000000042aa3ff0
> 0x0000000042aa3f60:   0000000042aa3f80 00002aac4ede7000
> 0x0000000042aa3f70:   0000000000000000 00002aaaabdaa354
> 0x0000000042aa3f80:   0000000000000000 0000000000000009
> 0x0000000042aa3f90:   0000000000000000 0000000042aa5000
> 0x0000000042aa3fa0:   0000000000021000 00002aaaac432600
> 0x0000000042aa3fb0:   00002aaaabb68da0 0000000000000007
> 0x0000000042aa3fc0:   0000000042aa3ff0 00002aac4ede7000
> 0x0000000042aa3fd0:   00002aac4ee12400 00002aac4ee06400
> 0x0000000042aa3fe0:   0000000042aa4000 00002aaaabdaa415
> 0x0000000042aa3ff0:   0000000042aa4020 00002aaaabea046e
> 0x0000000042aa4000:   0000000042aa4020 00002aaaabe967b1
> 0x0000000042aa4010:   00002aac4ee12400 00002aac4ede7000
> 0x0000000042aa4020:   0000000042aa4040 00002aaaabe9cb14
> 0x0000000042aa4030:   00002aac4ede7000 0000000000000000
> 0x0000000042aa4040:   0000000042aa4110 00002aaaabda8ed4
> 0x0000000042aa4050:   0000000000000000 0000000000000000
> 0x0000000042aa4060:   0000000000000000 0000000000000000
> 0x0000000042aa4070:   0000000000000000 0000000000000000
> 0x0000000042aa4080:   0000000000000000 0000000000000000
> 0x0000000042aa4090:   0000000000000000 0000000000000000
> 0x0000000042aa40a0:   0000000000000000 0000000000000000
> 
> Instructions: (pc=0x00002aaaaaab879a)
> 0x00002aaaaaab878a:   06 89 46 08 7d 02 89 06 44 8b 5e 08 4c 8b 56 10
> 0x00002aaaaaab879a:   4f 8b 34 da 4d 85 f6 0f 84 71 02 00 00 45 84 ff
> 
> Stack: [0x0000000000000000,0x0000000000000000],  sp=0x0000000042aa3eb0,  free space=1092239k
> Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
> C  [libjemalloc.so+0xb79a]
> 
> [error occurred during error reporting (printing native stack), id 0xb]
> 
> 
> On Mar 24, 2012, at 9:00 PM, Jason Evans wrote:
> 
>> On Mar 24, 2012, at 11:46 AM, Jason Evans wrote:
>>> On Mar 23, 2012, at 4:21 PM, Vijay wrote:
>>>> Is there any reason i should not be using LD_PRELOAD to force JVM use jemalloc instead of native gcc malloc?
>>>> Background: This is for Apache-Cassandra we do off-heap cache where we explicitly call malloc and free and by using jemalloc we see a fair amount of space savings and was wondering if there is anything which we have to consider before using it.
>>> 
>>> LD_PRELOAD'ing jemalloc should be okay as long as the JVM doesn't statically link a different malloc implementation.  I expect that if it isn't safe, you'll experience crashes quite early on, so give it a try and see what happens.
>> 
>> I was just looking through some of my notes and noticed an issue that may be relevant here.  jemalloc has a configure option called lazy-lock that has apparently caused problems in some Java use cases.  Java was using dlopen() to load a library that was dynamically linked with jemalloc, so jemalloc came along too late to intercept pthread_create() calls and turn on locking.  I don't think your use case will hit the same issue, but beware of dlopen() anywhere in the mix.
>> 
>> Jason
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20120326/7e1d0ed5/attachment.html>

From jasone at canonware.com  Mon Mar 26 10:00:39 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 26 Mar 2012 10:00:39 -0700
Subject: Question regarding jemalloc and JVM
In-Reply-To: <2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
	<2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
Message-ID: <00699E54-225D-4545-9C6C-EC80E05DF1B7@canonware.com>

On Mar 26, 2012, at 9:51 AM, Vijay Parthasarathy wrote:
> looks like it is problematic to use LD_PRELOAD i had various crashes. I understand it is too much to ask, any configuration to look out for? 
> I think most probably i will use JNI to load jemalloc (LD_LIBRARY_PATH), looks like that works fine so far.
> 
> hs_err_pid1622.log:# Problematic frame:
> hs_err_pid1622.log-# C  [libjemalloc.so+0x57f4]  free+0x54
> hs_err_pid1622.log-#

The crash in free() is the only one that tells me anything at all, and my only guesses are 1) mixed allocator usage or 2) application error, e.g. double free().  I really don't know anything about how the JVM is structured internally , how it interacts with malloc, how it uses/abuses dlopen(), etc., so I'm not going to be of much help without a lot more background information.

Thanks,
Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20120326/20976dd9/attachment.html>

From jasone at canonware.com  Mon Mar 26 10:12:29 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 26 Mar 2012 10:12:29 -0700
Subject: make check fails on rhel5/ppc
In-Reply-To: <1332747898.15499.9.camel@yum.linpro.no>
References: <1332747898.15499.9.camel@yum.linpro.no>
Message-ID: <48547387-778C-4239-AB25-01E184699327@canonware.com>

On Mar 26, 2012, at 12:44 AM, Ingvar Hagelund wrote:
> With the proposed atomic operations for ppc patch, I can finally build
> jemalloc-2.2.5 on rhel5/ppc. make check fails like this for all but the
> bitmap test.
> 
> Too many small size classes (269 > max 256)
> 
> More details below.
> 
> Is this just missing tuning? Where are the knobs to turn?

Something terrible must be wrong with the configuration.  Quantum and page size are the most likely culprits; what are they set at?

The relevant code for this failure is in arena.c:arena_boot().

Thanks,
Jason

From mh+jemalloc at glandium.org  Mon Mar 26 11:07:04 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 26 Mar 2012 20:07:04 +0200
Subject: Question regarding jemalloc and JVM
In-Reply-To: <2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
	<2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
Message-ID: <20120326180704.GA13070@glandium.org>

On Mon, Mar 26, 2012 at 04:51:54PM +0000, Vijay Parthasarathy wrote:
> Hi Jason,
> 
> looks like it is problematic to use LD_PRELOAD i had various crashes. I understand it is too much to ask, any configuration to look out for?
> I think most probably i will use JNI to load jemalloc (LD_LIBRARY_PATH), looks like that works fine so far.

Are you using a jemalloc release or the git dev branch?

Mike


From vparthasarathy at netflix.com  Mon Mar 26 11:16:57 2012
From: vparthasarathy at netflix.com (Vijay Parthasarathy)
Date: Mon, 26 Mar 2012 18:16:57 +0000
Subject: Question regarding jemalloc and JVM
In-Reply-To: <20120326180704.GA13070@glandium.org>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
	<2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
	<20120326180704.GA13070@glandium.org>
Message-ID: <1BA836BE-27C8-4F0C-9E5C-BF2DE0D04DC5@netflix.com>

Hi Mike, yes

Regards
VJ
On Mar 26, 2012, at 11:07 AM, Mike Hommey wrote:

> On Mon, Mar 26, 2012 at 04:51:54PM +0000, Vijay Parthasarathy wrote:
>> Hi Jason,
>> 
>> looks like it is problematic to use LD_PRELOAD i had various crashes. I understand it is too much to ask, any configuration to look out for?
>> I think most probably i will use JNI to load jemalloc (LD_LIBRARY_PATH), looks like that works fine so far.
> 
> Are you using a jemalloc release or the git dev branch?
> 
> Mike
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss



From mh+jemalloc at glandium.org  Mon Mar 26 11:26:29 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Mon, 26 Mar 2012 20:26:29 +0200
Subject: Question regarding jemalloc and JVM
In-Reply-To: <1BA836BE-27C8-4F0C-9E5C-BF2DE0D04DC5@netflix.com>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
	<2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
	<20120326180704.GA13070@glandium.org>
	<1BA836BE-27C8-4F0C-9E5C-BF2DE0D04DC5@netflix.com>
Message-ID: <20120326182629.GA13712@glandium.org>

On Mon, Mar 26, 2012 at 06:16:57PM +0000, Vijay Parthasarathy wrote:
> Hi Mike, yes

Yes to which?

Now that i think of it, either way, there's a problem:
- If you are using a jemalloc release, you don't have commit 4bb0983.
- If you are using the git dev branch, commit 08fc3b2 broke commit
  4bb0983 and you need the patch I sent today to fix the glibc hooks.

Anyways, if you are using a jemalloc release, cherry-picking commit
4bb0983 should improve the situation for you.

Mike


From jasone at canonware.com  Mon Mar 26 11:56:15 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 26 Mar 2012 11:56:15 -0700
Subject: [PATCH] Use __sync_add_and_fetch and __sync_sub_and_fetch when
	they are available
In-Reply-To: <1332774221-20788-1-git-send-email-mh+jemalloc@glandium.org>
References: <20120319162514.GA6946@glandium.org>
	<1332774221-20788-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <D0C821DF-8814-4D94-BB15-7266B23119D4@canonware.com>

On Mar 26, 2012, at 8:03 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> These functions may be available as inlines or as libgcc functions. In the
> former case, a __GCC_HAVE_SYNC_COMPARE_AND_SWAP_n macro is defined. But we
> still want to use these functions in the latter case, when we don't have
> our own implementation.

Applied; thanks.

Jason



From vparthasarathy at netflix.com  Mon Mar 26 12:32:42 2012
From: vparthasarathy at netflix.com (Vijay Parthasarathy)
Date: Mon, 26 Mar 2012 19:32:42 +0000
Subject: Question regarding jemalloc and JVM
In-Reply-To: <20120326182629.GA13712@glandium.org>
References: <CAFisTNbOkdmZLD0hVGbTAseqMmEOm-HGxdzGjc-0=S2Z5EvGZw@mail.gmail.com>
	<3A9A851A-CE81-4188-A7EF-08EADB3C7CBF@canonware.com>
	<D9EA7E6C-258F-4CD7-AAAB-96BE9DBDFC91@canonware.com>
	<E896A488-6939-4214-A672-2921579C6052@gmail.com>
	<2EE439F4-6608-440B-9806-9701FA595283@netflix.com>
	<20120326180704.GA13070@glandium.org>
	<1BA836BE-27C8-4F0C-9E5C-BF2DE0D04DC5@netflix.com>
	<20120326182629.GA13712@glandium.org>
Message-ID: <D4218DB5-94B4-47EF-B35C-D5A9DD6309A7@netflix.com>

Hi Mike,

I downloaded it from http://www.canonware.com/download/jemalloc/ because the build was failing in my machine.

[vijay_tcasstest at vijay_tcass-i-a91ee8cd jemalloc-2.2.5]$ cat VERSION
2.2.5-0-gfc1bb70e5f0d9a58b39efa39cc549b5af5104760
[vijay_tcasstest at vijay_tcass-i-a91ee8cd jemalloc-2.2.5]$

I will try chery pick as i am typing this mail.
Thanks for letting me know.

Regards
VJ

On Mar 26, 2012, at 11:26 AM, Mike Hommey wrote:

On Mon, Mar 26, 2012 at 06:16:57PM +0000, Vijay Parthasarathy wrote:
Hi Mike, yes

Yes to which?

Now that i think of it, either way, there's a problem:
- If you are using a jemalloc release, you don't have commit 4bb0983.
- If you are using the git dev branch, commit 08fc3b2 broke commit
 4bb0983 and you need the patch I sent today to fix the glibc hooks.

Anyways, if you are using a jemalloc release, cherry-picking commit
4bb0983 should improve the situation for you.

Mike
_______________________________________________
jemalloc-discuss mailing list
jemalloc-discuss at canonware.com<mailto:jemalloc-discuss at canonware.com>
http://www.canonware.com/mailman/listinfo/jemalloc-discuss

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20120326/8f5681ba/attachment.html>

From jasone at canonware.com  Mon Mar 26 12:50:44 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 26 Mar 2012 12:50:44 -0700
Subject: [PATCH] Fix glibc hooks when using both --with-jemalloc-prefix
	and --with-mangling
In-Reply-To: <1332776817-9886-1-git-send-email-mh+jemalloc@glandium.org>
References: <20120320065331.GA23326@glandium.org>
	<1332776817-9886-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <3E3045B8-4666-431C-AB37-0295047BF0C5@canonware.com>

On Mar 26, 2012, at 8:46 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> src/jemalloc.c |   10 +++++++++-
> 1 files changed, 9 insertions(+), 1 deletions(-)

Applied; thanks.

Jason


From jasone at canonware.com  Mon Mar 26 13:00:10 2012
From: jasone at canonware.com (Jason Evans)
Date: Mon, 26 Mar 2012 13:00:10 -0700
Subject: [PATCH] Make zone_{free, realloc,
	free_definite_size} fallback to the system allocator if they are
	called with a pointer that jemalloc didn't allocate
In-Reply-To: <1332779975-11443-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332779975-11443-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <C8D49D50-4632-4431-BDF0-BE10CF9ECFE2@canonware.com>

On Mar 26, 2012, at 9:39 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> It turns out some OSX system libraries (like CoreGraphics on 10.6) like
> to call malloc_zone_* functions, but giving them pointers that weren't
> allocated with the zone they are using.
> 
> Possibly, they do malloc_zone_malloc(malloc_default_zone()) before we
> register the jemalloc zone, and malloc_zone_realloc(malloc_default_zone())
> after. malloc_default_zone() returning a different value in both cases.

Applied; thanks.

It's a shame that this is necessary?

Jason



From mh+jemalloc at glandium.org  Mon Mar 26 23:43:57 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 08:43:57 +0200
Subject: [PATCH] Make zone_{free, realloc, free_definite_size} fallback
	to the system allocator if they are called with a pointer that jemalloc
	didn't allocate
In-Reply-To: <C8D49D50-4632-4431-BDF0-BE10CF9ECFE2@canonware.com>
References: <1332779975-11443-1-git-send-email-mh+jemalloc@glandium.org>
	<C8D49D50-4632-4431-BDF0-BE10CF9ECFE2@canonware.com>
Message-ID: <20120327064357.GB25685@glandium.org>

On Mon, Mar 26, 2012 at 01:00:10PM -0700, Jason Evans wrote:
> On Mar 26, 2012, at 9:39 AM, Mike Hommey wrote:
> > From: Mike Hommey <mh at glandium.org>
> > 
> > It turns out some OSX system libraries (like CoreGraphics on 10.6) like
> > to call malloc_zone_* functions, but giving them pointers that weren't
> > allocated with the zone they are using.
> > 
> > Possibly, they do malloc_zone_malloc(malloc_default_zone()) before we
> > register the jemalloc zone, and malloc_zone_realloc(malloc_default_zone())
> > after. malloc_default_zone() returning a different value in both cases.
> 
> Applied; thanks.
> 
> It's a shame that this is necessary?

There's more coming. I'm still getting crashes with Firefox on 10.6 (but
not 10.7). I found a workaround, but I need to find a way to make it
work on 10.5.

Mike


From ingvar at redpill-linpro.com  Tue Mar 27 02:10:41 2012
From: ingvar at redpill-linpro.com (Ingvar Hagelund)
Date: Tue, 27 Mar 2012 11:10:41 +0200
Subject: make check fails on rhel5/ppc
In-Reply-To: <48547387-778C-4239-AB25-01E184699327@canonware.com>
References: <1332747898.15499.9.camel@yum.linpro.no>
	<48547387-778C-4239-AB25-01E184699327@canonware.com>
Message-ID: <1332839441.24541.40.camel@yum.linpro.no>

* Ingvar Hagelund wrote:
> > With the proposed atomic operations for ppc patch, I can finally build
> > jemalloc-2.2.5 on rhel5/ppc. make check fails like this for all but the
> > bitmap test.
> > 
> > Too many small size classes (269 > max 256)
> > 
> > More details below.
> > 
> > Is this just missing tuning? Where are the knobs to turn?

* Jason Evans wrote:
> Something terrible must be wrong with the configuration. Quantum and page size are the most likely culprits; what are they set at?

Page size on rhel5/ppc64 is 64k. This should really be picked up by
configure, for example via getconf, not hard coded.

rhel5_ppc64$ getconf PAGESIZE
65536

(As opposed to the standard 4k page size on most Linux systems,
including rhel5 on i386 and x86_64)

Quantum in this context, that's the smallest memory block allocated by
malloc, right? Do you have any command or C snippet that may show that?

Ingvar




From ingvar at redpill-linpro.com  Tue Mar 27 04:08:31 2012
From: ingvar at redpill-linpro.com (Ingvar Hagelund)
Date: Tue, 27 Mar 2012 13:08:31 +0200
Subject: make check fails on rhel5/ppc
In-Reply-To: <1332839441.24541.40.camel@yum.linpro.no>
References: <1332747898.15499.9.camel@yum.linpro.no>
	<48547387-778C-4239-AB25-01E184699327@canonware.com>
	<1332839441.24541.40.camel@yum.linpro.no>
Message-ID: <1332846511.24541.43.camel@yum.linpro.no>

ti., 27.03.2012 kl. 11.10 +0200, skrev Ingvar Hagelund:
> * Ingvar Hagelund wrote:
> > > With the proposed atomic operations for ppc patch, I can finally build
> > > jemalloc-2.2.5 on rhel5/ppc. make check fails like this for all but the
> > > bitmap test.
> > > 
> > > Too many small size classes (269 > max 256)
> > > 
> > > More details below.
> > > 
> > > Is this just missing tuning? Where are the knobs to turn?
> 
> * Jason Evans wrote:
> > Something terrible must be wrong with the configuration. Quantum and page size are the most likely culprits; what are they set at?
> 
> Page size on rhel5/ppc64 is 64k. This should really be picked up by
> configure, for example via getconf, not hard coded.
> 
> rhel5_ppc64$ getconf PAGESIZE
> 65536

Looking a bit on the code, it seems autodetection is actually done. And
it does not work even when hardcoding the pagesize to 64k (same
results).

Any other ideas?

Ingvar




From mh+jemalloc at glandium.org  Tue Mar 27 05:20:13 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 14:20:13 +0200
Subject: [PATCH 2/2] Avoid crashes when system libraries use the purgeable
	zone allocator
In-Reply-To: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <1332850813-10182-2-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 src/zone.c |   21 +++++++++++++++++++++
 1 files changed, 21 insertions(+), 0 deletions(-)

diff --git a/src/zone.c b/src/zone.c
index 4b6c75e..d5eae46 100644
--- a/src/zone.c
+++ b/src/zone.c
@@ -3,6 +3,13 @@
 #  error "This source file is for zones on Darwin (OS X)."
 #endif
 
+/*
+ * The malloc_default_purgeable_zone function is only available on >= 10.6.
+ * We need to check whether it is present at runtime, thus the weak_import.
+ */
+extern malloc_zone_t *malloc_default_purgeable_zone(void)
+JEMALLOC_ATTR(weak_import);
+
 /******************************************************************************/
 /* Data. */
 
@@ -207,6 +214,20 @@ register_zone(void)
 #endif
 #endif
 
+	/*
+	 * The default purgeable zone is created lazily by OSX's libc. It uses
+	 * the default zone when it is created for "small" allocations
+	 * (< 15 KiB), but assumes the default zone is a scalable_zone. This
+	 * obviously fails when the default zone is the jemalloc zone, so
+	 * malloc_default_purgeable_zone is called beforehand so that the
+	 * default purgeable zone is create when the default zone is still
+	 * a scalable_zone.
+	 * As purgeable zones only exist on >= 10.6, we need to check for the
+	 * function existence at runtime.
+	 */
+	if (malloc_default_purgeable_zone)
+		malloc_default_purgeable_zone();
+
 	/* Register the custom zone. At this point it won't be the default. */
 	malloc_zone_register(&zone);
 
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Tue Mar 27 05:20:12 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 14:20:12 +0200
Subject: [PATCH 1/2] Move zone registration to zone.c
Message-ID: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 include/jemalloc/internal/private_namespace.h |    2 +-
 include/jemalloc/internal/zone.h              |    3 +--
 src/jemalloc.c                                |   24 ++----------------------
 src/zone.c                                    |   22 +++++++++++++++++++---
 4 files changed, 23 insertions(+), 28 deletions(-)

diff --git a/include/jemalloc/internal/private_namespace.h b/include/jemalloc/internal/private_namespace.h
index 7103e68..ed34e32 100644
--- a/include/jemalloc/internal/private_namespace.h
+++ b/include/jemalloc/internal/private_namespace.h
@@ -82,7 +82,6 @@
 #define	ckh_string_keycomp JEMALLOC_N(ckh_string_keycomp)
 #define	ckh_try_bucket_insert JEMALLOC_N(ckh_try_bucket_insert)
 #define	ckh_try_insert JEMALLOC_N(ckh_try_insert)
-#define	create_zone JEMALLOC_N(create_zone)
 #define	ctl_boot JEMALLOC_N(ctl_boot)
 #define	ctl_bymib JEMALLOC_N(ctl_bymib)
 #define	ctl_byname JEMALLOC_N(ctl_byname)
@@ -195,6 +194,7 @@
 #define	prof_tdata_init JEMALLOC_N(prof_tdata_init)
 #define	prof_tdata_tls JEMALLOC_N(prof_tdata_tls)
 #define	pthread_create JEMALLOC_N(pthread_create)
+#define	register_zone JEMALLOC_N(register_zone)
 #define	rtree_get JEMALLOC_N(rtree_get)
 #define	rtree_get_locked JEMALLOC_N(rtree_get_locked)
 #define	rtree_new JEMALLOC_N(rtree_new)
diff --git a/include/jemalloc/internal/zone.h b/include/jemalloc/internal/zone.h
index 859b529..9eb4252 100644
--- a/include/jemalloc/internal/zone.h
+++ b/include/jemalloc/internal/zone.h
@@ -12,8 +12,7 @@
 /******************************************************************************/
 #ifdef JEMALLOC_H_EXTERNS
 
-malloc_zone_t *create_zone(void);
-void	szone2ozone(malloc_zone_t *zone);
+void register_zone(void);
 
 #endif /* JEMALLOC_H_EXTERNS */
 /******************************************************************************/
diff --git a/src/jemalloc.c b/src/jemalloc.c
index ee771c7..38a511d 100644
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -712,26 +712,6 @@ malloc_init_hard(void)
 	/* Copy the pointer to the one arena that was already initialized. */
 	arenas[0] = init_arenas[0];
 
-#ifdef JEMALLOC_ZONE
-	/* Register the custom zone. At this point it won't be the default. */
-	malloc_zone_t *jemalloc_zone = create_zone();
-	malloc_zone_register(jemalloc_zone);
-
-	/*
-	 * Unregister and reregister the default zone. On OSX >= 10.6,
-	 * unregistering takes the last registered zone and places it at the
-	 * location of the specified zone. Unregistering the default zone thus
-	 * makes the last registered one the default. On OSX < 10.6,
-	 * unregistering shifts all registered zones. The first registered zone
-	 * then becomes the default.
-	 */
-	do {
-		malloc_zone_t *default_zone = malloc_default_zone();
-		malloc_zone_unregister(default_zone);
-		malloc_zone_register(default_zone);
-	} while (malloc_default_zone() != jemalloc_zone);
-#endif
-
 	malloc_initialized = true;
 	malloc_mutex_unlock(&init_lock);
 	return (false);
@@ -743,8 +723,8 @@ void
 jemalloc_darwin_init(void)
 {
 
-	if (malloc_init_hard())
-		abort();
+	if (!malloc_init_hard())
+		register_zone();
 }
 #endif
 
diff --git a/src/zone.c b/src/zone.c
index d3107f8..4b6c75e 100644
--- a/src/zone.c
+++ b/src/zone.c
@@ -159,8 +159,8 @@ zone_force_unlock(malloc_zone_t *zone)
 		jemalloc_postfork_parent();
 }
 
-malloc_zone_t *
-create_zone(void)
+void
+register_zone(void)
 {
 
 	zone.size = (void *)zone_size;
@@ -206,5 +206,21 @@ create_zone(void)
 	zone_introspect.enumerate_unavailable_without_blocks = NULL;
 #endif
 #endif
-	return (&zone);
+
+	/* Register the custom zone. At this point it won't be the default. */
+	malloc_zone_register(&zone);
+
+	/*
+	 * Unregister and reregister the default zone. On OSX >= 10.6,
+	 * unregistering takes the last registered zone and places it at the
+	 * location of the specified zone. Unregistering the default zone thus
+	 * makes the last registered one the default. On OSX < 10.6,
+	 * unregistering shifts all registered zones. The first registered zone
+	 * then becomes the default.
+	 */
+	do {
+		malloc_zone_t *default_zone = malloc_default_zone();
+		malloc_zone_unregister(default_zone);
+		malloc_zone_register(default_zone);
+	} while (malloc_default_zone() != &zone);
 }
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Tue Mar 27 05:46:14 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 14:46:14 +0200
Subject: [PATCH 1/2] Move zone registration to zone.c
In-Reply-To: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20120327124614.GA1833@glandium.org>

On Tue, Mar 27, 2012 at 02:20:12PM +0200, Mike Hommey wrote:
> @@ -743,8 +723,8 @@ void
>  jemalloc_darwin_init(void)
>  {
>  
> -	if (malloc_init_hard())
> -		abort();
> +	if (!malloc_init_hard())
> +		register_zone();
>  }
>  #endif

Please note that I first attempted to move this function too, and do
lazy initialization of jemalloc, but that ends up in a dead lock because
pthread_atfork calls malloc.

A possible solution is to force malloc_init_hard before registration,
which means making the function non-static.

Another is to call one of the allocation functions and free the
allocated memory. That seemed wasteful.

Another is to call one of the allocation functions and make sure it's
doing nothing besides initialization. For example, calling
je_calloc(0x1000, 0x1000) on 32-bits platform would trigger
initialization but would allocate nothing (because 0x1000 * 0x1000 ==
0). That seemed too hackish.

Mike


From mh+jemalloc at glandium.org  Tue Mar 27 05:48:58 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 14:48:58 +0200
Subject: [PATCH] Add a SYS_write definition on systems where it is not defined
	in headers
Message-ID: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

Namely, in the Android NDK headers, SYS_write is not defined ; but __NR_write is.
---
 include/jemalloc/internal/jemalloc_internal.h.in |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
index 4f55779..13a9b84 100644
--- a/include/jemalloc/internal/jemalloc_internal.h.in
+++ b/include/jemalloc/internal/jemalloc_internal.h.in
@@ -1,6 +1,9 @@
 #include <sys/mman.h>
 #include <sys/param.h>
 #include <sys/syscall.h>
+#if !defined(SYS_write) && defined(__NR_write)
+#define SYS_write __NR_write
+#endif
 #include <sys/time.h>
 #include <sys/types.h>
 #include <sys/uio.h>
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Tue Mar 27 06:03:07 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 15:03:07 +0200
Subject: [PATCH] Change AC_COMPILE_IFELSE into AC_LINK_IFELSE for the
	__sync_{add, sub}_and_fetch() test
Message-ID: <1332853387-24848-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

With the Android NDK, __sync_{add,sub}_and_fetch() compile fine for uint64_t,
but the corresponding libgcc function aren't there.
---
 configure.ac |   28 ++++++++++++++--------------
 1 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/configure.ac b/configure.ac
index 2616b0a..c1b46dc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -898,20 +898,20 @@ dnl __GCC_HAVE_SYNC_COMPARE_AND_SWAP_n macros being undefined.
 AC_DEFUN([JE_SYNC_COMPARE_AND_SWAP_CHECK],[
   AC_CACHE_CHECK([whether to force $1-bit __sync_{add,sub}_and_fetch()],
                [je_cv_sync_compare_and_swap_$2],
-               [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
-                                                    #include <stdint.h>
-                                                   ],
-                                                   [
-                                                    #ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2
-                                                    {
-                                                       uint$1_t x$1 = 0;
-                                                       __sync_add_and_fetch(&x$1, 42);
-                                                       __sync_sub_and_fetch(&x$1, 1);
-                                                    }
-                                                    #else
-                                                    #error __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2 is defined, no need to force
-                                                    #endif
-                                                   ])],
+               [AC_LINK_IFELSE([AC_LANG_PROGRAM([
+                                                 #include <stdint.h>
+                                                ],
+                                                [
+                                                 #ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2
+                                                 {
+                                                    uint$1_t x$1 = 0;
+                                                    __sync_add_and_fetch(&x$1, 42);
+                                                    __sync_sub_and_fetch(&x$1, 1);
+                                                 }
+                                                 #else
+                                                 #error __GCC_HAVE_SYNC_COMPARE_AND_SWAP_$2 is defined, no need to force
+                                                 #endif
+                                                ])],
                                [je_cv_sync_compare_and_swap_$2=yes],
                                [je_cv_sync_compare_and_swap_$2=no])])
 
-- 
1.7.9.1



From rnsanchez at wait4.org  Tue Mar 27 06:11:38 2012
From: rnsanchez at wait4.org (Ricardo Nabinger Sanchez)
Date: Tue, 27 Mar 2012 10:11:38 -0300
Subject: [PATCH] Add a SYS_write definition on systems where it is not
	defined in headers
In-Reply-To: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20120327101138.0ba7d11d@darkmoor.lan.box>

Hello Mike,

On Tue, 27 Mar 2012 14:48:58 +0200
Mike Hommey <mh+jemalloc at glandium.org> wrote:

> +#if !defined(SYS_write) && defined(__NR_write)
> +#define SYS_write __NR_write
> +#endif

Isn't this a good spot for something like the following?

#else
#error "SYS_write is broken on your system."
#endif

Unless I'm overlooking something obvious, it should not be a good thing
letting the compilation go past this point, assuming it will fail in a
later stage anyway.

Cheers

-- 
Ricardo Nabinger Sanchez           http://rnsanchez.wait4.org/
  "Left to themselves, things tend to go from bad to worse."


From mh+jemalloc at glandium.org  Tue Mar 27 06:15:36 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 15:15:36 +0200
Subject: [PATCH] Add a SYS_write definition on systems where it is not
	defined in headers
In-Reply-To: <20120327101138.0ba7d11d@darkmoor.lan.box>
References: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>
	<20120327101138.0ba7d11d@darkmoor.lan.box>
Message-ID: <20120327131536.GA25257@glandium.org>

On Tue, Mar 27, 2012 at 10:11:38AM -0300, Ricardo Nabinger Sanchez wrote:
> Hello Mike,
> 
> On Tue, 27 Mar 2012 14:48:58 +0200
> Mike Hommey <mh+jemalloc at glandium.org> wrote:
> 
> > +#if !defined(SYS_write) && defined(__NR_write)
> > +#define SYS_write __NR_write
> > +#endif
> 
> Isn't this a good spot for something like the following?
> 
> #else
> #error "SYS_write is broken on your system."
> #endif
> 
> Unless I'm overlooking something obvious, it should not be a good thing
> letting the compilation go past this point, assuming it will fail in a
> later stage anyway.

Well, considering it's going to fail later with a pretty self describing
error message, it's probably not worth bothering.

Mike


From justin.lebar at gmail.com  Tue Mar 27 09:20:53 2012
From: justin.lebar at gmail.com (Justin Lebar)
Date: Tue, 27 Mar 2012 09:20:53 -0700
Subject: [PATCH 2/2] Avoid crashes when system libraries use the purgeable
	zone allocator
In-Reply-To: <1332850813-10182-2-git-send-email-mh+jemalloc@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
	<1332850813-10182-2-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <CAFWcpZ5eJEM47hJkE7ws8FKLOopv3Eo92E2Xrf=4P-uAkKX_gg@mail.gmail.com>

+        * [...] This
+        * obviously fails when the default zone is the jemalloc zone, so
+        * malloc_default_purgeable_zone is called beforehand so that the
+        * default purgeable zone is create when the default zone is still
+        * a scalable_zone.

Nit: s/create/created

+        * As purgeable zones only exist on >= 10.6, we need to check for the
+        * function existence at runtime.

Nit: s/function/function's

On Tue, Mar 27, 2012 at 5:20 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> From: Mike Hommey <mh at glandium.org>
>
> ---
> ?src/zone.c | ? 21 +++++++++++++++++++++
> ?1 files changed, 21 insertions(+), 0 deletions(-)
>
> diff --git a/src/zone.c b/src/zone.c
> index 4b6c75e..d5eae46 100644
> --- a/src/zone.c
> +++ b/src/zone.c
> @@ -3,6 +3,13 @@
> ?# ?error "This source file is for zones on Darwin (OS X)."
> ?#endif
>
> +/*
> + * The malloc_default_purgeable_zone function is only available on >= 10.6.
> + * We need to check whether it is present at runtime, thus the weak_import.
> + */
> +extern malloc_zone_t *malloc_default_purgeable_zone(void)
> +JEMALLOC_ATTR(weak_import);
> +
> ?/******************************************************************************/
> ?/* Data. */
>
> @@ -207,6 +214,20 @@ register_zone(void)
> ?#endif
> ?#endif
>
> + ? ? ? /*
> + ? ? ? ?* The default purgeable zone is created lazily by OSX's libc. It uses
> + ? ? ? ?* the default zone when it is created for "small" allocations
> + ? ? ? ?* (< 15 KiB), but assumes the default zone is a scalable_zone. This
> + ? ? ? ?* obviously fails when the default zone is the jemalloc zone, so
> + ? ? ? ?* malloc_default_purgeable_zone is called beforehand so that the
> + ? ? ? ?* default purgeable zone is create when the default zone is still
> + ? ? ? ?* a scalable_zone.
> + ? ? ? ?* As purgeable zones only exist on >= 10.6, we need to check for the
> + ? ? ? ?* function existence at runtime.
> + ? ? ? ?*/
> + ? ? ? if (malloc_default_purgeable_zone)
> + ? ? ? ? ? ? ? malloc_default_purgeable_zone();
> +
> ? ? ? ?/* Register the custom zone. At this point it won't be the default. */
> ? ? ? ?malloc_zone_register(&zone);
>
> --
> 1.7.9.1
>
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss


From mh+jemalloc at glandium.org  Tue Mar 27 14:32:12 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Tue, 27 Mar 2012 23:32:12 +0200
Subject: Heads up on the last (hopefully) OSX issue
Message-ID: <20120327213212.GA4838@glandium.org>

Hi,

In case someone has an idea while I'm away to bed, the apparently last
bit of failure I have with jemalloc 2 and Firefox is a deadlock
situation on fork in a specific unit test program that does fork().
As far as I can see from a quick debugging session, pthread_atfork is
called only once, but jemalloc_prefork is called twice without
jemalloc_postfork_parent being called in between, which explains the
deadlock.

Cheers,

Mike


From mh+jemalloc at glandium.org  Wed Mar 28 00:53:16 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 Mar 2012 09:53:16 +0200
Subject: [PATCH] Don't use pthread_atfork to register prefork/postfork
	handlers on OSX
In-Reply-To: <20120327213212.GA4838@glandium.org>
References: <20120327213212.GA4838@glandium.org>
Message-ID: <1332921196-4621-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

OSX libc calls zone allocators' force_lock/force_unlock already.
---
 src/jemalloc.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/jemalloc.c b/src/jemalloc.c
index 38a511d..38ed641 100644
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -575,7 +575,7 @@ malloc_init_hard(void)
 
 	malloc_conf_init();
 
-#ifndef JEMALLOC_MUTEX_INIT_CB
+#if (!defined(JEMALLOC_MUTEX_INIT_CB) && !defined(JEMALLOC_ZONE))
 	/* Register fork handlers. */
 	if (pthread_atfork(jemalloc_prefork, jemalloc_postfork_parent,
 	    jemalloc_postfork_child) != 0) {
-- 
1.7.9.1



From mh+jemalloc at glandium.org  Wed Mar 28 12:42:33 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 Mar 2012 21:42:33 +0200
Subject: Crash in arenas_cleanup on linux x86-64
Message-ID: <20120328194233.GA8471@glandium.org>

Hi,

I'm getting crashes in Firefox in some cases (only one test suite,
actually), and on Linux x86-64 only (not Linux x86, not Android ARM, and
not OSX x86 or x86-64).
They are a NULL deref in arenas_cleanup, in which the arena variable
seems to be NULL.
This happens with current dev branch. I had a hunch that I tested, and
it turns out commit cd9a134 is broken too and 154829d is not, which
makes cd9a134 the culprit.
I haven't looked why, though.

Cheers,

Mike


From jasone at canonware.com  Wed Mar 28 15:59:36 2012
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 Mar 2012 15:59:36 -0700
Subject: make check fails on rhel5/ppc
In-Reply-To: <1332846511.24541.43.camel@yum.linpro.no>
References: <1332747898.15499.9.camel@yum.linpro.no>
	<48547387-778C-4239-AB25-01E184699327@canonware.com>
	<1332839441.24541.40.camel@yum.linpro.no>
	<1332846511.24541.43.camel@yum.linpro.no>
Message-ID: <6EBC97D7-C4E4-4DCA-88C1-DD5F9573EC7C@canonware.com>

On Mar 27, 2012, at 4:08 AM, Ingvar Hagelund wrote:
> ti., 27.03.2012 kl. 11.10 +0200, skrev Ingvar Hagelund:
>> * Ingvar Hagelund wrote:
>>>> With the proposed atomic operations for ppc patch, I can finally build
>>>> jemalloc-2.2.5 on rhel5/ppc. make check fails like this for all but the
>>>> bitmap test.
>>>> 
>>>> Too many small size classes (269 > max 256)
>>>> 
>>>> More details below.
>>>> 
>>>> Is this just missing tuning? Where are the knobs to turn?
>> 
>> * Jason Evans wrote:
>>> Something terrible must be wrong with the configuration. Quantum and page size are the most likely culprits; what are they set at?
>> 
>> Page size on rhel5/ppc64 is 64k. This should really be picked up by
>> configure, for example via getconf, not hard coded.
>> 
>> rhel5_ppc64$ getconf PAGESIZE
>> 65536
> 
> Looking a bit on the code, it seems autodetection is actually done. And
> it does not work even when hardcoding the pagesize to 64k (same
> results).
> 
> Any other ideas?

I poked around for a bit and realized that the 64 KiB page size is just beyond the design limits for jemalloc 2.2.x; small size classes are spaced every 266 bytes for most of the size class range, so the total number of size classes does end up being 269 (which is bad for fragmentation, by the way).  This isn't a problem for the dev branch, because of this change:

	http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=b172610317babc7f365584ddd7fdaf4eb8d9d04c

The size class table for rhel5/ppc64 is probably as follows:

#if (LG_TINY_MIN == 3 && LG_QUANTUM == 4 && PAGE_SHIFT == 16)
#define SIZE_CLASSES_DEFINED
/*  SIZE_CLASS(bin,     delta,  sz) */
#define SIZE_CLASSES                                                    \
    SIZE_CLASS(0,       8,      8)                                      \
    SIZE_CLASS(1,       8,      16)                                     \
    SIZE_CLASS(2,       16,     32)                                     \
    SIZE_CLASS(3,       16,     48)                                     \
    SIZE_CLASS(4,       16,     64)                                     \
    SIZE_CLASS(5,       16,     80)                                     \
    SIZE_CLASS(6,       16,     96)                                     \
    SIZE_CLASS(7,       16,     112)                                    \
    SIZE_CLASS(8,       16,     128)                                    \
    SIZE_CLASS(9,       32,     160)                                    \
    SIZE_CLASS(10,      32,     192)                                    \
    SIZE_CLASS(11,      32,     224)                                    \
    SIZE_CLASS(12,      32,     256)                                    \
    SIZE_CLASS(13,      64,     320)                                    \
    SIZE_CLASS(14,      64,     384)                                    \
    SIZE_CLASS(15,      64,     448)                                    \
    SIZE_CLASS(16,      64,     512)                                    \
    SIZE_CLASS(17,      128,    640)                                    \
    SIZE_CLASS(18,      128,    768)                                    \
    SIZE_CLASS(19,      128,    896)                                    \
    SIZE_CLASS(20,      128,    1024)                                   \
    SIZE_CLASS(21,      256,    1280)                                   \
    SIZE_CLASS(22,      256,    1536)                                   \
    SIZE_CLASS(23,      256,    1792)                                   \
    SIZE_CLASS(24,      256,    2048)                                   \
    SIZE_CLASS(25,      512,    2560)                                   \
    SIZE_CLASS(26,      512,    3072)                                   \
    SIZE_CLASS(27,      512,    3584)                                   \
    SIZE_CLASS(28,      512,    4096)                                   \
    SIZE_CLASS(29,      1024,   5120)                                   \
    SIZE_CLASS(30,      1024,   6144)                                   \
    SIZE_CLASS(31,      1024,   7168)                                   \
    SIZE_CLASS(32,      1024,   8192)                                   \
    SIZE_CLASS(33,      2048,   10240)                                  \
    SIZE_CLASS(34,      2048,   12288)                                  \
    SIZE_CLASS(35,      2048,   14336)                                  \
    SIZE_CLASS(36,      2048,   16384)                                  \
    SIZE_CLASS(37,      4096,   20480)                                  \
    SIZE_CLASS(38,      4096,   24576)                                  \
    SIZE_CLASS(39,      4096,   28672)                                  \
    SIZE_CLASS(40,      4096,   32768)                                  \
    SIZE_CLASS(41,      8192,   40960)                                  \
    SIZE_CLASS(42,      8192,   49152)                                  \
    SIZE_CLASS(43,      8192,   57344)                                  \

#define NBINS           44
#define SMALL_MAXCLASS  57344
#endif

The diff that fixes this issue is more than I feel comfortable back porting, so unless you want to patch the jemalloc code to change LG_SUBPAGE in your srpm, jemalloc isn't going to work on that platform until 3.0.0.

Thanks,
Jason

From jasone at canonware.com  Wed Mar 28 16:18:14 2012
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 Mar 2012 16:18:14 -0700
Subject: [PATCH] Don't use pthread_atfork to register prefork/postfork
	handlers on OSX
In-Reply-To: <1332921196-4621-1-git-send-email-mh+jemalloc@glandium.org>
References: <20120327213212.GA4838@glandium.org>
	<1332921196-4621-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <8DF6145C-79FD-4142-998D-EC609CADCF06@canonware.com>

On Mar 28, 2012, at 12:53 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> OSX libc calls zone allocators' force_lock/force_unlock already.

Applied; thanks.

Jason


From jasone at canonware.com  Wed Mar 28 16:30:37 2012
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 Mar 2012 16:30:37 -0700
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <20120328194233.GA8471@glandium.org>
References: <20120328194233.GA8471@glandium.org>
Message-ID: <A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>

On Mar 28, 2012, at 12:42 PM, Mike Hommey wrote:
> I'm getting crashes in Firefox in some cases (only one test suite,
> actually), and on Linux x86-64 only (not Linux x86, not Android ARM, and
> not OSX x86 or x86-64).
> They are a NULL deref in arenas_cleanup, in which the arena variable
> seems to be NULL.
> This happens with current dev branch. I had a hunch that I tested, and
> it turns out commit cd9a134 is broken too and 154829d is not, which
> makes cd9a134 the culprit.
> I haven't looked why, though.

It looks to me like the tsd cleanup handler can be called even if the thread never initialized the tsd for that thread.  I think the crash you are seeing would happen if a thread never allocated a small or large object.  I'll work on a fix tonight.

Thanks,
Jason

From jasone at canonware.com  Wed Mar 28 16:52:23 2012
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 Mar 2012 16:52:23 -0700
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
References: <20120328194233.GA8471@glandium.org>
	<A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
Message-ID: <077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>


On Mar 28, 2012, at 4:30 PM, Jason Evans wrote:

> On Mar 28, 2012, at 12:42 PM, Mike Hommey wrote:
>> I'm getting crashes in Firefox in some cases (only one test suite,
>> actually), and on Linux x86-64 only (not Linux x86, not Android ARM, and
>> not OSX x86 or x86-64).
>> They are a NULL deref in arenas_cleanup, in which the arena variable
>> seems to be NULL.
>> This happens with current dev branch. I had a hunch that I tested, and
>> it turns out commit cd9a134 is broken too and 154829d is not, which
>> makes cd9a134 the culprit.
>> I haven't looked why, though.
> 
> It looks to me like the tsd cleanup handler can be called even if the thread never initialized the tsd for that thread.  I think the crash you are seeing would happen if a thread never allocated a small or large object.  I'll work on a fix tonight.

Actually, after further scrutiny, I don't see how this can happen unless TLS (__thread variable memory) is cleared before pthreads TSD destructors are called.  That seems an unlikely explanation though; any other ideas?

Thanks,
Jason

From mh+jemalloc at glandium.org  Thu Mar 29 08:34:50 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 Mar 2012 17:34:50 +0200
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>
References: <20120328194233.GA8471@glandium.org>
	<A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
	<077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>
Message-ID: <20120329153450.GA32702@glandium.org>

On Wed, Mar 28, 2012 at 04:52:23PM -0700, Jason Evans wrote:
> 
> On Mar 28, 2012, at 4:30 PM, Jason Evans wrote:
> 
> > On Mar 28, 2012, at 12:42 PM, Mike Hommey wrote:
> >> I'm getting crashes in Firefox in some cases (only one test suite,
> >> actually), and on Linux x86-64 only (not Linux x86, not Android
> >> ARM, and not OSX x86 or x86-64).  They are a NULL deref in
> >> arenas_cleanup, in which the arena variable seems to be NULL.  This
> >> happens with current dev branch. I had a hunch that I tested, and
> >> it turns out commit cd9a134 is broken too and 154829d is not, which
> >> makes cd9a134 the culprit.  I haven't looked why, though.
> > 
> > It looks to me like the tsd cleanup handler can be called even if
> > the thread never initialized the tsd for that thread.  I think the
> > crash you are seeing would happen if a thread never allocated a
> > small or large object.  I'll work on a fix tonight.
> 
> Actually, after further scrutiny, I don't see how this can happen
> unless TLS (__thread variable memory) is cleared before pthreads TSD
> destructors are called.  That seems an unlikely explanation though;
> any other ideas?

I haven't reproduced in a simpler testcase, but I could reproduce the
failing circumstances in a local Firefox build, with a debugger, and
here is roughly what happens:

#0  arenas_tsd_set (val=0x7f0cc08cda78) at include/jemalloc/internal/jemalloc_internal.h:443
#1  0x00000000004035b5 in choose_arena_hard () at memory/jemalloc/src/jemalloc.c:157
#2  0x0000000000402b1f in choose_arena () at include/jemalloc/internal/jemalloc_internal.h:557
#3  0x0000000000408807 in tcache_get () at memory/jemalloc/include/jemalloc/internal/tcache.h:226
#4  0x000000000041036d in arena_dalloc (arena=0x7f0cc6400180, chunk=0x7f0cc6000000, ptr=0x7f0cc60bde00)
    at memory/jemalloc/include/jemalloc/internal/arena.h:593
#5  0x0000000000402f75 in idalloc (ptr=0x7f0cc60bde00) at include/jemalloc/internal/jemalloc_internal.h:685
#6  0x00000000004069c1 in free (ptr=0x7f0cc60bde00) at memory/jemalloc/src/jemalloc.c:1129
#7  0x00007f0cd1aceaa7 in _dl_deallocate_tls () from /lib64/ld-linux-x86-64.so.2
#8  0x00007f0cd18a892d in __free_stacks (limit=41943040) at allocatestack.c:278
#9  0x00007f0cd18a8a39 in queue_stack (stack=<optimized out>) at allocatestack.c:306
#10 __deallocate_stack (pd=0x64a3c0) at allocatestack.c:758

The arenas_tls value is set when a thread that probably did no
allocation terminated. Libc doesn't call arenas_cleanup for the
corresponding key, probably because it already did call key
destructors for that thread by then.

Then, another thread gets the memory region where arenas_tls was,
and writes something else there. First another pointer, and after
that a NULL value.

At some point, another thread ends and libc does call arenas_cleanup
for the arenas_tls of the previously terminated thread, and this
is where we segfault. We're actually lucky that something else wrote
a NULL so that we can notice this issue. The fact that the previous
tls implementation was using direct pointers was hiding it even more.

Mike


From jasone at canonware.com  Fri Mar 30 10:24:08 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 10:24:08 -0700
Subject: [PATCH] Add a SYS_write definition on systems where it is not
	defined in headers
In-Reply-To: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332852538-22722-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <9160AAA2-B358-4E1F-80F5-924B7E95D1E8@canonware.com>

On Mar 27, 2012, at 5:48 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> Namely, in the Android NDK headers, SYS_write is not defined ; but __NR_write is.
> ---
> include/jemalloc/internal/jemalloc_internal.h.in |    3 +++
> 1 files changed, 3 insertions(+), 0 deletions(-)
> 
> diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
> index 4f55779..13a9b84 100644
> --- a/include/jemalloc/internal/jemalloc_internal.h.in
> +++ b/include/jemalloc/internal/jemalloc_internal.h.in
> @@ -1,6 +1,9 @@
> #include <sys/mman.h>
> #include <sys/param.h>
> #include <sys/syscall.h>
> +#if !defined(SYS_write) && defined(__NR_write)
> +#define SYS_write __NR_write
> +#endif
> #include <sys/time.h>
> #include <sys/types.h>
> #include <sys/uio.h>
> -- 
> 1.7.9.1

Applied, with additional paranoia in wrtmessage().

Thanks,
Jason

From jasone at canonware.com  Fri Mar 30 10:27:27 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 10:27:27 -0700
Subject: [PATCH] Change AC_COMPILE_IFELSE into AC_LINK_IFELSE for the
	__sync_{add, sub}_and_fetch() test
In-Reply-To: <1332853387-24848-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332853387-24848-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <4171221E-5806-4D41-9871-020E6DBE18BE@canonware.com>

On Mar 27, 2012, at 6:03 AM, Mike Hommey wrote:
> With the Android NDK, __sync_{add,sub}_and_fetch() compile fine for uint64_t,
> but the corresponding libgcc function aren't there.

Applied; thanks.

Jason



From jasone at canonware.com  Fri Mar 30 10:54:01 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 10:54:01 -0700
Subject: [PATCH 1/2] Move zone registration to zone.c
In-Reply-To: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <A39B64B8-F4A6-4D9A-AF61-631CC762F2A6@canonware.com>

On Mar 27, 2012, at 5:20 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> include/jemalloc/internal/private_namespace.h |    2 +-
> include/jemalloc/internal/zone.h              |    3 +--
> src/jemalloc.c                                |   24 ++----------------------
> src/zone.c                                    |   22 +++++++++++++++++++---
> 4 files changed, 23 insertions(+), 28 deletions(-)

Applied; thanks.

Jason

From jasone at canonware.com  Fri Mar 30 10:54:36 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 10:54:36 -0700
Subject: [PATCH 1/2] Move zone registration to zone.c
In-Reply-To: <20120327124614.GA1833@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
	<20120327124614.GA1833@glandium.org>
Message-ID: <19FA7E67-2D0D-45E7-9270-FBC687984FFC@canonware.com>

On Mar 27, 2012, at 5:46 AM, Mike Hommey wrote:
> On Tue, Mar 27, 2012 at 02:20:12PM +0200, Mike Hommey wrote:
>> @@ -743,8 +723,8 @@ void
>> jemalloc_darwin_init(void)
>> {
>> 
>> -	if (malloc_init_hard())
>> -		abort();
>> +	if (!malloc_init_hard())
>> +		register_zone();
>> }
>> #endif
> 
> Please note that I first attempted to move this function too, and do
> lazy initialization of jemalloc, but that ends up in a dead lock because
> pthread_atfork calls malloc.

Now that pthread_atfork() isn't being called on Darwin, does deadlock still occur due to some other memory allocation during initialization?

Jason

From mh+jemalloc at glandium.org  Fri Mar 30 11:03:52 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Fri, 30 Mar 2012 20:03:52 +0200
Subject: [PATCH 1/2] Move zone registration to zone.c
In-Reply-To: <19FA7E67-2D0D-45E7-9270-FBC687984FFC@canonware.com>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
	<20120327124614.GA1833@glandium.org>
	<19FA7E67-2D0D-45E7-9270-FBC687984FFC@canonware.com>
Message-ID: <20120330180352.GA8273@glandium.org>

On Fri, Mar 30, 2012 at 10:54:36AM -0700, Jason Evans wrote:
> On Mar 27, 2012, at 5:46 AM, Mike Hommey wrote:
> > On Tue, Mar 27, 2012 at 02:20:12PM +0200, Mike Hommey wrote:
> >> @@ -743,8 +723,8 @@ void
> >> jemalloc_darwin_init(void)
> >> {
> >> 
> >> -	if (malloc_init_hard())
> >> -		abort();
> >> +	if (!malloc_init_hard())
> >> +		register_zone();
> >> }
> >> #endif
> > 
> > Please note that I first attempted to move this function too, and do
> > lazy initialization of jemalloc, but that ends up in a dead lock because
> > pthread_atfork calls malloc.
> 
> Now that pthread_atfork() isn't being called on Darwin, does deadlock
> still occur due to some other memory allocation during initialization?

I haven't experienced deadlocks during initialization, even when
pthread_atfork was called.

Mike


From jasone at canonware.com  Fri Mar 30 11:06:09 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 11:06:09 -0700
Subject: [PATCH 2/2] Avoid crashes when system libraries use the purgeable
	zone allocator
In-Reply-To: <1332850813-10182-2-git-send-email-mh+jemalloc@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
	<1332850813-10182-2-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <FB63A269-9FC2-4311-8F5F-19F49F58100A@canonware.com>

On Mar 27, 2012, at 5:20 AM, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
> src/zone.c |   21 +++++++++++++++++++++
> 1 files changed, 21 insertions(+), 0 deletions(-)

Applied, with comment style changes and Justin Lebar's nits fixed.

Thanks,
Jason


From mh+jemalloc at glandium.org  Fri Mar 30 11:06:26 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Fri, 30 Mar 2012 20:06:26 +0200
Subject: [PATCH 1/2] Move zone registration to zone.c
In-Reply-To: <20120330180352.GA8273@glandium.org>
References: <1332850813-10182-1-git-send-email-mh+jemalloc@glandium.org>
	<20120327124614.GA1833@glandium.org>
	<19FA7E67-2D0D-45E7-9270-FBC687984FFC@canonware.com>
	<20120330180352.GA8273@glandium.org>
Message-ID: <20120330180626.GB8273@glandium.org>

On Fri, Mar 30, 2012 at 08:03:52PM +0200, Mike Hommey wrote:
> On Fri, Mar 30, 2012 at 10:54:36AM -0700, Jason Evans wrote:
> > On Mar 27, 2012, at 5:46 AM, Mike Hommey wrote:
> > > On Tue, Mar 27, 2012 at 02:20:12PM +0200, Mike Hommey wrote:
> > >> @@ -743,8 +723,8 @@ void
> > >> jemalloc_darwin_init(void)
> > >> {
> > >> 
> > >> -	if (malloc_init_hard())
> > >> -		abort();
> > >> +	if (!malloc_init_hard())
> > >> +		register_zone();
> > >> }
> > >> #endif
> > > 
> > > Please note that I first attempted to move this function too, and do
> > > lazy initialization of jemalloc, but that ends up in a dead lock because
> > > pthread_atfork calls malloc.
> > 
> > Now that pthread_atfork() isn't being called on Darwin, does deadlock
> > still occur due to some other memory allocation during initialization?
> 
> I haven't experienced deadlocks during initialization, even when
> pthread_atfork was called.

D'oh, I did. End of week confusion. Mmm I'll have to check. I guess it
could work, now.

Mike


From jasone at canonware.com  Fri Mar 30 12:18:14 2012
From: jasone at canonware.com (Jason Evans)
Date: Fri, 30 Mar 2012 12:18:14 -0700
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <20120329153450.GA32702@glandium.org>
References: <20120328194233.GA8471@glandium.org>
	<A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
	<077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>
	<20120329153450.GA32702@glandium.org>
Message-ID: <7666DB67-6467-4A42-8D6B-37FA4E33B462@canonware.com>

On Mar 29, 2012, at 8:34 AM, Mike Hommey wrote:
> I haven't reproduced in a simpler testcase, but I could reproduce the
> failing circumstances in a local Firefox build, with a debugger, and
> here is roughly what happens:
> 
> [?]

Thank you very much for figuring this out!  I think this is now fixed by:

	http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=09a0769ba7a3d139168e606e4295f8002861355f

Can you give it a try, please?

Thanks,
Jason

From mh+jemalloc at glandium.org  Sat Mar 31 00:12:32 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Sat, 31 Mar 2012 09:12:32 +0200
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <7666DB67-6467-4A42-8D6B-37FA4E33B462@canonware.com>
References: <20120328194233.GA8471@glandium.org>
	<A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
	<077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>
	<20120329153450.GA32702@glandium.org>
	<7666DB67-6467-4A42-8D6B-37FA4E33B462@canonware.com>
Message-ID: <20120331071232.GA26585@glandium.org>

On Fri, Mar 30, 2012 at 12:18:14PM -0700, Jason Evans wrote:
> On Mar 29, 2012, at 8:34 AM, Mike Hommey wrote:
> > I haven't reproduced in a simpler testcase, but I could reproduce the
> > failing circumstances in a local Firefox build, with a debugger, and
> > here is roughly what happens:
> > 
> > [?]
> 
> Thank you very much for figuring this out!  I think this is now fixed by:
> 
> 	http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=09a0769ba7a3d139168e606e4295f8002861355f
> 
> Can you give it a try, please?

I will.

Before I forget, I'll just mention that malloc_printf fails when
building with --enable-debug, and using %p for a NULL pointer, because
its implementation prints "0x0", but vsnprintf printfs "(nil)", so the
asserts to compare vsnprintf output fail.

Cheers,

Mike


From mh+jemalloc at glandium.org  Sat Mar 31 02:03:09 2012
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Sat, 31 Mar 2012 11:03:09 +0200
Subject: Crash in arenas_cleanup on linux x86-64
In-Reply-To: <7666DB67-6467-4A42-8D6B-37FA4E33B462@canonware.com>
References: <20120328194233.GA8471@glandium.org>
	<A7E96D1E-E020-4976-90E7-28E0BBE59E7C@canonware.com>
	<077A5BB9-C341-47EC-B012-21B2D3E66F1C@canonware.com>
	<20120329153450.GA32702@glandium.org>
	<7666DB67-6467-4A42-8D6B-37FA4E33B462@canonware.com>
Message-ID: <20120331090309.GA26774@glandium.org>

On Fri, Mar 30, 2012 at 12:18:14PM -0700, Jason Evans wrote:
> On Mar 29, 2012, at 8:34 AM, Mike Hommey wrote:
> > I haven't reproduced in a simpler testcase, but I could reproduce the
> > failing circumstances in a local Firefox build, with a debugger, and
> > here is roughly what happens:
> > 
> > [?]
> 
> Thank you very much for figuring this out!  I think this is now fixed by:
> 
> 	http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=commitdiff;h=09a0769ba7a3d139168e606e4295f8002861355f
> 
> Can you give it a try, please?

It fixed it. Thanks.
No idea if there are other corner cases involving tls, though.

Mike


