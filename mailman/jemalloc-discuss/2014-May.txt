From antony.dovgal at gmail.com  Thu May  1 01:36:37 2014
From: antony.dovgal at gmail.com (Antony Dovgal)
Date: Thu, 01 May 2014 12:36:37 +0400
Subject: keeping memory usage at certain limit
In-Reply-To: <63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
References: <535E36A0.5080805@gmail.com>
	<63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
Message-ID: <53620795.8080900@gmail.com>

Hello Jason,

On 05/01/2014 06:43 AM, Jason Evans wrote:
> Use "thread.tcache.flush" to flush thread caches; "arena.<i>.purge" merely uses madvise(2)
>to inform the kernel that it can recycle dirty pages that contain unused data.

According to the docs "thread.tcache.flush" only flushes the cache of the calling thread and
I have a lot of threads running in thread pools, which are created at the start and never destroyed.
Or did you mean to call it periodically from every thread?

> There are two statistics jemalloc tracks that directly allow you to measure external fragmentation: "stats.allocated" [1] and "stats.active" [2].

Right, I've tried using both of them.
Do I understand it correctly that stats.active decreases only when an entire page is freed?

> jemalloc's worst case fragmentation behavior is pretty straightforward to reason about for small objects.  Each size class [3] can be considered independently.  The worst thing that can possibly happen is that after the application reaches its maximum usage, it then frees all but one allocated region in each page run.  However, your application is presumably reaching a stable number of allocations, then replacing old data with new.  If the total number of allocated regions for each size class remains stable in the steady state, then your application should suffer very little fragmentation.  However, if your application maintains the same total memory usage, but shifts from, say, mostly 48-byte regions to mostly 64-byte regions, it can end up with highly fragmented runs that contain the few remaining 48-byte allocations.
>Given 28 small size classes, it's possible for this to be a terrible fragmentation situation, but I have yet to see this happen in a real application.

So far, using Salvatore's method and code I can see about 3% difference between RSS and allocated memory
when using jemalloc and ~9% difference when using Hoard.
But I expect these values to change since the processes haven't started removing outdated records yet.

I also have a control process without jemalloc (i.e. using plain libc malloc()) using the same code to compute fragmentation
and it shows about 20% difference (and it's growing).


What buffles me most is that stats.allocated keeps returning the same value, but RSS constantly grows.
Could it be because of the amount of threads I use?
Say, I free memory in one thread and try to allocate in another one, but the second thread
doesn't have it cached and has to do the actual allocation?

-- 
Wbr,
Antony Dovgal
---
http://pinba.org - realtime profiling for PHP

From danielmicay at gmail.com  Thu May  1 02:18:32 2014
From: danielmicay at gmail.com (Daniel Micay)
Date: Thu, 01 May 2014 05:18:32 -0400
Subject: keeping memory usage at certain limit
In-Reply-To: <53620795.8080900@gmail.com>
References: <535E36A0.5080805@gmail.com>	<63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
	<53620795.8080900@gmail.com>
Message-ID: <53621168.50303@gmail.com>

On 01/05/14 04:36 AM, Antony Dovgal wrote:
>
> What buffles me most is that stats.allocated keeps returning the same
> value, but RSS constantly grows.
> Could it be because of the amount of threads I use?
> Say, I free memory in one thread and try to allocate in another one, but
> the second thread
> doesn't have it cached and has to do the actual allocation?

RSS will also grow as you touch more of the virtual memory allocated for
stacks via mmap. It isn't necessarily all coming from jemalloc.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: OpenPGP digital signature
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140501/a1f44e71/attachment.sig>

From jasone at canonware.com  Thu May  1 21:37:22 2014
From: jasone at canonware.com (Jason Evans)
Date: Thu, 1 May 2014 21:37:22 -0700
Subject: keeping memory usage at certain limit
In-Reply-To: <53620795.8080900@gmail.com>
References: <535E36A0.5080805@gmail.com>
	<63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
	<53620795.8080900@gmail.com>
Message-ID: <1DDDD175-C4A4-4323-8D16-FC822464832D@canonware.com>

On May 1, 2014, at 1:36 AM, Antony Dovgal <antony.dovgal at gmail.com> wrote:
> On 05/01/2014 06:43 AM, Jason Evans wrote:
>> Use "thread.tcache.flush" to flush thread caches; "arena.<i>.purge" merely uses madvise(2)
>> to inform the kernel that it can recycle dirty pages that contain unused data.
> 
> According to the docs "thread.tcache.flush" only flushes the cache of the calling thread and
> I have a lot of threads running in thread pools, which are created at the start and never destroyed.
> Or did you mean to call it periodically from every thread?

Your application can benefit from calling the ?thread.tcache.flush? mallctl from a thread that is about to go ?idle? (i.e. stops using the allocator for a while), but there?s little benefit otherwise, because there?s an incremental flushing mechanism built in that is driven by continued allocation activity.  One straightforward way to implement flushing for idle threads in thread pools is to have idle threads wake up after a few seconds of inactivity and flush before going back to sleep.

>> There are two statistics jemalloc tracks that directly allow you to measure external fragmentation: "stats.allocated" [1] and "stats.active" [2].
> 
> Right, I've tried using both of them.
> Do I understand it correctly that stats.active decreases only when an entire page is freed?

?stats.active? decreases when an entire page run is freed.  It precisely tracks what actually matters in terms of physical memory exhaustion.

> So far, using Salvatore's method and code I can see about 3% difference between RSS and allocated memory
> when using jemalloc and ~9% difference when using Hoard.
> But I expect these values to change since the processes haven't started removing outdated records yet.
> 
> I also have a control process without jemalloc (i.e. using plain libc malloc()) using the same code to compute fragmentation
> and it shows about 20% difference (and it's growing).
> 
> What buffles me most is that stats.allocated keeps returning the same value, but RSS constantly grows.

This is probably because you aren?t calling the ?epoch? mallctl to refresh mallctl?s cached statistics.

> Could it be because of the amount of threads I use?

If your application occasionally recurses deeply, you may be incrementally increasing the total amount of memory dedicated to thread execution stacks.  That could account for several gigabytes of memory usage, but probably isn?t the only issue.

> Say, I free memory in one thread and try to allocate in another one, but the second thread
> doesn't have it cached and has to do the actual allocation?

Within limits, this can bloat memory usage.  However, IIRC thread caches average ~2.5 MiB per thread under the worst conditions (all threads are purely deallocating a broad mix of allocation sizes), so the thread caches probably account for less than 1 GiB in your application.

Jason

From antony.dovgal at gmail.com  Fri May  2 00:30:10 2014
From: antony.dovgal at gmail.com (Antony Dovgal)
Date: Fri, 02 May 2014 11:30:10 +0400
Subject: keeping memory usage at certain limit
In-Reply-To: <1DDDD175-C4A4-4323-8D16-FC822464832D@canonware.com>
References: <535E36A0.5080805@gmail.com>
	<63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
	<53620795.8080900@gmail.com>
	<1DDDD175-C4A4-4323-8D16-FC822464832D@canonware.com>
Message-ID: <53634982.9040804@gmail.com>

On 05/02/2014 08:37 AM, Jason Evans wrote:
> Your application can benefit from calling the ?thread.tcache.flush? mallctl from a thread that is about to go ?idle?
>(i.e. stops using the allocator for a while), but there?s little benefit otherwise, because there?s an incremental
>flushing mechanism built in that is driven by continued allocation activity.  One straightforward way to implement
>flushing for idle threads in thread pools is to have idle threads wake up after a few seconds of inactivity and flush before going back to sleep.

Ok, I got it, thank you for the explanation.

>> What buffles me most is that stats.allocated keeps returning the same value, but RSS constantly grows.
>
> This is probably because you aren?t calling the ?epoch? mallctl to refresh mallctl?s cached statistics.

I just phrased it wrong: it does change (and I do update epoch).
When it goes above the limit I delete the old data and stats.allocated gets back to the value lower the limit again.
The problem is that even though stats.allocated is kept about the same value all the time, the difference between it and RSS continues to grow.
  
>> Could it be because of the amount of threads I use?
>
> If your application occasionally recurses deeply, you may be incrementally increasing the total amount of memory
> dedicated to thread execution stacks.  That could account for several gigabytes of memory usage, but probably isn?t the only issue.

I don't believe I have any recursion there.
Some libraries might use it though (Protobuf and Judy come to my mind first), I'll check it out, thanks for the suggestion.

>> Say, I free memory in one thread and try to allocate in another one, but the second thread
>> doesn't have it cached and has to do the actual allocation?
>
> Within limits, this can bloat memory usage.  However, IIRC thread caches average ~2.5 MiB per thread under the worst conditions
>(all threads are purely deallocating a broad mix of allocation sizes), so the thread caches probably account for less than 1 GiB in your application.

*sigh* now I'm out of theories.. =)

-- 
Wbr,
Antony Dovgal
---
http://pinba.org - realtime profiling for PHP

From sudurais at gmail.com  Fri May  2 14:34:33 2014
From: sudurais at gmail.com (Sudurais A)
Date: Fri, 2 May 2014 14:34:33 -0700
Subject: [question] stats print and prof dump #79
Message-ID: <CAFoKaPsDofO8peO88K5-hqT0QzHdG4uYkY4ECCnJvu5kESuGjA@mail.gmail.com>

Hi Jason,

This is follow up question to https://github.com/jemalloc/jemalloc/issues/79

We wanted to periodically monitor memory usage with stack-trace of each
allocation in multi-threaded application. Currently, I could dump memory
usage (potential leak's) at exit time of the program. Is it possible to
report memory usage (prof_fdump) called with leak enabled using timer
thread while others threads are working on ?.

Is there risk of calling 'prof_fdump' with leak directly from program ?.
 Currently prof_fdump is static function. Thats needed to be changed for
this purpose. I will make sure only one thread (caller) calls prof_fdump.

Is there any other way to dump memory objects with stack trace currently
held (more like exit time output using prof_leak) periodically ?.

Thanks,
Regards,
Sudurais
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140502/d70a5b5c/attachment.html>

From jasone at canonware.com  Fri May  2 15:51:56 2014
From: jasone at canonware.com (Jason Evans)
Date: Fri, 2 May 2014 15:51:56 -0700
Subject: [question] stats print and prof dump #79
In-Reply-To: <CAFoKaPsDofO8peO88K5-hqT0QzHdG4uYkY4ECCnJvu5kESuGjA@mail.gmail.com>
References: <CAFoKaPsDofO8peO88K5-hqT0QzHdG4uYkY4ECCnJvu5kESuGjA@mail.gmail.com>
Message-ID: <F9E69FB9-49F6-4BF7-9951-A98E0704D930@canonware.com>

On May 2, 2014, at 2:34 PM, Sudurais A <sudurais at gmail.com> wrote:
> This is follow up question to https://github.com/jemalloc/jemalloc/issues/79
> 
> We wanted to periodically monitor memory usage with stack-trace of each allocation in multi-threaded application. Currently, I could dump memory usage (potential leak's) at exit time of the program. Is it possible to report memory usage (prof_fdump) called with leak enabled using timer thread while others threads are working on ?. 
> 
> Is there risk of calling 'prof_fdump' with leak directly from program ?.  Currently prof_fdump is static function. Thats needed to be changed for this purpose. I will make sure only one thread (caller) calls prof_fdump. 
> 
> Is there any other way to dump memory objects with stack trace currently held (more like exit time output using prof_leak) periodically ?. 

The dump that prof_fdump() creates is essentially the same as any other heap profile dump jemalloc does, other than the leakcheck messages that are written to stderr.  You can trigger dumps via the "prof.dump" mallctl and specify any filename you want, or specify no filename and rely on the default filename scheme.  From there, you can easily compute the equivalent leakcheck message via some processing of the heap profile dump.  Leaked bytes and objects come from the first line, and the number of contexts is the line count starting after the header line and preceding the first blank line.  See http://google-perftools.googlecode.com/svn/trunk/doc/pprof_remote_servers.html for format docs.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140502/d0570a7d/attachment.html>

From rnsanchez at wait4.org  Thu May  8 06:53:23 2014
From: rnsanchez at wait4.org (Ricardo Nabinger Sanchez)
Date: Thu, 8 May 2014 10:53:23 -0300
Subject: keeping memory usage at certain limit
In-Reply-To: <53634982.9040804@gmail.com>
References: <535E36A0.5080805@gmail.com>
	<63BF35A6-06C6-483C-A1D1-E533B1DF10FC@canonware.com>
	<53620795.8080900@gmail.com>
	<1DDDD175-C4A4-4323-8D16-FC822464832D@canonware.com>
	<53634982.9040804@gmail.com>
Message-ID: <20140508105323.5d23252b@darkbook.lan.box>

On Fri, 02 May 2014 11:30:10 +0400
Antony Dovgal <antony.dovgal at gmail.com> wrote:

> *sigh* now I'm out of theories.. =)

You haven't mentioned (or I completely overlooked it) whether your
application makes use of mmap-based I/O.  If it does, you should see
your PageTables counter (/proc/meminfo) rising up for about > 1 GB per
disk terabyte your application touches.  This memory is used by the
kernel.

Note that you could have a stable memory usage: your application just
needs to free some memory, causing jemalloc to return it to the system,
the kernel takes it for page tables, and then your application needs
the memory it returned a moment ago, triggering OOM.

This is easy to test: run your application, and monitor /proc/meminfo.
The bad news is that hugepages do not work for disk-based mmaps.

Cheers,

-- 
Ricardo Nabinger Sanchez           http://rnsanchez.wait4.org/
  "Left to themselves, things tend to go from bad to worse."

From martin.ivanov at gmail.com  Thu May  8 08:19:59 2014
From: martin.ivanov at gmail.com (Martin Ivanov)
Date: Thu, 8 May 2014 18:19:59 +0300
Subject: Crash during malloc(), with profiling enabled
Message-ID: <CAMh+OQp+k=pwDM=iO+k6juQV-thh6teWes-qMm_AAPZr9bw1kw@mail.gmail.com>

Hi.

I have been experimenting recently with jemalloc heap profiling, as way to
debug memory leaks, but unfortunately it crashes quite frequently.
CPU architecture is PPC , below is a typical backtraces I get - looks like
the stack is corrupted.


Program terminated with signal 11, Segmentation fault.

#0  0x0ffaab14 in je_prof_backtrace (bt=dwarf2_read_address: Corrupted
DWARF expression.
) at prof.c:398
..
#3  0x0ff7691c in je_choose_arena (arena=<value optimized out>)
    at src/jemalloc/internal/jemalloc_internal.h:711
#4  je_tcache_get (create=<value optimized out>) at
src/jemalloc/internal/tcache.h:242
#5  je_arena_malloc (try_tcache=<value optimized out>, zero=<value
optimized out>, size=<value optimized out>,
    arena=<value optimized out>) at src/jemalloc/internal/arena.h:956
#6  je_imalloct (arena=<value optimized out>, try_tcache=<value optimized
out>, size=<value optimized out>)
    at src/jemalloc/internal/jemalloc_internal.h:771
#7  imallocx (arena=<value optimized out>, try_tcache=<value optimized
out>, zero=<value optimized out>,
    alignment=<value optimized out>, usize=<value optimized out>) at
jemalloc.c:1421
#8  imallocx_prof_sample (usize=dwarf2_read_address: Corrupted DWARF
expression.
) at jemalloc.c:1436
...

Can anyone tell if this is a known problem and if can be overcome ?


Regards,
Martin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140508/edc3ed12/attachment.html>

From ldalessa at indiana.edu  Thu May  8 09:00:31 2014
From: ldalessa at indiana.edu (D'Alessandro, Luke K)
Date: Thu, 8 May 2014 16:00:31 +0000
Subject: Managing pinned memory
Message-ID: <D32CFAE3-937A-46A9-918F-21FDDEF0FA4C@indiana.edu>

Hi all,

I?m in the market for a good concurrent allocator to manage a memory region corresponding to pinned network memory for a multithreaded and distributed HPC application. Basically, I?m going to want to do RDMA to objects that are often malloced and freed. The pinning operation is expensive so it is important to amortize it over lots of uses. I?ve written a simple thread-local caching allocator that allows me to pin contiguous blocks when they?re first allocated, and then just use TLS free listing to reuse space, however I don?t really have the resources needed to implement this in a robust way.

Is there any natural way to do this in jemalloc at this time? My gut feeling is that there isn?t, explicitly specifying an arena breaks its caching and there?s not an obvious way to register a callback to run on internal block allocation and freeing (where I could pin/unpin the underlying memory).

If jemalloc doesn?t really support this use case, does anyone know of an efficient, scalable, robust allocator that does?

Thanks,
Luke

From jasone at canonware.com  Thu May  8 09:00:45 2014
From: jasone at canonware.com (Jason Evans)
Date: Thu, 8 May 2014 09:00:45 -0700
Subject: Crash during malloc(), with profiling enabled
In-Reply-To: <CAMh+OQp+k=pwDM=iO+k6juQV-thh6teWes-qMm_AAPZr9bw1kw@mail.gmail.com>
References: <CAMh+OQp+k=pwDM=iO+k6juQV-thh6teWes-qMm_AAPZr9bw1kw@mail.gmail.com>
Message-ID: <E8E5939F-8112-403C-94F9-7D8640AB39EB@canonware.com>

On May 8, 2014, at 8:19 AM, Martin Ivanov <martin.ivanov at gmail.com> wrote:
> I have been experimenting recently with jemalloc heap profiling, as way to debug memory leaks, but unfortunately it crashes quite frequently.
> CPU architecture is PPC , below is a typical backtraces I get - looks like the stack is corrupted.
> 
> Program terminated with signal 11, Segmentation fault.
> 
> #0  0x0ffaab14 in je_prof_backtrace (bt=dwarf2_read_address: Corrupted DWARF expression.
> ) at prof.c:398
> ..
> #3  0x0ff7691c in je_choose_arena (arena=<value optimized out>)
>     at src/jemalloc/internal/jemalloc_internal.h:711
> #4  je_tcache_get (create=<value optimized out>) at src/jemalloc/internal/tcache.h:242
> #5  je_arena_malloc (try_tcache=<value optimized out>, zero=<value optimized out>, size=<value optimized out>, 
>     arena=<value optimized out>) at src/jemalloc/internal/arena.h:956
> #6  je_imalloct (arena=<value optimized out>, try_tcache=<value optimized out>, size=<value optimized out>)
>     at src/jemalloc/internal/jemalloc_internal.h:771
> #7  imallocx (arena=<value optimized out>, try_tcache=<value optimized out>, zero=<value optimized out>, 
>     alignment=<value optimized out>, usize=<value optimized out>) at jemalloc.c:1421
> #8  imallocx_prof_sample (usize=dwarf2_read_address: Corrupted DWARF expression.
> ) at jemalloc.c:1436
> ...
> 
> Can anyone tell if this is a known problem and if can be overcome ?

This is probably due to buggy debug info generation in the compiler causing incorrect backtracing.  The only alternatives I?m aware of are to fix the debug info generation, or to make sure everything your application links against preserves frame pointers and use the implementation of prof_backtrace in jemalloc that relies on gcc intrinsics to walk the stack via frame pointers, e.g. configure with ?disable-prof-libunwind ?disable-prof-libgcc.

Jason

From jasone at canonware.com  Thu May  8 09:04:04 2014
From: jasone at canonware.com (Jason Evans)
Date: Thu, 8 May 2014 09:04:04 -0700
Subject: Managing pinned memory
In-Reply-To: <D32CFAE3-937A-46A9-918F-21FDDEF0FA4C@indiana.edu>
References: <D32CFAE3-937A-46A9-918F-21FDDEF0FA4C@indiana.edu>
Message-ID: <BF4D408D-C64C-42A4-AEA5-5D74EEB75581@canonware.com>

On May 8, 2014, at 9:00 AM, D'Alessandro, Luke K <ldalessa at indiana.edu> wrote:
> I?m in the market for a good concurrent allocator to manage a memory region corresponding to pinned network memory for a multithreaded and distributed HPC application. Basically, I?m going to want to do RDMA to objects that are often malloced and freed. The pinning operation is expensive so it is important to amortize it over lots of uses. I?ve written a simple thread-local caching allocator that allows me to pin contiguous blocks when they?re first allocated, and then just use TLS free listing to reuse space, however I don?t really have the resources needed to implement this in a robust way.
> 
> Is there any natural way to do this in jemalloc at this time? My gut feeling is that there isn?t, explicitly specifying an arena breaks its caching and there?s not an obvious way to register a callback to run on internal block allocation and freeing (where I could pin/unpin the underlying memory).
> 
> If jemalloc doesn?t really support this use case, does anyone know of an efficient, scalable, robust allocator that does?

This pending change may be relevant to your needs:

	https://github.com/jemalloc/jemalloc/pull/80

I?m imagining that you would implement a custom chunk allocator that pins entire chunks, and then specifically use that arena for allocations that you require to be pinned.  This approach has some shortcomings, but perhaps they don?t matter to your specific application.

Jason

From ldalessa at indiana.edu  Thu May  8 09:42:12 2014
From: ldalessa at indiana.edu (D'Alessandro, Luke K)
Date: Thu, 8 May 2014 16:42:12 +0000
Subject: Managing pinned memory
In-Reply-To: <BF4D408D-C64C-42A4-AEA5-5D74EEB75581@canonware.com>
References: <D32CFAE3-937A-46A9-918F-21FDDEF0FA4C@indiana.edu>
	<BF4D408D-C64C-42A4-AEA5-5D74EEB75581@canonware.com>
Message-ID: <1E775AE2-465E-4083-8CF3-4DEFA8C87103@indiana.edu>


On May 8, 2014, at 12:04 PM, Jason Evans <jasone at canonware.com> wrote:

> On May 8, 2014, at 9:00 AM, D'Alessandro, Luke K <ldalessa at indiana.edu> wrote:
>> I?m in the market for a good concurrent allocator to manage a memory region corresponding to pinned network memory for a multithreaded and distributed HPC application. Basically, I?m going to want to do RDMA to objects that are often malloced and freed. The pinning operation is expensive so it is important to amortize it over lots of uses. I?ve written a simple thread-local caching allocator that allows me to pin contiguous blocks when they?re first allocated, and then just use TLS free listing to reuse space, however I don?t really have the resources needed to implement this in a robust way.
>> 
>> Is there any natural way to do this in jemalloc at this time? My gut feeling is that there isn?t, explicitly specifying an arena breaks its caching and there?s not an obvious way to register a callback to run on internal block allocation and freeing (where I could pin/unpin the underlying memory).
>> 
>> If jemalloc doesn?t really support this use case, does anyone know of an efficient, scalable, robust allocator that does?
> 
> This pending change may be relevant to your needs:
> 
> 	https://github.com/jemalloc/jemalloc/pull/80
> 
> I?m imagining that you would implement a custom chunk allocator that pins entire chunks, and then specifically use that arena for allocations that you require to be pinned.  This approach has some shortcomings, but perhaps they don?t matter to your specific application.

Thanks Jason,

This patch appears to address half the battle, though I?m not 100% sure how to implement the chunk allocator without calling back into jemalloc recursively. I guess that I either use mmap() directly or jemalloc.h has a way to get ?raw? memory already. Although chunk_alloc_core doesn?t seem like a name that?s going to be exposed, so maybe mmap() is the way to go?not a big deal.

Based on the proposed patch, it looks like MALLOCX_ARENA(a) /will/ have an effect for huge regions for both huge_palloc() and huge_dalloc() as well, which is exactly what I need.

The caching is an issue. Certain applications have threads that churn through this memory at nearly the rate they do function calls, and they (hopefully) use it with high temporal locality. It?s also used for inter-thread communication sometimes, in addition to its role in distributed communication. It may be enough though to use one arena per thread for pinned memory, which might cause problems for deallocation if it?s often remote. As always, no way to know if this will work without trying though.

Do you have any sense of the likelihood that this patch will be accepted going forward?

Thanks,
Luke


From jasone at canonware.com  Thu May  8 10:08:48 2014
From: jasone at canonware.com (Jason Evans)
Date: Thu, 8 May 2014 10:08:48 -0700
Subject: Managing pinned memory
In-Reply-To: <1E775AE2-465E-4083-8CF3-4DEFA8C87103@indiana.edu>
References: <D32CFAE3-937A-46A9-918F-21FDDEF0FA4C@indiana.edu>
	<BF4D408D-C64C-42A4-AEA5-5D74EEB75581@canonware.com>
	<1E775AE2-465E-4083-8CF3-4DEFA8C87103@indiana.edu>
Message-ID: <0A2DBF82-7C30-4D61-B9CD-10F6FD4880D9@canonware.com>

On May 8, 2014, at 9:42 AM, D'Alessandro, Luke K <ldalessa at indiana.edu> wrote:
> On May 8, 2014, at 12:04 PM, Jason Evans <jasone at canonware.com> wrote:
>> On May 8, 2014, at 9:00 AM, D'Alessandro, Luke K <ldalessa at indiana.edu> wrote:
>>> I?m in the market for a good concurrent allocator to manage a memory region corresponding to pinned network memory for a multithreaded and distributed HPC application. Basically, I?m going to want to do RDMA to objects that are often malloced and freed. The pinning operation is expensive so it is important to amortize it over lots of uses. I?ve written a simple thread-local caching allocator that allows me to pin contiguous blocks when they?re first allocated, and then just use TLS free listing to reuse space, however I don?t really have the resources needed to implement this in a robust way.
>> 
>> This pending change may be relevant to your needs:
>> 
>> 	https://github.com/jemalloc/jemalloc/pull/80
>> 
>> I?m imagining that you would implement a custom chunk allocator that pins entire chunks, and then specifically use that arena for allocations that you require to be pinned.  This approach has some shortcomings, but perhaps they don?t matter to your specific application.
> 
> This patch appears to address half the battle, though I?m not 100% sure how to implement the chunk allocator without calling back into jemalloc recursively. I guess that I either use mmap() directly or jemalloc.h has a way to get ?raw? memory already. Although chunk_alloc_core doesn?t seem like a name that?s going to be exposed, so maybe mmap() is the way to go?not a big deal.

Yes, mmap() is the way to go.

> Based on the proposed patch, it looks like MALLOCX_ARENA(a) /will/ have an effect for huge regions for both huge_palloc() and huge_dalloc() as well, which is exactly what I need.
> 
> [...]
> 
> Do you have any sense of the likelihood that this patch will be accepted going forward?

The patch will definitely be merged after it's cleaned up.  jemalloc 4.0.0 probably won't be ready for release until late this year though, so you'll need to use the dev branch in the meanwhile if you depend on this functionality.

Jason

From ppedriana at gmail.com  Thu May  8 22:32:45 2014
From: ppedriana at gmail.com (Paul Pedriana)
Date: Thu, 08 May 2014 22:32:45 -0700
Subject: How do you completely shut down and re-initialize jemalloc at runtime?
In-Reply-To: <53479D3D.2040908@gmail.com>
References: <53479D3D.2040908@gmail.com>
Message-ID: <536C687D.1090406@gmail.com>

In the middle of running my app I want to shut down jemalloc and restore 
it to its state at application startup and be able to then use it as if 
new. In shutting it down I would of course make sure that there are no 
outstanding memory in use from it. Is this possible? If so how would I 
do it?

Thanks.



From gnurizen at gmail.com  Tue May 13 09:03:50 2014
From: gnurizen at gmail.com (Tommy Reilly)
Date: Tue, 13 May 2014 12:03:50 -0400
Subject: purge and transparent huge pages
Message-ID: <CANAJUdPfaRCXPkqjjcU_=pYt=fewkuGj5hUYqhTVqeR_FUZtyA@mail.gmail.com>

We've witnessed long running applications on linux have RSS growing slowly
where active and allocated stats level off and stay where we expect them.
We believe this is a combination of fragmentation in our program and
failure of purge due to linux's transparent huge pages feature.  We don't
see this problem on kernels with transparent huge pages disabled.

Has anyone else seen this?

Tommy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140513/78e7cd21/attachment.html>

From bradley at mit.edu  Tue May 13 09:15:54 2014
From: bradley at mit.edu (Bradley C. Kuszmaul)
Date: Tue, 13 May 2014 12:15:54 -0400
Subject: purge and transparent huge pages
In-Reply-To: <CANAJUdPfaRCXPkqjjcU_=pYt=fewkuGj5hUYqhTVqeR_FUZtyA@mail.gmail.com>
References: <CANAJUdPfaRCXPkqjjcU_=pYt=fewkuGj5hUYqhTVqeR_FUZtyA@mail.gmail.com>
Message-ID: <CAKSyJXc4p=mro8f7CmkXefZM=D0RX8DayQ3Wdd6epQg47EaHuQ@mail.gmail.com>

I've had trouble like this, and had to disable transparent huge pages
(advise or never seem ok).

-Bradley


On Tue, May 13, 2014 at 12:03 PM, Tommy Reilly <gnurizen at gmail.com> wrote:

> We've witnessed long running applications on linux have RSS growing slowly
> where active and allocated stats level off and stay where we expect them.
> We believe this is a combination of fragmentation in our program and
> failure of purge due to linux's transparent huge pages feature.  We don't
> see this problem on kernels with transparent huge pages disabled.
>
> Has anyone else seen this?
>
> Tommy
>
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140513/211b2d10/attachment.html>

From shah.vandana at gmail.com  Tue May 13 09:20:32 2014
From: shah.vandana at gmail.com (Vandana Shah)
Date: Tue, 13 May 2014 21:50:32 +0530
Subject: purge and transparent huge pages
In-Reply-To: <CANAJUdPfaRCXPkqjjcU_=pYt=fewkuGj5hUYqhTVqeR_FUZtyA@mail.gmail.com>
References: <CANAJUdPfaRCXPkqjjcU_=pYt=fewkuGj5hUYqhTVqeR_FUZtyA@mail.gmail.com>
Message-ID: <CAKtxisVe56pssq_qF-FyB8wr6_dphH1PqaeO8LDgf5hb=mWNyQ@mail.gmail.com>

We noticed the same behavior. Disabling transparent huge pages (never)
worked for us.

Vandana


On Tue, May 13, 2014 at 9:33 PM, Tommy Reilly <gnurizen at gmail.com> wrote:

> We've witnessed long running applications on linux have RSS growing slowly
> where active and allocated stats level off and stay where we expect them.
> We believe this is a combination of fragmentation in our program and
> failure of purge due to linux's transparent huge pages feature.  We don't
> see this problem on kernels with transparent huge pages disabled.
>
> Has anyone else seen this?
>
> Tommy
>
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140513/9f7732d6/attachment.html>

From lcrestez at ixiacom.com  Tue May 13 14:41:53 2014
From: lcrestez at ixiacom.com (Leonard Crestez)
Date: Tue, 13 May 2014 21:41:53 +0000
Subject: [RFC] Hang on free-during-fork with LinuxThreads
Message-ID: <1400017313203.65678@ixiacom.com>

Hello,


Some time ago I ported jemalloc to work on old systems still using LinuxThreads. See this thread: http://www.canonware.com/pipermail/jemalloc-discuss/2013-October/000646.html


It seems that with LinuxThreads the fork() implementation will call free during fork, between jemalloc_prefork and jemalloc_postfork_child. This can sometimes (very rarely) hang in a call to system() with a stack like the following:


#0  0x0fdd660c in __pthread_sigsuspend () from /lib/libpthread.so.0
#1  0x0fdd6344 in __pthread_wait_for_restart_signal () from /lib/libpthread.so.0
#2  0x0fdd805c in __pthread_alt_lock () from /lib/libpthread.so.0
#3  0x0fdd4c74 in pthread_mutex_lock () from /lib/libpthread.so.0
#4  0x0ff2a480 in pthread_mutex_lock () from /lib/libc.so.6
#5  0x0ffc5bf0 in malloc_mutex_lock (tbin=0x3082c020, binind=0, rem=0, tcache=0x3082c000) at ../../src/jemalloc-3.0.0/include/jemalloc/internal/mutex.h:77
#6  tcache_bin_flush_small (tbin=0x3082c020, binind=0, rem=0, tcache=0x3082c000) at ../../src/jemalloc-3.0.0/src/tcache.c:106
#7  0x0ffc64c0 in tcache_event_hard (tcache=0x3082c000) at ../../src/jemalloc-3.0.0/src/tcache.c:39
#8  0x0ffa545c in tcache_event (ptr=0x3081e000) at ../../src/jemalloc-3.0.0/include/jemalloc/internal/tcache.h:271
#9  tcache_dalloc_large (ptr=0x3081e000) at ../../src/jemalloc-3.0.0/include/jemalloc/internal/tcache.h:435
#10 arena_dalloc (ptr=0x3081e000) at ../../src/jemalloc-3.0.0/include/jemalloc/internal/arena.h:966
#11 idalloc (ptr=0x3081e000) at include/jemalloc/internal/jemalloc_internal.h:840
#12 iqalloc (ptr=0x3081e000) at include/jemalloc/internal/jemalloc_internal.h:852
#13 free (ptr=0x3081e000) at ../../src/jemalloc-3.0.0/src/jemalloc.c:1219
#14 0x0fdd6174 in __pthread_reset_main_thread () from /lib/libpthread.so.0
#15 0x0fdd5288 in __pthread_fork () from /lib/libpthread.so.0
#16 0x0feeadc4 in fork () from /lib/libc.so.6
#17 0x0fe82eb0 in do_system () from /lib/libc.so.6
#18 0x0fe830c8 in system () from /lib/libc.so.6

I am not familiar with how jemalloc works internally but it seems that sometimes tcache_event will trigger some sort of GC. Sometimes (very rarely) this attempts to take a lock which is already taken inside jemalloc_prefork. This hangs because locks are not recursive by default.

I was able to reproduce this in a standalone program. The issue seems to go away if I avoid the GC as in the attached patch. It seems like a horrible evil hack.

  *   Am I missing anything? Are there any other platforms with this issue?
  *   ?Can you see something else going wrong because of free-during-fork? I could patch jemalloc to leak that memory. I only really care about system(), not other uses of fork().
  *   Can you think of a cleaner solution?

The patch is on top of 3.0.0 so it won't apply cleanly. I tried to apply commits 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32<https://github.com/jemalloc/jemalloc/commit/20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32> and b5225928fe106a7d809bd34e849abcd6941e93c7<https://github.com/jemalloc/jemalloc/commit/b5225928fe106a7d809bd34e849abcd6941e93c7> but they did not help me.

Regards,
Leonard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140513/e23ac7bb/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: track-jemalloc-forking.diff
Type: text/x-patch
Size: 2859 bytes
Desc: track-jemalloc-forking.diff
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140513/e23ac7bb/attachment.bin>

From aponomarenko at rosalab.ru  Mon May 19 05:59:26 2014
From: aponomarenko at rosalab.ru (Andrey Ponomarenko)
Date: Mon, 19 May 2014 16:59:26 +0400
Subject: jemalloc added to ABI tracker
Message-ID: <537A002E.8030400@rosalab.ru>

Hi,

I've just added jemalloc library to the Linux ABI tracker: 
http://upstream-tracker.org/versions/jemalloc.html

You can see changes in the ABI interface between 1.0.0 and 3.6.0 
versions of the library on the page. Hope it may be helpful.

-- 
Andrey Ponomarenko, NTC IT ROSA.


From jasone at canonware.com  Tue May 20 12:30:09 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 20 May 2014 12:30:09 -0700
Subject: How do you completely shut down and re-initialize jemalloc at
	runtime?
In-Reply-To: <536C687D.1090406@gmail.com>
References: <53479D3D.2040908@gmail.com> <536C687D.1090406@gmail.com>
Message-ID: <D9195118-589C-427E-AF13-6B1F836E4AA7@canonware.com>

On May 8, 2014, at 10:32 PM, Paul Pedriana <ppedriana at gmail.com> wrote:
> In the middle of running my app I want to shut down jemalloc and restore it to its state at application startup and be able to then use it as if new. In shutting it down I would of course make sure that there are no outstanding memory in use from it. Is this possible? If so how would I do it?

This isn?t possible, partly because jemalloc automatically initializes various internal data structures that aren?t designed to be reset.  The other big issue is that jemalloc (intentionally) doesn?t maintain enough information to find all extant allocations, so there?s no way to discard all of them.

Jason

From jasone at canonware.com  Tue May 20 12:36:54 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 20 May 2014 12:36:54 -0700
Subject: [RFC] Hang on free-during-fork with LinuxThreads
In-Reply-To: <1400017313203.65678@ixiacom.com>
References: <1400017313203.65678@ixiacom.com>
Message-ID: <9E1B6098-9F51-49AD-A592-B2BC01E13293@canonware.com>

On May 13, 2014, at 2:41 PM, Leonard Crestez <lcrestez at ixiacom.com> wrote:
> Some time ago I ported jemalloc to work on old systems still using LinuxThreads. See this thread: http://www.canonware.com/pipermail/jemalloc-discuss/2013-October/000646.html
> 
> It seems that with LinuxThreads the fork() implementation will call free during fork, between jemalloc_prefork and jemalloc_postfork_child.

That?s terrible; LinuxThreads shouldn?t do that!  Can you change LinuxThreads to just leak, or perhaps defer the free() call until after jemalloc_postfork_child()?  As for hacks in jemalloc, you could make it ignore free() calls during forking, but that?s expensive enough that it?s not useful as a generic solution.

Jason

From mh+jemalloc at glandium.org  Wed May 21 00:38:24 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 16:38:24 +0900
Subject: [PATCH] Fix manual dependency on jemalloc_test.h
Message-ID: <1400657904-27030-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 Makefile.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Makefile.in b/Makefile.in
index 90869eb..4cb1a65 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -228,7 +228,7 @@ HEADER_DIRS = $(srcroot)include/jemalloc/internal \
 	$(objroot)include/jemalloc $(objroot)include/jemalloc/internal
 HEADERS = $(wildcard $(foreach dir,$(HEADER_DIRS),$(dir)/*.h))
 $(C_OBJS) $(C_PIC_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_OBJS): $(HEADERS)
-$(TESTS_OBJS): $(objroot)test/unit/jemalloc_test.h
+$(TESTS_OBJS): $(objroot)test/include/test/jemalloc_test.h
 endif
 
 $(C_OBJS) $(C_PIC_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_OBJS): %.$(O):
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 00:59:10 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 16:59:10 +0900
Subject: [PATCH] Use C99 varadic macros instead of GCC ones
Message-ID: <1400659150-31482-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/include/test/test.h | 384 +++++++++++++++++++++++------------------------
 1 file changed, 192 insertions(+), 192 deletions(-)

diff --git a/test/include/test/test.h b/test/include/test/test.h
index 161fafd..22504cd 100644
--- a/test/include/test/test.h
+++ b/test/include/test/test.h
@@ -1,6 +1,6 @@
 #define	ASSERT_BUFSIZE	256
 
-#define	assert_cmp(t, a, b, cmp, neg_cmp, pri, fmt...) do {		\
+#define	assert_cmp(t, a, b, cmp, neg_cmp, pri, ...) do {		\
 	t a_ = (a);							\
 	t b_ = (b);							\
 	if (!(a_ cmp b_)) {						\
@@ -12,205 +12,205 @@
 		    "%"pri" "#neg_cmp" %"pri": ",			\
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_, b_);					\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
 
-#define	assert_ptr_eq(a, b, fmt...)	assert_cmp(void *, a, b, ==,	\
-    !=, "p", fmt)
-#define	assert_ptr_ne(a, b, fmt...)	assert_cmp(void *, a, b, !=,	\
-    ==, "p", fmt)
-#define	assert_ptr_null(a, fmt...)	assert_cmp(void *, a, NULL, ==,	\
-    !=, "p", fmt)
-#define	assert_ptr_not_null(a, fmt...)	assert_cmp(void *, a, NULL, !=,	\
-    ==, "p", fmt)
+#define	assert_ptr_eq(a, b, ...)	assert_cmp(void *, a, b, ==,	\
+    !=, "p", __VA_ARGS__)
+#define	assert_ptr_ne(a, b, ...)	assert_cmp(void *, a, b, !=,	\
+    ==, "p", __VA_ARGS__)
+#define	assert_ptr_null(a, ...)	assert_cmp(void *, a, NULL, ==,	\
+    !=, "p", __VA_ARGS__)
+#define	assert_ptr_not_null(a, ...)	assert_cmp(void *, a, NULL, !=,	\
+    ==, "p", __VA_ARGS__)
 
-#define	assert_c_eq(a, b, fmt...)	assert_cmp(char, a, b, ==, !=, "c", fmt)
-#define	assert_c_ne(a, b, fmt...)	assert_cmp(char, a, b, !=, ==, "c", fmt)
-#define	assert_c_lt(a, b, fmt...)	assert_cmp(char, a, b, <, >=, "c", fmt)
-#define	assert_c_le(a, b, fmt...)	assert_cmp(char, a, b, <=, >, "c", fmt)
-#define	assert_c_ge(a, b, fmt...)	assert_cmp(char, a, b, >=, <, "c", fmt)
-#define	assert_c_gt(a, b, fmt...)	assert_cmp(char, a, b, >, <=, "c", fmt)
+#define	assert_c_eq(a, b, ...)	assert_cmp(char, a, b, ==, !=, "c", __VA_ARGS__)
+#define	assert_c_ne(a, b, ...)	assert_cmp(char, a, b, !=, ==, "c", __VA_ARGS__)
+#define	assert_c_lt(a, b, ...)	assert_cmp(char, a, b, <, >=, "c", __VA_ARGS__)
+#define	assert_c_le(a, b, ...)	assert_cmp(char, a, b, <=, >, "c", __VA_ARGS__)
+#define	assert_c_ge(a, b, ...)	assert_cmp(char, a, b, >=, <, "c", __VA_ARGS__)
+#define	assert_c_gt(a, b, ...)	assert_cmp(char, a, b, >, <=, "c", __VA_ARGS__)
 
-#define	assert_x_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "#x", fmt)
-#define	assert_x_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "#x", fmt)
-#define	assert_x_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "#x", fmt)
-#define	assert_x_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "#x", fmt)
-#define	assert_x_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "#x", fmt)
-#define	assert_x_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "#x", fmt)
+#define	assert_x_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "#x", __VA_ARGS__)
+#define	assert_x_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "#x", __VA_ARGS__)
+#define	assert_x_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "#x", __VA_ARGS__)
+#define	assert_x_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "#x", __VA_ARGS__)
+#define	assert_x_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "#x", __VA_ARGS__)
+#define	assert_x_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "#x", __VA_ARGS__)
 
-#define	assert_d_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "d", fmt)
-#define	assert_d_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "d", fmt)
-#define	assert_d_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "d", fmt)
-#define	assert_d_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "d", fmt)
-#define	assert_d_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "d", fmt)
-#define	assert_d_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "d", fmt)
+#define	assert_d_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "d", __VA_ARGS__)
+#define	assert_d_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "d", __VA_ARGS__)
+#define	assert_d_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "d", __VA_ARGS__)
+#define	assert_d_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "d", __VA_ARGS__)
+#define	assert_d_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "d", __VA_ARGS__)
+#define	assert_d_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "d", __VA_ARGS__)
 
-#define	assert_u_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "u", fmt)
-#define	assert_u_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "u", fmt)
-#define	assert_u_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "u", fmt)
-#define	assert_u_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "u", fmt)
-#define	assert_u_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "u", fmt)
-#define	assert_u_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "u", fmt)
+#define	assert_u_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "u", __VA_ARGS__)
+#define	assert_u_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "u", __VA_ARGS__)
+#define	assert_u_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "u", __VA_ARGS__)
+#define	assert_u_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "u", __VA_ARGS__)
+#define	assert_u_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "u", __VA_ARGS__)
+#define	assert_u_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "u", __VA_ARGS__)
 
-#define	assert_ld_eq(a, b, fmt...)	assert_cmp(long, a, b, ==,	\
-    !=, "ld", fmt)
-#define	assert_ld_ne(a, b, fmt...)	assert_cmp(long, a, b, !=,	\
-    ==, "ld", fmt)
-#define	assert_ld_lt(a, b, fmt...)	assert_cmp(long, a, b, <,	\
-    >=, "ld", fmt)
-#define	assert_ld_le(a, b, fmt...)	assert_cmp(long, a, b, <=,	\
-    >, "ld", fmt)
-#define	assert_ld_ge(a, b, fmt...)	assert_cmp(long, a, b, >=,	\
-    <, "ld", fmt)
-#define	assert_ld_gt(a, b, fmt...)	assert_cmp(long, a, b, >,	\
-    <=, "ld", fmt)
+#define	assert_ld_eq(a, b, ...)	assert_cmp(long, a, b, ==,	\
+    !=, "ld", __VA_ARGS__)
+#define	assert_ld_ne(a, b, ...)	assert_cmp(long, a, b, !=,	\
+    ==, "ld", __VA_ARGS__)
+#define	assert_ld_lt(a, b, ...)	assert_cmp(long, a, b, <,	\
+    >=, "ld", __VA_ARGS__)
+#define	assert_ld_le(a, b, ...)	assert_cmp(long, a, b, <=,	\
+    >, "ld", __VA_ARGS__)
+#define	assert_ld_ge(a, b, ...)	assert_cmp(long, a, b, >=,	\
+    <, "ld", __VA_ARGS__)
+#define	assert_ld_gt(a, b, ...)	assert_cmp(long, a, b, >,	\
+    <=, "ld", __VA_ARGS__)
 
-#define	assert_lu_eq(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, ==, !=, "lu", fmt)
-#define	assert_lu_ne(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, !=, ==, "lu", fmt)
-#define	assert_lu_lt(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, <, >=, "lu", fmt)
-#define	assert_lu_le(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, <=, >, "lu", fmt)
-#define	assert_lu_ge(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, >=, <, "lu", fmt)
-#define	assert_lu_gt(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, >, <=, "lu", fmt)
+#define	assert_lu_eq(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, ==, !=, "lu", __VA_ARGS__)
+#define	assert_lu_ne(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, !=, ==, "lu", __VA_ARGS__)
+#define	assert_lu_lt(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, <, >=, "lu", __VA_ARGS__)
+#define	assert_lu_le(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, <=, >, "lu", __VA_ARGS__)
+#define	assert_lu_ge(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, >=, <, "lu", __VA_ARGS__)
+#define	assert_lu_gt(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, >, <=, "lu", __VA_ARGS__)
 
-#define	assert_qd_eq(a, b, fmt...)	assert_cmp(long long, a, b, ==,	\
-    !=, "qd", fmt)
-#define	assert_qd_ne(a, b, fmt...)	assert_cmp(long long, a, b, !=,	\
-    ==, "qd", fmt)
-#define	assert_qd_lt(a, b, fmt...)	assert_cmp(long long, a, b, <,	\
-    >=, "qd", fmt)
-#define	assert_qd_le(a, b, fmt...)	assert_cmp(long long, a, b, <=,	\
-    >, "qd", fmt)
-#define	assert_qd_ge(a, b, fmt...)	assert_cmp(long long, a, b, >=,	\
-    <, "qd", fmt)
-#define	assert_qd_gt(a, b, fmt...)	assert_cmp(long long, a, b, >,	\
-    <=, "qd", fmt)
+#define	assert_qd_eq(a, b, ...)	assert_cmp(long long, a, b, ==,	\
+    !=, "qd", __VA_ARGS__)
+#define	assert_qd_ne(a, b, ...)	assert_cmp(long long, a, b, !=,	\
+    ==, "qd", __VA_ARGS__)
+#define	assert_qd_lt(a, b, ...)	assert_cmp(long long, a, b, <,	\
+    >=, "qd", __VA_ARGS__)
+#define	assert_qd_le(a, b, ...)	assert_cmp(long long, a, b, <=,	\
+    >, "qd", __VA_ARGS__)
+#define	assert_qd_ge(a, b, ...)	assert_cmp(long long, a, b, >=,	\
+    <, "qd", __VA_ARGS__)
+#define	assert_qd_gt(a, b, ...)	assert_cmp(long long, a, b, >,	\
+    <=, "qd", __VA_ARGS__)
 
-#define	assert_qu_eq(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, ==, !=, "qu", fmt)
-#define	assert_qu_ne(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, !=, ==, "qu", fmt)
-#define	assert_qu_lt(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, <, >=, "qu", fmt)
-#define	assert_qu_le(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, <=, >, "qu", fmt)
-#define	assert_qu_ge(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, >=, <, "qu", fmt)
-#define	assert_qu_gt(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, >, <=, "qu", fmt)
+#define	assert_qu_eq(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, ==, !=, "qu", __VA_ARGS__)
+#define	assert_qu_ne(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, !=, ==, "qu", __VA_ARGS__)
+#define	assert_qu_lt(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, <, >=, "qu", __VA_ARGS__)
+#define	assert_qu_le(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, <=, >, "qu", __VA_ARGS__)
+#define	assert_qu_ge(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, >=, <, "qu", __VA_ARGS__)
+#define	assert_qu_gt(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, >, <=, "qu", __VA_ARGS__)
 
-#define	assert_jd_eq(a, b, fmt...)	assert_cmp(intmax_t, a, b, ==,	\
-    !=, "jd", fmt)
-#define	assert_jd_ne(a, b, fmt...)	assert_cmp(intmax_t, a, b, !=,	\
-    ==, "jd", fmt)
-#define	assert_jd_lt(a, b, fmt...)	assert_cmp(intmax_t, a, b, <,	\
-    >=, "jd", fmt)
-#define	assert_jd_le(a, b, fmt...)	assert_cmp(intmax_t, a, b, <=,	\
-    >, "jd", fmt)
-#define	assert_jd_ge(a, b, fmt...)	assert_cmp(intmax_t, a, b, >=,	\
-    <, "jd", fmt)
-#define	assert_jd_gt(a, b, fmt...)	assert_cmp(intmax_t, a, b, >,	\
-    <=, "jd", fmt)
+#define	assert_jd_eq(a, b, ...)	assert_cmp(intmax_t, a, b, ==,	\
+    !=, "jd", __VA_ARGS__)
+#define	assert_jd_ne(a, b, ...)	assert_cmp(intmax_t, a, b, !=,	\
+    ==, "jd", __VA_ARGS__)
+#define	assert_jd_lt(a, b, ...)	assert_cmp(intmax_t, a, b, <,	\
+    >=, "jd", __VA_ARGS__)
+#define	assert_jd_le(a, b, ...)	assert_cmp(intmax_t, a, b, <=,	\
+    >, "jd", __VA_ARGS__)
+#define	assert_jd_ge(a, b, ...)	assert_cmp(intmax_t, a, b, >=,	\
+    <, "jd", __VA_ARGS__)
+#define	assert_jd_gt(a, b, ...)	assert_cmp(intmax_t, a, b, >,	\
+    <=, "jd", __VA_ARGS__)
 
-#define	assert_ju_eq(a, b, fmt...)	assert_cmp(uintmax_t, a, b, ==,	\
-    !=, "ju", fmt)
-#define	assert_ju_ne(a, b, fmt...)	assert_cmp(uintmax_t, a, b, !=,	\
-    ==, "ju", fmt)
-#define	assert_ju_lt(a, b, fmt...)	assert_cmp(uintmax_t, a, b, <,	\
-    >=, "ju", fmt)
-#define	assert_ju_le(a, b, fmt...)	assert_cmp(uintmax_t, a, b, <=,	\
-    >, "ju", fmt)
-#define	assert_ju_ge(a, b, fmt...)	assert_cmp(uintmax_t, a, b, >=,	\
-    <, "ju", fmt)
-#define	assert_ju_gt(a, b, fmt...)	assert_cmp(uintmax_t, a, b, >,	\
-    <=, "ju", fmt)
+#define	assert_ju_eq(a, b, ...)	assert_cmp(uintmax_t, a, b, ==,	\
+    !=, "ju", __VA_ARGS__)
+#define	assert_ju_ne(a, b, ...)	assert_cmp(uintmax_t, a, b, !=,	\
+    ==, "ju", __VA_ARGS__)
+#define	assert_ju_lt(a, b, ...)	assert_cmp(uintmax_t, a, b, <,	\
+    >=, "ju", __VA_ARGS__)
+#define	assert_ju_le(a, b, ...)	assert_cmp(uintmax_t, a, b, <=,	\
+    >, "ju", __VA_ARGS__)
+#define	assert_ju_ge(a, b, ...)	assert_cmp(uintmax_t, a, b, >=,	\
+    <, "ju", __VA_ARGS__)
+#define	assert_ju_gt(a, b, ...)	assert_cmp(uintmax_t, a, b, >,	\
+    <=, "ju", __VA_ARGS__)
 
-#define	assert_zd_eq(a, b, fmt...)	assert_cmp(ssize_t, a, b, ==,	\
-    !=, "zd", fmt)
-#define	assert_zd_ne(a, b, fmt...)	assert_cmp(ssize_t, a, b, !=,	\
-    ==, "zd", fmt)
-#define	assert_zd_lt(a, b, fmt...)	assert_cmp(ssize_t, a, b, <,	\
-    >=, "zd", fmt)
-#define	assert_zd_le(a, b, fmt...)	assert_cmp(ssize_t, a, b, <=,	\
-    >, "zd", fmt)
-#define	assert_zd_ge(a, b, fmt...)	assert_cmp(ssize_t, a, b, >=,	\
-    <, "zd", fmt)
-#define	assert_zd_gt(a, b, fmt...)	assert_cmp(ssize_t, a, b, >,	\
-    <=, "zd", fmt)
+#define	assert_zd_eq(a, b, ...)	assert_cmp(ssize_t, a, b, ==,	\
+    !=, "zd", __VA_ARGS__)
+#define	assert_zd_ne(a, b, ...)	assert_cmp(ssize_t, a, b, !=,	\
+    ==, "zd", __VA_ARGS__)
+#define	assert_zd_lt(a, b, ...)	assert_cmp(ssize_t, a, b, <,	\
+    >=, "zd", __VA_ARGS__)
+#define	assert_zd_le(a, b, ...)	assert_cmp(ssize_t, a, b, <=,	\
+    >, "zd", __VA_ARGS__)
+#define	assert_zd_ge(a, b, ...)	assert_cmp(ssize_t, a, b, >=,	\
+    <, "zd", __VA_ARGS__)
+#define	assert_zd_gt(a, b, ...)	assert_cmp(ssize_t, a, b, >,	\
+    <=, "zd", __VA_ARGS__)
 
-#define	assert_zu_eq(a, b, fmt...)	assert_cmp(size_t, a, b, ==,	\
-    !=, "zu", fmt)
-#define	assert_zu_ne(a, b, fmt...)	assert_cmp(size_t, a, b, !=,	\
-    ==, "zu", fmt)
-#define	assert_zu_lt(a, b, fmt...)	assert_cmp(size_t, a, b, <,	\
-    >=, "zu", fmt)
-#define	assert_zu_le(a, b, fmt...)	assert_cmp(size_t, a, b, <=,	\
-    >, "zu", fmt)
-#define	assert_zu_ge(a, b, fmt...)	assert_cmp(size_t, a, b, >=,	\
-    <, "zu", fmt)
-#define	assert_zu_gt(a, b, fmt...)	assert_cmp(size_t, a, b, >,	\
-    <=, "zu", fmt)
+#define	assert_zu_eq(a, b, ...)	assert_cmp(size_t, a, b, ==,	\
+    !=, "zu", __VA_ARGS__)
+#define	assert_zu_ne(a, b, ...)	assert_cmp(size_t, a, b, !=,	\
+    ==, "zu", __VA_ARGS__)
+#define	assert_zu_lt(a, b, ...)	assert_cmp(size_t, a, b, <,	\
+    >=, "zu", __VA_ARGS__)
+#define	assert_zu_le(a, b, ...)	assert_cmp(size_t, a, b, <=,	\
+    >, "zu", __VA_ARGS__)
+#define	assert_zu_ge(a, b, ...)	assert_cmp(size_t, a, b, >=,	\
+    <, "zu", __VA_ARGS__)
+#define	assert_zu_gt(a, b, ...)	assert_cmp(size_t, a, b, >,	\
+    <=, "zu", __VA_ARGS__)
 
-#define	assert_d32_eq(a, b, fmt...)	assert_cmp(int32_t, a, b, ==,	\
-    !=, PRId32, fmt)
-#define	assert_d32_ne(a, b, fmt...)	assert_cmp(int32_t, a, b, !=,	\
-    ==, PRId32, fmt)
-#define	assert_d32_lt(a, b, fmt...)	assert_cmp(int32_t, a, b, <,	\
-    >=, PRId32, fmt)
-#define	assert_d32_le(a, b, fmt...)	assert_cmp(int32_t, a, b, <=,	\
-    >, PRId32, fmt)
-#define	assert_d32_ge(a, b, fmt...)	assert_cmp(int32_t, a, b, >=,	\
-    <, PRId32, fmt)
-#define	assert_d32_gt(a, b, fmt...)	assert_cmp(int32_t, a, b, >,	\
-    <=, PRId32, fmt)
+#define	assert_d32_eq(a, b, ...)	assert_cmp(int32_t, a, b, ==,	\
+    !=, PRId32, __VA_ARGS__)
+#define	assert_d32_ne(a, b, ...)	assert_cmp(int32_t, a, b, !=,	\
+    ==, PRId32, __VA_ARGS__)
+#define	assert_d32_lt(a, b, ...)	assert_cmp(int32_t, a, b, <,	\
+    >=, PRId32, __VA_ARGS__)
+#define	assert_d32_le(a, b, ...)	assert_cmp(int32_t, a, b, <=,	\
+    >, PRId32, __VA_ARGS__)
+#define	assert_d32_ge(a, b, ...)	assert_cmp(int32_t, a, b, >=,	\
+    <, PRId32, __VA_ARGS__)
+#define	assert_d32_gt(a, b, ...)	assert_cmp(int32_t, a, b, >,	\
+    <=, PRId32, __VA_ARGS__)
 
-#define	assert_u32_eq(a, b, fmt...)	assert_cmp(uint32_t, a, b, ==,	\
-    !=, PRIu32, fmt)
-#define	assert_u32_ne(a, b, fmt...)	assert_cmp(uint32_t, a, b, !=,	\
-    ==, PRIu32, fmt)
-#define	assert_u32_lt(a, b, fmt...)	assert_cmp(uint32_t, a, b, <,	\
-    >=, PRIu32, fmt)
-#define	assert_u32_le(a, b, fmt...)	assert_cmp(uint32_t, a, b, <=,	\
-    >, PRIu32, fmt)
-#define	assert_u32_ge(a, b, fmt...)	assert_cmp(uint32_t, a, b, >=,	\
-    <, PRIu32, fmt)
-#define	assert_u32_gt(a, b, fmt...)	assert_cmp(uint32_t, a, b, >,	\
-    <=, PRIu32, fmt)
+#define	assert_u32_eq(a, b, ...)	assert_cmp(uint32_t, a, b, ==,	\
+    !=, PRIu32, __VA_ARGS__)
+#define	assert_u32_ne(a, b, ...)	assert_cmp(uint32_t, a, b, !=,	\
+    ==, PRIu32, __VA_ARGS__)
+#define	assert_u32_lt(a, b, ...)	assert_cmp(uint32_t, a, b, <,	\
+    >=, PRIu32, __VA_ARGS__)
+#define	assert_u32_le(a, b, ...)	assert_cmp(uint32_t, a, b, <=,	\
+    >, PRIu32, __VA_ARGS__)
+#define	assert_u32_ge(a, b, ...)	assert_cmp(uint32_t, a, b, >=,	\
+    <, PRIu32, __VA_ARGS__)
+#define	assert_u32_gt(a, b, ...)	assert_cmp(uint32_t, a, b, >,	\
+    <=, PRIu32, __VA_ARGS__)
 
-#define	assert_d64_eq(a, b, fmt...)	assert_cmp(int64_t, a, b, ==,	\
-    !=, PRId64, fmt)
-#define	assert_d64_ne(a, b, fmt...)	assert_cmp(int64_t, a, b, !=,	\
-    ==, PRId64, fmt)
-#define	assert_d64_lt(a, b, fmt...)	assert_cmp(int64_t, a, b, <,	\
-    >=, PRId64, fmt)
-#define	assert_d64_le(a, b, fmt...)	assert_cmp(int64_t, a, b, <=,	\
-    >, PRId64, fmt)
-#define	assert_d64_ge(a, b, fmt...)	assert_cmp(int64_t, a, b, >=,	\
-    <, PRId64, fmt)
-#define	assert_d64_gt(a, b, fmt...)	assert_cmp(int64_t, a, b, >,	\
-    <=, PRId64, fmt)
+#define	assert_d64_eq(a, b, ...)	assert_cmp(int64_t, a, b, ==,	\
+    !=, PRId64, __VA_ARGS__)
+#define	assert_d64_ne(a, b, ...)	assert_cmp(int64_t, a, b, !=,	\
+    ==, PRId64, __VA_ARGS__)
+#define	assert_d64_lt(a, b, ...)	assert_cmp(int64_t, a, b, <,	\
+    >=, PRId64, __VA_ARGS__)
+#define	assert_d64_le(a, b, ...)	assert_cmp(int64_t, a, b, <=,	\
+    >, PRId64, __VA_ARGS__)
+#define	assert_d64_ge(a, b, ...)	assert_cmp(int64_t, a, b, >=,	\
+    <, PRId64, __VA_ARGS__)
+#define	assert_d64_gt(a, b, ...)	assert_cmp(int64_t, a, b, >,	\
+    <=, PRId64, __VA_ARGS__)
 
-#define	assert_u64_eq(a, b, fmt...)	assert_cmp(uint64_t, a, b, ==,	\
-    !=, PRIu64, fmt)
-#define	assert_u64_ne(a, b, fmt...)	assert_cmp(uint64_t, a, b, !=,	\
-    ==, PRIu64, fmt)
-#define	assert_u64_lt(a, b, fmt...)	assert_cmp(uint64_t, a, b, <,	\
-    >=, PRIu64, fmt)
-#define	assert_u64_le(a, b, fmt...)	assert_cmp(uint64_t, a, b, <=,	\
-    >, PRIu64, fmt)
-#define	assert_u64_ge(a, b, fmt...)	assert_cmp(uint64_t, a, b, >=,	\
-    <, PRIu64, fmt)
-#define	assert_u64_gt(a, b, fmt...)	assert_cmp(uint64_t, a, b, >,	\
-    <=, PRIu64, fmt)
+#define	assert_u64_eq(a, b, ...)	assert_cmp(uint64_t, a, b, ==,	\
+    !=, PRIu64, __VA_ARGS__)
+#define	assert_u64_ne(a, b, ...)	assert_cmp(uint64_t, a, b, !=,	\
+    ==, PRIu64, __VA_ARGS__)
+#define	assert_u64_lt(a, b, ...)	assert_cmp(uint64_t, a, b, <,	\
+    >=, PRIu64, __VA_ARGS__)
+#define	assert_u64_le(a, b, ...)	assert_cmp(uint64_t, a, b, <=,	\
+    >, PRIu64, __VA_ARGS__)
+#define	assert_u64_ge(a, b, ...)	assert_cmp(uint64_t, a, b, >=,	\
+    <, PRIu64, __VA_ARGS__)
+#define	assert_u64_gt(a, b, ...)	assert_cmp(uint64_t, a, b, >,	\
+    <=, PRIu64, __VA_ARGS__)
 
-#define	assert_b_eq(a, b, fmt...) do {					\
+#define	assert_b_eq(a, b, ...) do {					\
 	bool a_ = (a);							\
 	bool b_ = (b);							\
 	if (!(a_ == b_)) {						\
@@ -222,11 +222,11 @@
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_ ? "true" : "false",			\
 		    b_ ? "true" : "false");				\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_b_ne(a, b, fmt...) do {					\
+#define	assert_b_ne(a, b, ...) do {					\
 	bool a_ = (a);							\
 	bool b_ = (b);							\
 	if (!(a_ != b_)) {						\
@@ -238,14 +238,14 @@
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_ ? "true" : "false",			\
 		    b_ ? "true" : "false");				\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_true(a, fmt...)	assert_b_eq(a, true, fmt)
-#define	assert_false(a, fmt...)	assert_b_eq(a, false, fmt)
+#define	assert_true(a, ...)	assert_b_eq(a, true, __VA_ARGS__)
+#define	assert_false(a, ...)	assert_b_eq(a, false, __VA_ARGS__)
 
-#define	assert_str_eq(a, b, fmt...) do {				\
+#define	assert_str_eq(a, b, ...) do {				\
 	if (strcmp((a), (b))) {						\
 		char prefix[ASSERT_BUFSIZE];				\
 		char message[ASSERT_BUFSIZE];				\
@@ -254,11 +254,11 @@
 		    "(%s) same as (%s) --> "				\
 		    "\"%s\" differs from \"%s\": ",			\
 		    __func__, __FILE__, __LINE__, #a, #b, a, b);	\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_str_ne(a, b, fmt...) do {				\
+#define	assert_str_ne(a, b, ...) do {				\
 	if (!strcmp((a), (b))) {					\
 		char prefix[ASSERT_BUFSIZE];				\
 		char message[ASSERT_BUFSIZE];				\
@@ -267,18 +267,18 @@
 		    "(%s) differs from (%s) --> "			\
 		    "\"%s\" same as \"%s\": ",				\
 		    __func__, __FILE__, __LINE__, #a, #b, a, b);	\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
 
-#define	assert_not_reached(fmt...) do {					\
+#define	assert_not_reached(...) do {					\
 	char prefix[ASSERT_BUFSIZE];					\
 	char message[ASSERT_BUFSIZE];					\
 	malloc_snprintf(prefix, sizeof(prefix),				\
 	    "%s:%s:%d: Unreachable code reached: ",			\
 	    __func__, __FILE__, __LINE__);				\
-	malloc_snprintf(message, sizeof(message), fmt);			\
+	malloc_snprintf(message, sizeof(message), __VA_ARGS__);			\
 	p_test_fail(prefix, message);					\
 } while (0)
 
@@ -308,8 +308,8 @@ label_test_end:								\
 	p_test_fini();							\
 }
 
-#define	test(tests...)							\
-	p_test(tests, NULL)
+#define	test(...)							\
+	p_test(__VA_ARGS__, NULL)
 
 #define	test_skip_if(e) do {						\
 	if (e) {							\
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 00:59:50 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 16:59:50 +0900
Subject: [PATCH] Define _CRT_SPINCOUNT in test/src/mtx.c like in src/mutex.c
Message-ID: <1400659190-31544-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/src/mtx.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/test/src/mtx.c b/test/src/mtx.c
index 41b95d5..73bd02f 100644
--- a/test/src/mtx.c
+++ b/test/src/mtx.c
@@ -1,5 +1,9 @@
 #include "test/jemalloc_test.h"
 
+#ifndef _CRT_SPINCOUNT
+#define	_CRT_SPINCOUNT 4000
+#endif
+
 bool
 mtx_init(mtx_t *mtx)
 {
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 01:04:24 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 17:04:24 +0900
Subject: [PATCH] Define DLLEXPORT when building .jet objects
Message-ID: <1400659464-31658-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 Makefile.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Makefile.in b/Makefile.in
index 4cb1a65..65d73db 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -219,7 +219,7 @@ $(TESTS_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST
 $(TESTS_OBJS): $(objroot)test/%.$(O): $(srcroot)test/%.c
 $(TESTS_OBJS): CPPFLAGS += -I$(srcroot)test/include -I$(objroot)test/include
 ifneq ($(IMPORTLIB),$(SO))
-$(C_OBJS): CPPFLAGS += -DDLLEXPORT
+$(C_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT
 endif
 
 ifndef CC_MM
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 01:24:08 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 17:24:08 +0900
Subject: [PATCH] Replace variable arrays in tests with VARIABLE_ARRAY
Message-ID: <1400660648-31992-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/unit/hash.c    | 4 ++--
 test/unit/mallctl.c | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/test/unit/hash.c b/test/unit/hash.c
index abb394a..77a8ced 100644
--- a/test/unit/hash.c
+++ b/test/unit/hash.c
@@ -64,8 +64,8 @@ hash_variant_verify(hash_variant_t variant)
 {
 	const size_t hashbytes = hash_variant_bits(variant) / 8;
 	uint8_t key[256];
-	uint8_t hashes[hashbytes * 256];
-	uint8_t final[hashbytes];
+	VARIABLE_ARRAY(uint8_t, hashes, hashbytes * 256);
+	VARIABLE_ARRAY(uint8_t, final, hashbytes);
 	unsigned i;
 	uint32_t computed, expected;
 
diff --git a/test/unit/mallctl.c b/test/unit/mallctl.c
index cb12049..7a8b55f 100644
--- a/test/unit/mallctl.c
+++ b/test/unit/mallctl.c
@@ -285,7 +285,7 @@ TEST_BEGIN(test_arenas_initialized)
 	assert_d_eq(mallctl("arenas.narenas", &narenas, &sz, NULL, 0), 0,
 	    "Unexpected mallctl() failure");
 	{
-		bool initialized[narenas];
+		VARIABLE_ARRAY(bool, initialized, narenas);
 
 		sz = narenas * sizeof(bool);
 		assert_d_eq(mallctl("arenas.initialized", initialized, &sz,
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 01:44:42 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 17:44:42 +0900
Subject: [PATCH] Add missing $(EXE) to filter TESTS_UNIT_AUX_OBJS
Message-ID: <1400661882-32587-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 Makefile.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Makefile.in b/Makefile.in
index 65d73db..839bb08 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -213,7 +213,7 @@ define make-unit-link-dep
 $(1): TESTS_UNIT_LINK_OBJS += $(2)
 $(1): $(2)
 endef
-$(foreach test, $(TESTS_UNIT:$(srcroot)test/unit/%.c=$(objroot)test/unit/%$(EXE)), $(eval $(call make-unit-link-dep,$(test),$(filter $(test:%=%_a.$(O)) $(test:%=%_b.$(O)),$(TESTS_UNIT_AUX_OBJS)))))
+$(foreach test, $(TESTS_UNIT:$(srcroot)test/unit/%.c=$(objroot)test/unit/%$(EXE)), $(eval $(call make-unit-link-dep,$(test),$(filter $(test:%$(EXE)=%_a.$(O)) $(test:%$(EXE)=%_b.$(O)),$(TESTS_UNIT_AUX_OBJS)))))
 $(TESTS_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST
 $(TESTS_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST
 $(TESTS_OBJS): $(objroot)test/%.$(O): $(srcroot)test/%.c
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 02:00:15 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 18:00:15 +0900
Subject: [PATCH] Use C99 varadic macros instead of GCC ones
In-Reply-To: <1400659150-31482-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400659150-31482-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <1400662815-605-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/include/test/test.h | 384 +++++++++++++++++++++++------------------------
 test/unit/util.c         |   8 +-
 2 files changed, 196 insertions(+), 196 deletions(-)

diff --git a/test/include/test/test.h b/test/include/test/test.h
index 161fafd..f55bafc 100644
--- a/test/include/test/test.h
+++ b/test/include/test/test.h
@@ -1,6 +1,6 @@
 #define	ASSERT_BUFSIZE	256
 
-#define	assert_cmp(t, a, b, cmp, neg_cmp, pri, fmt...) do {		\
+#define	assert_cmp(t, a, b, cmp, neg_cmp, pri, ...) do {		\
 	t a_ = (a);							\
 	t b_ = (b);							\
 	if (!(a_ cmp b_)) {						\
@@ -12,205 +12,205 @@
 		    "%"pri" "#neg_cmp" %"pri": ",			\
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_, b_);					\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);	\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
 
-#define	assert_ptr_eq(a, b, fmt...)	assert_cmp(void *, a, b, ==,	\
-    !=, "p", fmt)
-#define	assert_ptr_ne(a, b, fmt...)	assert_cmp(void *, a, b, !=,	\
-    ==, "p", fmt)
-#define	assert_ptr_null(a, fmt...)	assert_cmp(void *, a, NULL, ==,	\
-    !=, "p", fmt)
-#define	assert_ptr_not_null(a, fmt...)	assert_cmp(void *, a, NULL, !=,	\
-    ==, "p", fmt)
+#define	assert_ptr_eq(a, b, ...)	assert_cmp(void *, a, b, ==,	\
+    !=, "p", __VA_ARGS__)
+#define	assert_ptr_ne(a, b, ...)	assert_cmp(void *, a, b, !=,	\
+    ==, "p", __VA_ARGS__)
+#define	assert_ptr_null(a, ...)		assert_cmp(void *, a, NULL, ==,	\
+    !=, "p", __VA_ARGS__)
+#define	assert_ptr_not_null(a, ...)	assert_cmp(void *, a, NULL, !=,	\
+    ==, "p", __VA_ARGS__)
 
-#define	assert_c_eq(a, b, fmt...)	assert_cmp(char, a, b, ==, !=, "c", fmt)
-#define	assert_c_ne(a, b, fmt...)	assert_cmp(char, a, b, !=, ==, "c", fmt)
-#define	assert_c_lt(a, b, fmt...)	assert_cmp(char, a, b, <, >=, "c", fmt)
-#define	assert_c_le(a, b, fmt...)	assert_cmp(char, a, b, <=, >, "c", fmt)
-#define	assert_c_ge(a, b, fmt...)	assert_cmp(char, a, b, >=, <, "c", fmt)
-#define	assert_c_gt(a, b, fmt...)	assert_cmp(char, a, b, >, <=, "c", fmt)
+#define	assert_c_eq(a, b, ...)	assert_cmp(char, a, b, ==, !=, "c", __VA_ARGS__)
+#define	assert_c_ne(a, b, ...)	assert_cmp(char, a, b, !=, ==, "c", __VA_ARGS__)
+#define	assert_c_lt(a, b, ...)	assert_cmp(char, a, b, <, >=, "c", __VA_ARGS__)
+#define	assert_c_le(a, b, ...)	assert_cmp(char, a, b, <=, >, "c", __VA_ARGS__)
+#define	assert_c_ge(a, b, ...)	assert_cmp(char, a, b, >=, <, "c", __VA_ARGS__)
+#define	assert_c_gt(a, b, ...)	assert_cmp(char, a, b, >, <=, "c", __VA_ARGS__)
 
-#define	assert_x_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "#x", fmt)
-#define	assert_x_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "#x", fmt)
-#define	assert_x_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "#x", fmt)
-#define	assert_x_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "#x", fmt)
-#define	assert_x_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "#x", fmt)
-#define	assert_x_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "#x", fmt)
+#define	assert_x_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "#x", __VA_ARGS__)
+#define	assert_x_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "#x", __VA_ARGS__)
+#define	assert_x_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "#x", __VA_ARGS__)
+#define	assert_x_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "#x", __VA_ARGS__)
+#define	assert_x_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "#x", __VA_ARGS__)
+#define	assert_x_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "#x", __VA_ARGS__)
 
-#define	assert_d_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "d", fmt)
-#define	assert_d_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "d", fmt)
-#define	assert_d_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "d", fmt)
-#define	assert_d_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "d", fmt)
-#define	assert_d_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "d", fmt)
-#define	assert_d_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "d", fmt)
+#define	assert_d_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "d", __VA_ARGS__)
+#define	assert_d_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "d", __VA_ARGS__)
+#define	assert_d_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "d", __VA_ARGS__)
+#define	assert_d_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "d", __VA_ARGS__)
+#define	assert_d_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "d", __VA_ARGS__)
+#define	assert_d_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "d", __VA_ARGS__)
 
-#define	assert_u_eq(a, b, fmt...)	assert_cmp(int, a, b, ==, !=, "u", fmt)
-#define	assert_u_ne(a, b, fmt...)	assert_cmp(int, a, b, !=, ==, "u", fmt)
-#define	assert_u_lt(a, b, fmt...)	assert_cmp(int, a, b, <, >=, "u", fmt)
-#define	assert_u_le(a, b, fmt...)	assert_cmp(int, a, b, <=, >, "u", fmt)
-#define	assert_u_ge(a, b, fmt...)	assert_cmp(int, a, b, >=, <, "u", fmt)
-#define	assert_u_gt(a, b, fmt...)	assert_cmp(int, a, b, >, <=, "u", fmt)
+#define	assert_u_eq(a, b, ...)	assert_cmp(int, a, b, ==, !=, "u", __VA_ARGS__)
+#define	assert_u_ne(a, b, ...)	assert_cmp(int, a, b, !=, ==, "u", __VA_ARGS__)
+#define	assert_u_lt(a, b, ...)	assert_cmp(int, a, b, <, >=, "u", __VA_ARGS__)
+#define	assert_u_le(a, b, ...)	assert_cmp(int, a, b, <=, >, "u", __VA_ARGS__)
+#define	assert_u_ge(a, b, ...)	assert_cmp(int, a, b, >=, <, "u", __VA_ARGS__)
+#define	assert_u_gt(a, b, ...)	assert_cmp(int, a, b, >, <=, "u", __VA_ARGS__)
 
-#define	assert_ld_eq(a, b, fmt...)	assert_cmp(long, a, b, ==,	\
-    !=, "ld", fmt)
-#define	assert_ld_ne(a, b, fmt...)	assert_cmp(long, a, b, !=,	\
-    ==, "ld", fmt)
-#define	assert_ld_lt(a, b, fmt...)	assert_cmp(long, a, b, <,	\
-    >=, "ld", fmt)
-#define	assert_ld_le(a, b, fmt...)	assert_cmp(long, a, b, <=,	\
-    >, "ld", fmt)
-#define	assert_ld_ge(a, b, fmt...)	assert_cmp(long, a, b, >=,	\
-    <, "ld", fmt)
-#define	assert_ld_gt(a, b, fmt...)	assert_cmp(long, a, b, >,	\
-    <=, "ld", fmt)
+#define	assert_ld_eq(a, b, ...)	assert_cmp(long, a, b, ==,	\
+    !=, "ld", __VA_ARGS__)
+#define	assert_ld_ne(a, b, ...)	assert_cmp(long, a, b, !=,	\
+    ==, "ld", __VA_ARGS__)
+#define	assert_ld_lt(a, b, ...)	assert_cmp(long, a, b, <,	\
+    >=, "ld", __VA_ARGS__)
+#define	assert_ld_le(a, b, ...)	assert_cmp(long, a, b, <=,	\
+    >, "ld", __VA_ARGS__)
+#define	assert_ld_ge(a, b, ...)	assert_cmp(long, a, b, >=,	\
+    <, "ld", __VA_ARGS__)
+#define	assert_ld_gt(a, b, ...)	assert_cmp(long, a, b, >,	\
+    <=, "ld", __VA_ARGS__)
 
-#define	assert_lu_eq(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, ==, !=, "lu", fmt)
-#define	assert_lu_ne(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, !=, ==, "lu", fmt)
-#define	assert_lu_lt(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, <, >=, "lu", fmt)
-#define	assert_lu_le(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, <=, >, "lu", fmt)
-#define	assert_lu_ge(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, >=, <, "lu", fmt)
-#define	assert_lu_gt(a, b, fmt...)	assert_cmp(unsigned long,	\
-    a, b, >, <=, "lu", fmt)
+#define	assert_lu_eq(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, ==, !=, "lu", __VA_ARGS__)
+#define	assert_lu_ne(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, !=, ==, "lu", __VA_ARGS__)
+#define	assert_lu_lt(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, <, >=, "lu", __VA_ARGS__)
+#define	assert_lu_le(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, <=, >, "lu", __VA_ARGS__)
+#define	assert_lu_ge(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, >=, <, "lu", __VA_ARGS__)
+#define	assert_lu_gt(a, b, ...)	assert_cmp(unsigned long,	\
+    a, b, >, <=, "lu", __VA_ARGS__)
 
-#define	assert_qd_eq(a, b, fmt...)	assert_cmp(long long, a, b, ==,	\
-    !=, "qd", fmt)
-#define	assert_qd_ne(a, b, fmt...)	assert_cmp(long long, a, b, !=,	\
-    ==, "qd", fmt)
-#define	assert_qd_lt(a, b, fmt...)	assert_cmp(long long, a, b, <,	\
-    >=, "qd", fmt)
-#define	assert_qd_le(a, b, fmt...)	assert_cmp(long long, a, b, <=,	\
-    >, "qd", fmt)
-#define	assert_qd_ge(a, b, fmt...)	assert_cmp(long long, a, b, >=,	\
-    <, "qd", fmt)
-#define	assert_qd_gt(a, b, fmt...)	assert_cmp(long long, a, b, >,	\
-    <=, "qd", fmt)
+#define	assert_qd_eq(a, b, ...)	assert_cmp(long long, a, b, ==,	\
+    !=, "qd", __VA_ARGS__)
+#define	assert_qd_ne(a, b, ...)	assert_cmp(long long, a, b, !=,	\
+    ==, "qd", __VA_ARGS__)
+#define	assert_qd_lt(a, b, ...)	assert_cmp(long long, a, b, <,	\
+    >=, "qd", __VA_ARGS__)
+#define	assert_qd_le(a, b, ...)	assert_cmp(long long, a, b, <=,	\
+    >, "qd", __VA_ARGS__)
+#define	assert_qd_ge(a, b, ...)	assert_cmp(long long, a, b, >=,	\
+    <, "qd", __VA_ARGS__)
+#define	assert_qd_gt(a, b, ...)	assert_cmp(long long, a, b, >,	\
+    <=, "qd", __VA_ARGS__)
 
-#define	assert_qu_eq(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, ==, !=, "qu", fmt)
-#define	assert_qu_ne(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, !=, ==, "qu", fmt)
-#define	assert_qu_lt(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, <, >=, "qu", fmt)
-#define	assert_qu_le(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, <=, >, "qu", fmt)
-#define	assert_qu_ge(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, >=, <, "qu", fmt)
-#define	assert_qu_gt(a, b, fmt...)	assert_cmp(unsigned long long,	\
-    a, b, >, <=, "qu", fmt)
+#define	assert_qu_eq(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, ==, !=, "qu", __VA_ARGS__)
+#define	assert_qu_ne(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, !=, ==, "qu", __VA_ARGS__)
+#define	assert_qu_lt(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, <, >=, "qu", __VA_ARGS__)
+#define	assert_qu_le(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, <=, >, "qu", __VA_ARGS__)
+#define	assert_qu_ge(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, >=, <, "qu", __VA_ARGS__)
+#define	assert_qu_gt(a, b, ...)	assert_cmp(unsigned long long,	\
+    a, b, >, <=, "qu", __VA_ARGS__)
 
-#define	assert_jd_eq(a, b, fmt...)	assert_cmp(intmax_t, a, b, ==,	\
-    !=, "jd", fmt)
-#define	assert_jd_ne(a, b, fmt...)	assert_cmp(intmax_t, a, b, !=,	\
-    ==, "jd", fmt)
-#define	assert_jd_lt(a, b, fmt...)	assert_cmp(intmax_t, a, b, <,	\
-    >=, "jd", fmt)
-#define	assert_jd_le(a, b, fmt...)	assert_cmp(intmax_t, a, b, <=,	\
-    >, "jd", fmt)
-#define	assert_jd_ge(a, b, fmt...)	assert_cmp(intmax_t, a, b, >=,	\
-    <, "jd", fmt)
-#define	assert_jd_gt(a, b, fmt...)	assert_cmp(intmax_t, a, b, >,	\
-    <=, "jd", fmt)
+#define	assert_jd_eq(a, b, ...)	assert_cmp(intmax_t, a, b, ==,	\
+    !=, "jd", __VA_ARGS__)
+#define	assert_jd_ne(a, b, ...)	assert_cmp(intmax_t, a, b, !=,	\
+    ==, "jd", __VA_ARGS__)
+#define	assert_jd_lt(a, b, ...)	assert_cmp(intmax_t, a, b, <,	\
+    >=, "jd", __VA_ARGS__)
+#define	assert_jd_le(a, b, ...)	assert_cmp(intmax_t, a, b, <=,	\
+    >, "jd", __VA_ARGS__)
+#define	assert_jd_ge(a, b, ...)	assert_cmp(intmax_t, a, b, >=,	\
+    <, "jd", __VA_ARGS__)
+#define	assert_jd_gt(a, b, ...)	assert_cmp(intmax_t, a, b, >,	\
+    <=, "jd", __VA_ARGS__)
 
-#define	assert_ju_eq(a, b, fmt...)	assert_cmp(uintmax_t, a, b, ==,	\
-    !=, "ju", fmt)
-#define	assert_ju_ne(a, b, fmt...)	assert_cmp(uintmax_t, a, b, !=,	\
-    ==, "ju", fmt)
-#define	assert_ju_lt(a, b, fmt...)	assert_cmp(uintmax_t, a, b, <,	\
-    >=, "ju", fmt)
-#define	assert_ju_le(a, b, fmt...)	assert_cmp(uintmax_t, a, b, <=,	\
-    >, "ju", fmt)
-#define	assert_ju_ge(a, b, fmt...)	assert_cmp(uintmax_t, a, b, >=,	\
-    <, "ju", fmt)
-#define	assert_ju_gt(a, b, fmt...)	assert_cmp(uintmax_t, a, b, >,	\
-    <=, "ju", fmt)
+#define	assert_ju_eq(a, b, ...)	assert_cmp(uintmax_t, a, b, ==,	\
+    !=, "ju", __VA_ARGS__)
+#define	assert_ju_ne(a, b, ...)	assert_cmp(uintmax_t, a, b, !=,	\
+    ==, "ju", __VA_ARGS__)
+#define	assert_ju_lt(a, b, ...)	assert_cmp(uintmax_t, a, b, <,	\
+    >=, "ju", __VA_ARGS__)
+#define	assert_ju_le(a, b, ...)	assert_cmp(uintmax_t, a, b, <=,	\
+    >, "ju", __VA_ARGS__)
+#define	assert_ju_ge(a, b, ...)	assert_cmp(uintmax_t, a, b, >=,	\
+    <, "ju", __VA_ARGS__)
+#define	assert_ju_gt(a, b, ...)	assert_cmp(uintmax_t, a, b, >,	\
+    <=, "ju", __VA_ARGS__)
 
-#define	assert_zd_eq(a, b, fmt...)	assert_cmp(ssize_t, a, b, ==,	\
-    !=, "zd", fmt)
-#define	assert_zd_ne(a, b, fmt...)	assert_cmp(ssize_t, a, b, !=,	\
-    ==, "zd", fmt)
-#define	assert_zd_lt(a, b, fmt...)	assert_cmp(ssize_t, a, b, <,	\
-    >=, "zd", fmt)
-#define	assert_zd_le(a, b, fmt...)	assert_cmp(ssize_t, a, b, <=,	\
-    >, "zd", fmt)
-#define	assert_zd_ge(a, b, fmt...)	assert_cmp(ssize_t, a, b, >=,	\
-    <, "zd", fmt)
-#define	assert_zd_gt(a, b, fmt...)	assert_cmp(ssize_t, a, b, >,	\
-    <=, "zd", fmt)
+#define	assert_zd_eq(a, b, ...)	assert_cmp(ssize_t, a, b, ==,	\
+    !=, "zd", __VA_ARGS__)
+#define	assert_zd_ne(a, b, ...)	assert_cmp(ssize_t, a, b, !=,	\
+    ==, "zd", __VA_ARGS__)
+#define	assert_zd_lt(a, b, ...)	assert_cmp(ssize_t, a, b, <,	\
+    >=, "zd", __VA_ARGS__)
+#define	assert_zd_le(a, b, ...)	assert_cmp(ssize_t, a, b, <=,	\
+    >, "zd", __VA_ARGS__)
+#define	assert_zd_ge(a, b, ...)	assert_cmp(ssize_t, a, b, >=,	\
+    <, "zd", __VA_ARGS__)
+#define	assert_zd_gt(a, b, ...)	assert_cmp(ssize_t, a, b, >,	\
+    <=, "zd", __VA_ARGS__)
 
-#define	assert_zu_eq(a, b, fmt...)	assert_cmp(size_t, a, b, ==,	\
-    !=, "zu", fmt)
-#define	assert_zu_ne(a, b, fmt...)	assert_cmp(size_t, a, b, !=,	\
-    ==, "zu", fmt)
-#define	assert_zu_lt(a, b, fmt...)	assert_cmp(size_t, a, b, <,	\
-    >=, "zu", fmt)
-#define	assert_zu_le(a, b, fmt...)	assert_cmp(size_t, a, b, <=,	\
-    >, "zu", fmt)
-#define	assert_zu_ge(a, b, fmt...)	assert_cmp(size_t, a, b, >=,	\
-    <, "zu", fmt)
-#define	assert_zu_gt(a, b, fmt...)	assert_cmp(size_t, a, b, >,	\
-    <=, "zu", fmt)
+#define	assert_zu_eq(a, b, ...)	assert_cmp(size_t, a, b, ==,	\
+    !=, "zu", __VA_ARGS__)
+#define	assert_zu_ne(a, b, ...)	assert_cmp(size_t, a, b, !=,	\
+    ==, "zu", __VA_ARGS__)
+#define	assert_zu_lt(a, b, ...)	assert_cmp(size_t, a, b, <,	\
+    >=, "zu", __VA_ARGS__)
+#define	assert_zu_le(a, b, ...)	assert_cmp(size_t, a, b, <=,	\
+    >, "zu", __VA_ARGS__)
+#define	assert_zu_ge(a, b, ...)	assert_cmp(size_t, a, b, >=,	\
+    <, "zu", __VA_ARGS__)
+#define	assert_zu_gt(a, b, ...)	assert_cmp(size_t, a, b, >,	\
+    <=, "zu", __VA_ARGS__)
 
-#define	assert_d32_eq(a, b, fmt...)	assert_cmp(int32_t, a, b, ==,	\
-    !=, PRId32, fmt)
-#define	assert_d32_ne(a, b, fmt...)	assert_cmp(int32_t, a, b, !=,	\
-    ==, PRId32, fmt)
-#define	assert_d32_lt(a, b, fmt...)	assert_cmp(int32_t, a, b, <,	\
-    >=, PRId32, fmt)
-#define	assert_d32_le(a, b, fmt...)	assert_cmp(int32_t, a, b, <=,	\
-    >, PRId32, fmt)
-#define	assert_d32_ge(a, b, fmt...)	assert_cmp(int32_t, a, b, >=,	\
-    <, PRId32, fmt)
-#define	assert_d32_gt(a, b, fmt...)	assert_cmp(int32_t, a, b, >,	\
-    <=, PRId32, fmt)
+#define	assert_d32_eq(a, b, ...)	assert_cmp(int32_t, a, b, ==,	\
+    !=, PRId32, __VA_ARGS__)
+#define	assert_d32_ne(a, b, ...)	assert_cmp(int32_t, a, b, !=,	\
+    ==, PRId32, __VA_ARGS__)
+#define	assert_d32_lt(a, b, ...)	assert_cmp(int32_t, a, b, <,	\
+    >=, PRId32, __VA_ARGS__)
+#define	assert_d32_le(a, b, ...)	assert_cmp(int32_t, a, b, <=,	\
+    >, PRId32, __VA_ARGS__)
+#define	assert_d32_ge(a, b, ...)	assert_cmp(int32_t, a, b, >=,	\
+    <, PRId32, __VA_ARGS__)
+#define	assert_d32_gt(a, b, ...)	assert_cmp(int32_t, a, b, >,	\
+    <=, PRId32, __VA_ARGS__)
 
-#define	assert_u32_eq(a, b, fmt...)	assert_cmp(uint32_t, a, b, ==,	\
-    !=, PRIu32, fmt)
-#define	assert_u32_ne(a, b, fmt...)	assert_cmp(uint32_t, a, b, !=,	\
-    ==, PRIu32, fmt)
-#define	assert_u32_lt(a, b, fmt...)	assert_cmp(uint32_t, a, b, <,	\
-    >=, PRIu32, fmt)
-#define	assert_u32_le(a, b, fmt...)	assert_cmp(uint32_t, a, b, <=,	\
-    >, PRIu32, fmt)
-#define	assert_u32_ge(a, b, fmt...)	assert_cmp(uint32_t, a, b, >=,	\
-    <, PRIu32, fmt)
-#define	assert_u32_gt(a, b, fmt...)	assert_cmp(uint32_t, a, b, >,	\
-    <=, PRIu32, fmt)
+#define	assert_u32_eq(a, b, ...)	assert_cmp(uint32_t, a, b, ==,	\
+    !=, PRIu32, __VA_ARGS__)
+#define	assert_u32_ne(a, b, ...)	assert_cmp(uint32_t, a, b, !=,	\
+    ==, PRIu32, __VA_ARGS__)
+#define	assert_u32_lt(a, b, ...)	assert_cmp(uint32_t, a, b, <,	\
+    >=, PRIu32, __VA_ARGS__)
+#define	assert_u32_le(a, b, ...)	assert_cmp(uint32_t, a, b, <=,	\
+    >, PRIu32, __VA_ARGS__)
+#define	assert_u32_ge(a, b, ...)	assert_cmp(uint32_t, a, b, >=,	\
+    <, PRIu32, __VA_ARGS__)
+#define	assert_u32_gt(a, b, ...)	assert_cmp(uint32_t, a, b, >,	\
+    <=, PRIu32, __VA_ARGS__)
 
-#define	assert_d64_eq(a, b, fmt...)	assert_cmp(int64_t, a, b, ==,	\
-    !=, PRId64, fmt)
-#define	assert_d64_ne(a, b, fmt...)	assert_cmp(int64_t, a, b, !=,	\
-    ==, PRId64, fmt)
-#define	assert_d64_lt(a, b, fmt...)	assert_cmp(int64_t, a, b, <,	\
-    >=, PRId64, fmt)
-#define	assert_d64_le(a, b, fmt...)	assert_cmp(int64_t, a, b, <=,	\
-    >, PRId64, fmt)
-#define	assert_d64_ge(a, b, fmt...)	assert_cmp(int64_t, a, b, >=,	\
-    <, PRId64, fmt)
-#define	assert_d64_gt(a, b, fmt...)	assert_cmp(int64_t, a, b, >,	\
-    <=, PRId64, fmt)
+#define	assert_d64_eq(a, b, ...)	assert_cmp(int64_t, a, b, ==,	\
+    !=, PRId64, __VA_ARGS__)
+#define	assert_d64_ne(a, b, ...)	assert_cmp(int64_t, a, b, !=,	\
+    ==, PRId64, __VA_ARGS__)
+#define	assert_d64_lt(a, b, ...)	assert_cmp(int64_t, a, b, <,	\
+    >=, PRId64, __VA_ARGS__)
+#define	assert_d64_le(a, b, ...)	assert_cmp(int64_t, a, b, <=,	\
+    >, PRId64, __VA_ARGS__)
+#define	assert_d64_ge(a, b, ...)	assert_cmp(int64_t, a, b, >=,	\
+    <, PRId64, __VA_ARGS__)
+#define	assert_d64_gt(a, b, ...)	assert_cmp(int64_t, a, b, >,	\
+    <=, PRId64, __VA_ARGS__)
 
-#define	assert_u64_eq(a, b, fmt...)	assert_cmp(uint64_t, a, b, ==,	\
-    !=, PRIu64, fmt)
-#define	assert_u64_ne(a, b, fmt...)	assert_cmp(uint64_t, a, b, !=,	\
-    ==, PRIu64, fmt)
-#define	assert_u64_lt(a, b, fmt...)	assert_cmp(uint64_t, a, b, <,	\
-    >=, PRIu64, fmt)
-#define	assert_u64_le(a, b, fmt...)	assert_cmp(uint64_t, a, b, <=,	\
-    >, PRIu64, fmt)
-#define	assert_u64_ge(a, b, fmt...)	assert_cmp(uint64_t, a, b, >=,	\
-    <, PRIu64, fmt)
-#define	assert_u64_gt(a, b, fmt...)	assert_cmp(uint64_t, a, b, >,	\
-    <=, PRIu64, fmt)
+#define	assert_u64_eq(a, b, ...)	assert_cmp(uint64_t, a, b, ==,	\
+    !=, PRIu64, __VA_ARGS__)
+#define	assert_u64_ne(a, b, ...)	assert_cmp(uint64_t, a, b, !=,	\
+    ==, PRIu64, __VA_ARGS__)
+#define	assert_u64_lt(a, b, ...)	assert_cmp(uint64_t, a, b, <,	\
+    >=, PRIu64, __VA_ARGS__)
+#define	assert_u64_le(a, b, ...)	assert_cmp(uint64_t, a, b, <=,	\
+    >, PRIu64, __VA_ARGS__)
+#define	assert_u64_ge(a, b, ...)	assert_cmp(uint64_t, a, b, >=,	\
+    <, PRIu64, __VA_ARGS__)
+#define	assert_u64_gt(a, b, ...)	assert_cmp(uint64_t, a, b, >,	\
+    <=, PRIu64, __VA_ARGS__)
 
-#define	assert_b_eq(a, b, fmt...) do {					\
+#define	assert_b_eq(a, b, ...) do {					\
 	bool a_ = (a);							\
 	bool b_ = (b);							\
 	if (!(a_ == b_)) {						\
@@ -222,11 +222,11 @@
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_ ? "true" : "false",			\
 		    b_ ? "true" : "false");				\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);	\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_b_ne(a, b, fmt...) do {					\
+#define	assert_b_ne(a, b, ...) do {					\
 	bool a_ = (a);							\
 	bool b_ = (b);							\
 	if (!(a_ != b_)) {						\
@@ -238,14 +238,14 @@
 		    __func__, __FILE__, __LINE__,			\
 		    #a, #b, a_ ? "true" : "false",			\
 		    b_ ? "true" : "false");				\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);	\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_true(a, fmt...)	assert_b_eq(a, true, fmt)
-#define	assert_false(a, fmt...)	assert_b_eq(a, false, fmt)
+#define	assert_true(a, ...)	assert_b_eq(a, true, __VA_ARGS__)
+#define	assert_false(a, ...)	assert_b_eq(a, false, __VA_ARGS__)
 
-#define	assert_str_eq(a, b, fmt...) do {				\
+#define	assert_str_eq(a, b, ...) do {				\
 	if (strcmp((a), (b))) {						\
 		char prefix[ASSERT_BUFSIZE];				\
 		char message[ASSERT_BUFSIZE];				\
@@ -254,11 +254,11 @@
 		    "(%s) same as (%s) --> "				\
 		    "\"%s\" differs from \"%s\": ",			\
 		    __func__, __FILE__, __LINE__, #a, #b, a, b);	\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);	\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
-#define	assert_str_ne(a, b, fmt...) do {				\
+#define	assert_str_ne(a, b, ...) do {				\
 	if (!strcmp((a), (b))) {					\
 		char prefix[ASSERT_BUFSIZE];				\
 		char message[ASSERT_BUFSIZE];				\
@@ -267,18 +267,18 @@
 		    "(%s) differs from (%s) --> "			\
 		    "\"%s\" same as \"%s\": ",				\
 		    __func__, __FILE__, __LINE__, #a, #b, a, b);	\
-		malloc_snprintf(message, sizeof(message), fmt);		\
+		malloc_snprintf(message, sizeof(message), __VA_ARGS__);	\
 		p_test_fail(prefix, message);				\
 	}								\
 } while (0)
 
-#define	assert_not_reached(fmt...) do {					\
+#define	assert_not_reached(...) do {					\
 	char prefix[ASSERT_BUFSIZE];					\
 	char message[ASSERT_BUFSIZE];					\
 	malloc_snprintf(prefix, sizeof(prefix),				\
 	    "%s:%s:%d: Unreachable code reached: ",			\
 	    __func__, __FILE__, __LINE__);				\
-	malloc_snprintf(message, sizeof(message), fmt);			\
+	malloc_snprintf(message, sizeof(message), __VA_ARGS__);		\
 	p_test_fail(prefix, message);					\
 } while (0)
 
@@ -308,8 +308,8 @@ label_test_end:								\
 	p_test_fini();							\
 }
 
-#define	test(tests...)							\
-	p_test(tests, NULL)
+#define	test(...)							\
+	p_test(__VA_ARGS__, NULL)
 
 #define	test_skip_if(e) do {						\
 	if (e) {							\
diff --git a/test/unit/util.c b/test/unit/util.c
index dc3cfe8..c11d598 100644
--- a/test/unit/util.c
+++ b/test/unit/util.c
@@ -141,8 +141,8 @@ TEST_BEGIN(test_malloc_snprintf_truncated)
 	char buf[BUFLEN];
 	int result;
 	size_t len;
-#define TEST(expected_str_untruncated, fmt...) do {			\
-	result = malloc_snprintf(buf, len, fmt);			\
+#define TEST(expected_str_untruncated, ...) do {			\
+	result = malloc_snprintf(buf, len, __VA_ARGS__);		\
 	assert_d_eq(strncmp(buf, expected_str_untruncated, len-1), 0,	\
 	    "Unexpected string inequality (\"%s\" vs \"%s\")",		\
 	    buf, expected_str_untruncated);		\
@@ -173,8 +173,8 @@ TEST_BEGIN(test_malloc_snprintf)
 #define	BUFLEN	128
 	char buf[BUFLEN];
 	int result;
-#define	TEST(expected_str, fmt...) do {					\
-	result = malloc_snprintf(buf, sizeof(buf), fmt);		\
+#define	TEST(expected_str, ...) do {					\
+	result = malloc_snprintf(buf, sizeof(buf), __VA_ARGS__);	\
 	assert_str_eq(buf, expected_str, "Unexpected output");		\
 	assert_d_eq(result, strlen(expected_str), "Unexpected result");	\
 } while (0)
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 02:01:21 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 18:01:21 +0900
Subject: [PATCH] Rename "small" local variable,
	because windows headers #define it
Message-ID: <1400662881-697-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/unit/stats.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/test/unit/stats.c b/test/unit/stats.c
index ab87b29..78c78cd 100644
--- a/test/unit/stats.c
+++ b/test/unit/stats.c
@@ -97,7 +97,7 @@ TEST_END
 TEST_BEGIN(test_stats_arenas_summary)
 {
 	unsigned arena;
-	void *small, *large;
+	void *little, *large;
 	uint64_t epoch;
 	size_t sz;
 	int expected = config_stats ? 0 : ENOENT;
@@ -108,8 +108,8 @@ TEST_BEGIN(test_stats_arenas_summary)
 	assert_d_eq(mallctl("thread.arena", NULL, NULL, &arena, sizeof(arena)),
 	    0, "Unexpected mallctl() failure");
 
-	small = mallocx(SMALL_MAXCLASS, 0);
-	assert_ptr_not_null(small, "Unexpected mallocx() failure");
+	little = mallocx(SMALL_MAXCLASS, 0);
+	assert_ptr_not_null(little, "Unexpected mallocx() failure");
 	large = mallocx(arena_maxclass, 0);
 	assert_ptr_not_null(large, "Unexpected mallocx() failure");
 
@@ -137,7 +137,7 @@ TEST_BEGIN(test_stats_arenas_summary)
 		    "nmadvise should be no greater than purged");
 	}
 
-	dallocx(small, 0);
+	dallocx(little, 0);
 	dallocx(large, 0);
 }
 TEST_END
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 02:06:14 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 18:06:14 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
Message-ID: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

test/integration/aligned_alloc.c needs it.
---
 include/jemalloc/internal/jemalloc_internal.h.in     | 1 -
 include/jemalloc/internal/jemalloc_internal_macros.h | 4 ++++
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
index c9462e5..d9bfadf 100644
--- a/include/jemalloc/internal/jemalloc_internal.h.in
+++ b/include/jemalloc/internal/jemalloc_internal.h.in
@@ -46,7 +46,6 @@
 typedef intptr_t ssize_t;
 #  define PATH_MAX 1024
 #  define STDERR_FILENO 2
-#  define __func__ __FUNCTION__
 /* Disable warnings about deprecated system functions */
 #  pragma warning(disable: 4996)
 #else
diff --git a/include/jemalloc/internal/jemalloc_internal_macros.h b/include/jemalloc/internal/jemalloc_internal_macros.h
index 4e23923..bb81e99 100644
--- a/include/jemalloc/internal/jemalloc_internal_macros.h
+++ b/include/jemalloc/internal/jemalloc_internal_macros.h
@@ -49,3 +49,7 @@
 #ifndef JEMALLOC_HAS_RESTRICT
 #  define restrict
 #endif
+
+#ifdef _MSC_VER
+#  define __func__ __FUNCTION__
+#endif
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 02:13:21 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 18:13:21 +0900
Subject: [PATCH] Avoid pointer arithmetic on void* in
	test/integration/rallocx.c
Message-ID: <1400663601-1919-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/integration/rallocx.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/test/integration/rallocx.c b/test/integration/rallocx.c
index ee21aed..7acb211 100644
--- a/test/integration/rallocx.c
+++ b/test/integration/rallocx.c
@@ -95,7 +95,7 @@ TEST_BEGIN(test_zero)
 				    "Expected zeroed memory");
 			}
 			if (psz != qsz) {
-				memset(q+psz, FILL_BYTE, qsz-psz);
+				memset((char *)q+psz, FILL_BYTE, qsz-psz);
 				psz = qsz;
 			}
 			p = q;
@@ -159,8 +159,8 @@ TEST_BEGIN(test_lg_align_and_zero)
 		} else {
 			assert_false(validate_fill(q, 0, 0, MAX_VALIDATE),
 			    "Expected zeroed memory");
-			assert_false(validate_fill(q+sz-MAX_VALIDATE, 0, 0,
-			    MAX_VALIDATE), "Expected zeroed memory");
+			assert_false(validate_fill((char *)q+sz-MAX_VALIDATE,
+                            0, 0, MAX_VALIDATE), "Expected zeroed memory");
 		}
 		p = q;
 	}
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 02:42:27 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 18:42:27 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20140521094227.GA2323@glandium.org>

On Wed, May 21, 2014 at 06:06:14PM +0900, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> test/integration/aligned_alloc.c needs it.
> ---
>  include/jemalloc/internal/jemalloc_internal.h.in     | 1 -
>  include/jemalloc/internal/jemalloc_internal_macros.h | 4 ++++
>  2 files changed, 4 insertions(+), 1 deletion(-)
> 
> diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
> index c9462e5..d9bfadf 100644
> --- a/include/jemalloc/internal/jemalloc_internal.h.in
> +++ b/include/jemalloc/internal/jemalloc_internal.h.in
> @@ -46,7 +46,6 @@
>  typedef intptr_t ssize_t;

This (ssize_t) is also needed in another integration test. It seems
convoluted to move that in _macros.h.

Jason, how do you think I should handle this?

Relatedly, with the 10 patches I just sent (one of which is in the
moderation queue because the patch is big), I have two remaining
build failures on tests with MSVC:
- test/unit/math.c fails to build because of the lack of INFINITY.
 I haven't found a replacement definition that works in a const array.
- test/unit/mq.c fails to build because of the use of
  nanosleep/timespec. I haven't looked for a replacement yet.

As for running tests, the following unit tests crash:
- ckh
- rtree
- tsd

They all crash in malloc_tsd_malloc, which is fishy.

In integration tests, thread_arena, posix_memalign and aligned_alloc
fail with assertions. Haven't looked further.

Cheers,

Mike

From mh+jemalloc at glandium.org  Wed May 21 03:04:20 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 19:04:20 +0900
Subject: [PATCH] Fix malloc_usable_size definition on Android
Message-ID: <1400666660-3592-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/configure.ac b/configure.ac
index 57015d1..0f0d9a4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -286,7 +286,14 @@ case "${host}" in
 	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
 	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
 	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
-	JEMALLOC_USABLE_SIZE_CONST=""
+	dnl Android's libc defines malloc_usable_size with a const void*
+	dnl argument.
+	case "${host}" in
+	  *android*) ;;
+          *)
+		JEMALLOC_USABLE_SIZE_CONST=""
+		;;
+	esac
 	default_munmap="0"
 	;;
   *-*-netbsd*)
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 03:51:33 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 19:51:33 +0900
Subject: [PATCH] Fix malloc_usable_size definition on Android
In-Reply-To: <1400666660-3592-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400666660-3592-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20140521105133.GA4225@glandium.org>

On Wed, May 21, 2014 at 07:04:20PM +0900, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
>  configure.ac | 9 ++++++++-
>  1 file changed, 8 insertions(+), 1 deletion(-)
> 
> diff --git a/configure.ac b/configure.ac
> index 57015d1..0f0d9a4 100644
> --- a/configure.ac
> +++ b/configure.ac
> @@ -286,7 +286,14 @@ case "${host}" in
>  	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
>  	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
>  	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
> -	JEMALLOC_USABLE_SIZE_CONST=""
> +	dnl Android's libc defines malloc_usable_size with a const void*
> +	dnl argument.
> +	case "${host}" in
> +	  *android*) ;;
> +          *)
> +		JEMALLOC_USABLE_SIZE_CONST=""
> +		;;
> +	esac

This patch is unfortunately wrong, because there was a definition with
void* before Kitkat.

https://github.com/android/platform_bionic/commit/25a87f7641f066437d15c6d3148d08a6ab9be231

Mike

From mh+jemalloc at glandium.org  Wed May 21 06:37:26 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 22:37:26 +0900
Subject: [PATCH] Use a configure test to detect the form of malloc_usable_size
	in malloc.h
Message-ID: <1400679446-29574-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index 57015d1..0a3d8a8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -258,7 +258,6 @@ dnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the
 dnl definitions need to be seen before any headers are included, which is a pain
 dnl to make happen otherwise.
 default_munmap="1"
-JEMALLOC_USABLE_SIZE_CONST="const"
 case "${host}" in
   *-*-darwin*)
 	CFLAGS="$CFLAGS"
@@ -286,7 +285,6 @@ case "${host}" in
 	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
 	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
 	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
-	JEMALLOC_USABLE_SIZE_CONST=""
 	default_munmap="0"
 	;;
   *-*-netbsd*)
@@ -351,6 +349,22 @@ case "${host}" in
 	abi="elf"
 	;;
 esac
+
+JEMALLOC_USABLE_SIZE_CONST=
+AC_CHECK_HEADERS([malloc.h], [
+  AC_MSG_CHECKING([whether system malloc_usable_size definition uses const argument])
+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+    [#include <malloc.h>
+     #include <stddef.h>
+    size_t malloc_usable_size(const void *ptr);
+    ],
+    [])],[
+                JEMALLOC_USABLE_SIZE_CONST=const
+                AC_MSG_RESULT([yes])
+         ],[
+                AC_MSG_RESULT([no])
+         ])
+])
 AC_DEFINE_UNQUOTED([JEMALLOC_USABLE_SIZE_CONST], [$JEMALLOC_USABLE_SIZE_CONST])
 AC_SUBST([abi])
 AC_SUBST([RPATH])
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 21 06:40:58 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 22:40:58 +0900
Subject: [PATCH] Use a configure test to detect the form of
	malloc_usable_size in malloc.h
In-Reply-To: <1400679446-29574-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400679446-29574-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20140521134058.GA29640@glandium.org>

On Wed, May 21, 2014 at 10:37:26PM +0900, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
>  configure.ac | 18 ++++++++++++++++--
>  1 file changed, 16 insertions(+), 2 deletions(-)
> 
> diff --git a/configure.ac b/configure.ac
> index 57015d1..0a3d8a8 100644
> --- a/configure.ac
> +++ b/configure.ac
> @@ -258,7 +258,6 @@ dnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the
>  dnl definitions need to be seen before any headers are included, which is a pain
>  dnl to make happen otherwise.
>  default_munmap="1"
> -JEMALLOC_USABLE_SIZE_CONST="const"
>  case "${host}" in
>    *-*-darwin*)
>  	CFLAGS="$CFLAGS"
> @@ -286,7 +285,6 @@ case "${host}" in
>  	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
>  	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
>  	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
> -	JEMALLOC_USABLE_SIZE_CONST=""
>  	default_munmap="0"
>  	;;
>    *-*-netbsd*)
> @@ -351,6 +349,22 @@ case "${host}" in
>  	abi="elf"
>  	;;
>  esac
> +
> +JEMALLOC_USABLE_SIZE_CONST=
> +AC_CHECK_HEADERS([malloc.h], [
> +  AC_MSG_CHECKING([whether system malloc_usable_size definition uses const argument])

Note, this sentence is wrong on windows, where there is no system
malloc_usable_size, but where the test *does* run and return yes.

Also, it might be better to check independently of whether malloc.h is
available or not.

Tell me if you want me to fix those.

Mike

From mh+jemalloc at glandium.org  Wed May 21 00:34:02 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 21 May 2014 16:34:02 +0900
Subject: [PATCH] Use ULL prefix instead of LLU for unsigned long longs
Message-ID: <1400657642-20648-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

MSVC only supports the former.
---
 include/jemalloc/internal/hash.h |    8 +-
 test/src/SFMT.c                  |    2 +-
 test/unit/SFMT.c                 | 2000 +++++++++++++++++++-------------------
 3 files changed, 1005 insertions(+), 1005 deletions(-)

diff --git a/include/jemalloc/internal/hash.h b/include/jemalloc/internal/hash.h
index c7183ed..f2b3a16 100644
--- a/include/jemalloc/internal/hash.h
+++ b/include/jemalloc/internal/hash.h
@@ -76,9 +76,9 @@ hash_fmix_64(uint64_t k)
 {
 
 	k ^= k >> 33;
-	k *= QU(0xff51afd7ed558ccdLLU);
+	k *= QU(0xff51afd7ed558ccdULL);
 	k ^= k >> 33;
-	k *= QU(0xc4ceb9fe1a85ec53LLU);
+	k *= QU(0xc4ceb9fe1a85ec53ULL);
 	k ^= k >> 33;
 
 	return (k);
@@ -247,8 +247,8 @@ hash_x64_128(const void *key, const int len, const uint32_t seed,
 	uint64_t h1 = seed;
 	uint64_t h2 = seed;
 
-	const uint64_t c1 = QU(0x87c37b91114253d5LLU);
-	const uint64_t c2 = QU(0x4cf5ad432745937fLLU);
+	const uint64_t c1 = QU(0x87c37b91114253d5ULL);
+	const uint64_t c2 = QU(0x4cf5ad432745937fULL);
 
 	/* body */
 	{
diff --git a/test/src/SFMT.c b/test/src/SFMT.c
index e6f8dee..d2cc9d1 100644
--- a/test/src/SFMT.c
+++ b/test/src/SFMT.c
@@ -511,7 +511,7 @@ uint64_t gen_rand64(sfmt_t *ctx) {
 uint64_t gen_rand64_range(sfmt_t *ctx, uint64_t limit) {
     uint64_t ret, above;
 
-    above = 0xffffffffffffffffLLU - (0xffffffffffffffffLLU  % limit);
+    above = 0xffffffffffffffffULL - (0xffffffffffffffffULL  % limit);
     while (1) {
         ret = gen_rand64(ctx);
         if (ret < above) {
diff --git a/test/unit/SFMT.c b/test/unit/SFMT.c
index c57bd68..0ad9c23 100644
--- a/test/unit/SFMT.c
+++ b/test/unit/SFMT.c
@@ -445,1008 +445,1008 @@ static const uint32_t init_by_array_32_expected[] = {
 	2750138839U, 3518055702U,  733072558U, 4169325400U,  788493625U
 };
 static const uint64_t init_gen_rand_64_expected[] = {
-	QU(16924766246869039260LLU), QU( 8201438687333352714LLU),
-	QU( 2265290287015001750LLU), QU(18397264611805473832LLU),
-	QU( 3375255223302384358LLU), QU( 6345559975416828796LLU),
-	QU(18229739242790328073LLU), QU( 7596792742098800905LLU),
-	QU(  255338647169685981LLU), QU( 2052747240048610300LLU),
-	QU(18328151576097299343LLU), QU(12472905421133796567LLU),
-	QU(11315245349717600863LLU), QU(16594110197775871209LLU),
-	QU(15708751964632456450LLU), QU(10452031272054632535LLU),
-	QU(11097646720811454386LLU), QU( 4556090668445745441LLU),
-	QU(17116187693090663106LLU), QU(14931526836144510645LLU),
-	QU( 9190752218020552591LLU), QU( 9625800285771901401LLU),
-	QU(13995141077659972832LLU), QU( 5194209094927829625LLU),
-	QU( 4156788379151063303LLU), QU( 8523452593770139494LLU),
-	QU(14082382103049296727LLU), QU( 2462601863986088483LLU),
-	QU( 3030583461592840678LLU), QU( 5221622077872827681LLU),
-	QU( 3084210671228981236LLU), QU(13956758381389953823LLU),
-	QU(13503889856213423831LLU), QU(15696904024189836170LLU),
-	QU( 4612584152877036206LLU), QU( 6231135538447867881LLU),
-	QU(10172457294158869468LLU), QU( 6452258628466708150LLU),
-	QU(14044432824917330221LLU), QU(  370168364480044279LLU),
-	QU(10102144686427193359LLU), QU(  667870489994776076LLU),
-	QU( 2732271956925885858LLU), QU(18027788905977284151LLU),
-	QU(15009842788582923859LLU), QU( 7136357960180199542LLU),
-	QU(15901736243475578127LLU), QU(16951293785352615701LLU),
-	QU(10551492125243691632LLU), QU(17668869969146434804LLU),
-	QU(13646002971174390445LLU), QU( 9804471050759613248LLU),
-	QU( 5511670439655935493LLU), QU(18103342091070400926LLU),
-	QU(17224512747665137533LLU), QU(15534627482992618168LLU),
-	QU( 1423813266186582647LLU), QU(15821176807932930024LLU),
-	QU(   30323369733607156LLU), QU(11599382494723479403LLU),
-	QU(  653856076586810062LLU), QU( 3176437395144899659LLU),
-	QU(14028076268147963917LLU), QU(16156398271809666195LLU),
-	QU( 3166955484848201676LLU), QU( 5746805620136919390LLU),
-	QU(17297845208891256593LLU), QU(11691653183226428483LLU),
-	QU(17900026146506981577LLU), QU(15387382115755971042LLU),
-	QU(16923567681040845943LLU), QU( 8039057517199388606LLU),
-	QU(11748409241468629263LLU), QU(  794358245539076095LLU),
-	QU(13438501964693401242LLU), QU(14036803236515618962LLU),
-	QU( 5252311215205424721LLU), QU(17806589612915509081LLU),
-	QU( 6802767092397596006LLU), QU(14212120431184557140LLU),
-	QU( 1072951366761385712LLU), QU(13098491780722836296LLU),
-	QU( 9466676828710797353LLU), QU(12673056849042830081LLU),
-	QU(12763726623645357580LLU), QU(16468961652999309493LLU),
-	QU(15305979875636438926LLU), QU(17444713151223449734LLU),
-	QU( 5692214267627883674LLU), QU(13049589139196151505LLU),
-	QU(  880115207831670745LLU), QU( 1776529075789695498LLU),
-	QU(16695225897801466485LLU), QU(10666901778795346845LLU),
-	QU( 6164389346722833869LLU), QU( 2863817793264300475LLU),
-	QU( 9464049921886304754LLU), QU( 3993566636740015468LLU),
-	QU( 9983749692528514136LLU), QU(16375286075057755211LLU),
-	QU(16042643417005440820LLU), QU(11445419662923489877LLU),
-	QU( 7999038846885158836LLU), QU( 6721913661721511535LLU),
-	QU( 5363052654139357320LLU), QU( 1817788761173584205LLU),
-	QU(13290974386445856444LLU), QU( 4650350818937984680LLU),
-	QU( 8219183528102484836LLU), QU( 1569862923500819899LLU),
-	QU( 4189359732136641860LLU), QU(14202822961683148583LLU),
-	QU( 4457498315309429058LLU), QU(13089067387019074834LLU),
-	QU(11075517153328927293LLU), QU(10277016248336668389LLU),
-	QU( 7070509725324401122LLU), QU(17808892017780289380LLU),
-	QU(13143367339909287349LLU), QU( 1377743745360085151LLU),
-	QU( 5749341807421286485LLU), QU(14832814616770931325LLU),
-	QU( 7688820635324359492LLU), QU(10960474011539770045LLU),
-	QU(   81970066653179790LLU), QU(12619476072607878022LLU),
-	QU( 4419566616271201744LLU), QU(15147917311750568503LLU),
-	QU( 5549739182852706345LLU), QU( 7308198397975204770LLU),
-	QU(13580425496671289278LLU), QU(17070764785210130301LLU),
-	QU( 8202832846285604405LLU), QU( 6873046287640887249LLU),
-	QU( 6927424434308206114LLU), QU( 6139014645937224874LLU),
-	QU(10290373645978487639LLU), QU(15904261291701523804LLU),
-	QU( 9628743442057826883LLU), QU(18383429096255546714LLU),
-	QU( 4977413265753686967LLU), QU( 7714317492425012869LLU),
-	QU( 9025232586309926193LLU), QU(14627338359776709107LLU),
-	QU(14759849896467790763LLU), QU(10931129435864423252LLU),
-	QU( 4588456988775014359LLU), QU(10699388531797056724LLU),
-	QU(  468652268869238792LLU), QU( 5755943035328078086LLU),
-	QU( 2102437379988580216LLU), QU( 9986312786506674028LLU),
-	QU( 2654207180040945604LLU), QU( 8726634790559960062LLU),
-	QU(  100497234871808137LLU), QU( 2800137176951425819LLU),
-	QU( 6076627612918553487LLU), QU( 5780186919186152796LLU),
-	QU( 8179183595769929098LLU), QU( 6009426283716221169LLU),
-	QU( 2796662551397449358LLU), QU( 1756961367041986764LLU),
-	QU( 6972897917355606205LLU), QU(14524774345368968243LLU),
-	QU( 2773529684745706940LLU), QU( 4853632376213075959LLU),
-	QU( 4198177923731358102LLU), QU( 8271224913084139776LLU),
-	QU( 2741753121611092226LLU), QU(16782366145996731181LLU),
-	QU(15426125238972640790LLU), QU(13595497100671260342LLU),
-	QU( 3173531022836259898LLU), QU( 6573264560319511662LLU),
-	QU(18041111951511157441LLU), QU( 2351433581833135952LLU),
-	QU( 3113255578908173487LLU), QU( 1739371330877858784LLU),
-	QU(16046126562789165480LLU), QU( 8072101652214192925LLU),
-	QU(15267091584090664910LLU), QU( 9309579200403648940LLU),
-	QU( 5218892439752408722LLU), QU(14492477246004337115LLU),
-	QU(17431037586679770619LLU), QU( 7385248135963250480LLU),
-	QU( 9580144956565560660LLU), QU( 4919546228040008720LLU),
-	QU(15261542469145035584LLU), QU(18233297270822253102LLU),
-	QU( 5453248417992302857LLU), QU( 9309519155931460285LLU),
-	QU(10342813012345291756LLU), QU(15676085186784762381LLU),
-	QU(15912092950691300645LLU), QU( 9371053121499003195LLU),
-	QU( 9897186478226866746LLU), QU(14061858287188196327LLU),
-	QU(  122575971620788119LLU), QU(12146750969116317754LLU),
-	QU( 4438317272813245201LLU), QU( 8332576791009527119LLU),
-	QU(13907785691786542057LLU), QU(10374194887283287467LLU),
-	QU( 2098798755649059566LLU), QU( 3416235197748288894LLU),
-	QU( 8688269957320773484LLU), QU( 7503964602397371571LLU),
-	QU(16724977015147478236LLU), QU( 9461512855439858184LLU),
-	QU(13259049744534534727LLU), QU( 3583094952542899294LLU),
-	QU( 8764245731305528292LLU), QU(13240823595462088985LLU),
-	QU(13716141617617910448LLU), QU(18114969519935960955LLU),
-	QU( 2297553615798302206LLU), QU( 4585521442944663362LLU),
-	QU(17776858680630198686LLU), QU( 4685873229192163363LLU),
-	QU(  152558080671135627LLU), QU(15424900540842670088LLU),
-	QU(13229630297130024108LLU), QU(17530268788245718717LLU),
-	QU(16675633913065714144LLU), QU( 3158912717897568068LLU),
-	QU(15399132185380087288LLU), QU( 7401418744515677872LLU),
-	QU(13135412922344398535LLU), QU( 6385314346100509511LLU),
-	QU(13962867001134161139LLU), QU(10272780155442671999LLU),
-	QU(12894856086597769142LLU), QU(13340877795287554994LLU),
-	QU(12913630602094607396LLU), QU(12543167911119793857LLU),
-	QU(17343570372251873096LLU), QU(10959487764494150545LLU),
-	QU( 6966737953093821128LLU), QU(13780699135496988601LLU),
-	QU( 4405070719380142046LLU), QU(14923788365607284982LLU),
-	QU( 2869487678905148380LLU), QU( 6416272754197188403LLU),
-	QU(15017380475943612591LLU), QU( 1995636220918429487LLU),
-	QU( 3402016804620122716LLU), QU(15800188663407057080LLU),
-	QU(11362369990390932882LLU), QU(15262183501637986147LLU),
-	QU(10239175385387371494LLU), QU( 9352042420365748334LLU),
-	QU( 1682457034285119875LLU), QU( 1724710651376289644LLU),
-	QU( 2038157098893817966LLU), QU( 9897825558324608773LLU),
-	QU( 1477666236519164736LLU), QU(16835397314511233640LLU),
-	QU(10370866327005346508LLU), QU(10157504370660621982LLU),
-	QU(12113904045335882069LLU), QU(13326444439742783008LLU),
-	QU(11302769043000765804LLU), QU(13594979923955228484LLU),
-	QU(11779351762613475968LLU), QU( 3786101619539298383LLU),
-	QU( 8021122969180846063LLU), QU(15745904401162500495LLU),
-	QU(10762168465993897267LLU), QU(13552058957896319026LLU),
-	QU(11200228655252462013LLU), QU( 5035370357337441226LLU),
-	QU( 7593918984545500013LLU), QU( 5418554918361528700LLU),
-	QU( 4858270799405446371LLU), QU( 9974659566876282544LLU),
-	QU(18227595922273957859LLU), QU( 2772778443635656220LLU),
-	QU(14285143053182085385LLU), QU( 9939700992429600469LLU),
-	QU(12756185904545598068LLU), QU( 2020783375367345262LLU),
-	QU(   57026775058331227LLU), QU(  950827867930065454LLU),
-	QU( 6602279670145371217LLU), QU( 2291171535443566929LLU),
-	QU( 5832380724425010313LLU), QU( 1220343904715982285LLU),
-	QU(17045542598598037633LLU), QU(15460481779702820971LLU),
-	QU(13948388779949365130LLU), QU(13975040175430829518LLU),
-	QU(17477538238425541763LLU), QU(11104663041851745725LLU),
-	QU(15860992957141157587LLU), QU(14529434633012950138LLU),
-	QU( 2504838019075394203LLU), QU( 7512113882611121886LLU),
-	QU( 4859973559980886617LLU), QU( 1258601555703250219LLU),
-	QU(15594548157514316394LLU), QU( 4516730171963773048LLU),
-	QU(11380103193905031983LLU), QU( 6809282239982353344LLU),
-	QU(18045256930420065002LLU), QU( 2453702683108791859LLU),
-	QU(  977214582986981460LLU), QU( 2006410402232713466LLU),
-	QU( 6192236267216378358LLU), QU( 3429468402195675253LLU),
-	QU(18146933153017348921LLU), QU(17369978576367231139LLU),
-	QU( 1246940717230386603LLU), QU(11335758870083327110LLU),
-	QU(14166488801730353682LLU), QU( 9008573127269635732LLU),
-	QU(10776025389820643815LLU), QU(15087605441903942962LLU),
-	QU( 1359542462712147922LLU), QU(13898874411226454206LLU),
-	QU(17911176066536804411LLU), QU( 9435590428600085274LLU),
-	QU(  294488509967864007LLU), QU( 8890111397567922046LLU),
-	QU( 7987823476034328778LLU), QU(13263827582440967651LLU),
-	QU( 7503774813106751573LLU), QU(14974747296185646837LLU),
-	QU( 8504765037032103375LLU), QU(17340303357444536213LLU),
-	QU( 7704610912964485743LLU), QU( 8107533670327205061LLU),
-	QU( 9062969835083315985LLU), QU(16968963142126734184LLU),
-	QU(12958041214190810180LLU), QU( 2720170147759570200LLU),
-	QU( 2986358963942189566LLU), QU(14884226322219356580LLU),
-	QU(  286224325144368520LLU), QU(11313800433154279797LLU),
-	QU(18366849528439673248LLU), QU(17899725929482368789LLU),
-	QU( 3730004284609106799LLU), QU( 1654474302052767205LLU),
-	QU( 5006698007047077032LLU), QU( 8196893913601182838LLU),
-	QU(15214541774425211640LLU), QU(17391346045606626073LLU),
-	QU( 8369003584076969089LLU), QU( 3939046733368550293LLU),
-	QU(10178639720308707785LLU), QU( 2180248669304388697LLU),
-	QU(   62894391300126322LLU), QU( 9205708961736223191LLU),
-	QU( 6837431058165360438LLU), QU( 3150743890848308214LLU),
-	QU(17849330658111464583LLU), QU(12214815643135450865LLU),
-	QU(13410713840519603402LLU), QU( 3200778126692046802LLU),
-	QU(13354780043041779313LLU), QU(  800850022756886036LLU),
-	QU(15660052933953067433LLU), QU( 6572823544154375676LLU),
-	QU(11030281857015819266LLU), QU(12682241941471433835LLU),
-	QU(11654136407300274693LLU), QU( 4517795492388641109LLU),
-	QU( 9757017371504524244LLU), QU(17833043400781889277LLU),
-	QU(12685085201747792227LLU), QU(10408057728835019573LLU),
-	QU(   98370418513455221LLU), QU( 6732663555696848598LLU),
-	QU(13248530959948529780LLU), QU( 3530441401230622826LLU),
-	QU(18188251992895660615LLU), QU( 1847918354186383756LLU),
-	QU( 1127392190402660921LLU), QU(11293734643143819463LLU),
-	QU( 3015506344578682982LLU), QU(13852645444071153329LLU),
-	QU( 2121359659091349142LLU), QU( 1294604376116677694LLU),
-	QU( 5616576231286352318LLU), QU( 7112502442954235625LLU),
-	QU(11676228199551561689LLU), QU(12925182803007305359LLU),
-	QU( 7852375518160493082LLU), QU( 1136513130539296154LLU),
-	QU( 5636923900916593195LLU), QU( 3221077517612607747LLU),
-	QU(17784790465798152513LLU), QU( 3554210049056995938LLU),
-	QU(17476839685878225874LLU), QU( 3206836372585575732LLU),
-	QU( 2765333945644823430LLU), QU(10080070903718799528LLU),
-	QU( 5412370818878286353LLU), QU( 9689685887726257728LLU),
-	QU( 8236117509123533998LLU), QU( 1951139137165040214LLU),
-	QU( 4492205209227980349LLU), QU(16541291230861602967LLU),
-	QU( 1424371548301437940LLU), QU( 9117562079669206794LLU),
-	QU(14374681563251691625LLU), QU(13873164030199921303LLU),
-	QU( 6680317946770936731LLU), QU(15586334026918276214LLU),
-	QU(10896213950976109802LLU), QU( 9506261949596413689LLU),
-	QU( 9903949574308040616LLU), QU( 6038397344557204470LLU),
-	QU(  174601465422373648LLU), QU(15946141191338238030LLU),
-	QU(17142225620992044937LLU), QU( 7552030283784477064LLU),
-	QU( 2947372384532947997LLU), QU(  510797021688197711LLU),
-	QU( 4962499439249363461LLU), QU(   23770320158385357LLU),
-	QU(  959774499105138124LLU), QU( 1468396011518788276LLU),
-	QU( 2015698006852312308LLU), QU( 4149400718489980136LLU),
-	QU( 5992916099522371188LLU), QU(10819182935265531076LLU),
-	QU(16189787999192351131LLU), QU(  342833961790261950LLU),
-	QU(12470830319550495336LLU), QU(18128495041912812501LLU),
-	QU( 1193600899723524337LLU), QU( 9056793666590079770LLU),
-	QU( 2154021227041669041LLU), QU( 4963570213951235735LLU),
-	QU( 4865075960209211409LLU), QU( 2097724599039942963LLU),
-	QU( 2024080278583179845LLU), QU(11527054549196576736LLU),
-	QU(10650256084182390252LLU), QU( 4808408648695766755LLU),
-	QU( 1642839215013788844LLU), QU(10607187948250398390LLU),
-	QU( 7076868166085913508LLU), QU(  730522571106887032LLU),
-	QU(12500579240208524895LLU), QU( 4484390097311355324LLU),
-	QU(15145801330700623870LLU), QU( 8055827661392944028LLU),
-	QU( 5865092976832712268LLU), QU(15159212508053625143LLU),
-	QU( 3560964582876483341LLU), QU( 4070052741344438280LLU),
-	QU( 6032585709886855634LLU), QU(15643262320904604873LLU),
-	QU( 2565119772293371111LLU), QU(  318314293065348260LLU),
-	QU(15047458749141511872LLU), QU( 7772788389811528730LLU),
-	QU( 7081187494343801976LLU), QU( 6465136009467253947LLU),
-	QU(10425940692543362069LLU), QU(  554608190318339115LLU),
-	QU(14796699860302125214LLU), QU( 1638153134431111443LLU),
-	QU(10336967447052276248LLU), QU( 8412308070396592958LLU),
-	QU( 4004557277152051226LLU), QU( 8143598997278774834LLU),
-	QU(16413323996508783221LLU), QU(13139418758033994949LLU),
-	QU( 9772709138335006667LLU), QU( 2818167159287157659LLU),
-	QU(17091740573832523669LLU), QU(14629199013130751608LLU),
-	QU(18268322711500338185LLU), QU( 8290963415675493063LLU),
-	QU( 8830864907452542588LLU), QU( 1614839084637494849LLU),
-	QU(14855358500870422231LLU), QU( 3472996748392519937LLU),
-	QU(15317151166268877716LLU), QU( 5825895018698400362LLU),
-	QU(16730208429367544129LLU), QU(10481156578141202800LLU),
-	QU( 4746166512382823750LLU), QU(12720876014472464998LLU),
-	QU( 8825177124486735972LLU), QU(13733447296837467838LLU),
-	QU( 6412293741681359625LLU), QU( 8313213138756135033LLU),
-	QU(11421481194803712517LLU), QU( 7997007691544174032LLU),
-	QU( 6812963847917605930LLU), QU( 9683091901227558641LLU),
-	QU(14703594165860324713LLU), QU( 1775476144519618309LLU),
-	QU( 2724283288516469519LLU), QU(  717642555185856868LLU),
-	QU( 8736402192215092346LLU), QU(11878800336431381021LLU),
-	QU( 4348816066017061293LLU), QU( 6115112756583631307LLU),
-	QU( 9176597239667142976LLU), QU(12615622714894259204LLU),
-	QU(10283406711301385987LLU), QU( 5111762509485379420LLU),
-	QU( 3118290051198688449LLU), QU( 7345123071632232145LLU),
-	QU( 9176423451688682359LLU), QU( 4843865456157868971LLU),
-	QU(12008036363752566088LLU), QU(12058837181919397720LLU),
-	QU( 2145073958457347366LLU), QU( 1526504881672818067LLU),
-	QU( 3488830105567134848LLU), QU(13208362960674805143LLU),
-	QU( 4077549672899572192LLU), QU( 7770995684693818365LLU),
-	QU( 1398532341546313593LLU), QU(12711859908703927840LLU),
-	QU( 1417561172594446813LLU), QU(17045191024194170604LLU),
-	QU( 4101933177604931713LLU), QU(14708428834203480320LLU),
-	QU(17447509264469407724LLU), QU(14314821973983434255LLU),
-	QU(17990472271061617265LLU), QU( 5087756685841673942LLU),
-	QU(12797820586893859939LLU), QU( 1778128952671092879LLU),
-	QU( 3535918530508665898LLU), QU( 9035729701042481301LLU),
-	QU(14808661568277079962LLU), QU(14587345077537747914LLU),
-	QU(11920080002323122708LLU), QU( 6426515805197278753LLU),
-	QU( 3295612216725984831LLU), QU(11040722532100876120LLU),
-	QU(12305952936387598754LLU), QU(16097391899742004253LLU),
-	QU( 4908537335606182208LLU), QU(12446674552196795504LLU),
-	QU(16010497855816895177LLU), QU( 9194378874788615551LLU),
-	QU( 3382957529567613384LLU), QU( 5154647600754974077LLU),
-	QU( 9801822865328396141LLU), QU( 9023662173919288143LLU),
-	QU(17623115353825147868LLU), QU( 8238115767443015816LLU),
-	QU(15811444159859002560LLU), QU( 9085612528904059661LLU),
-	QU( 6888601089398614254LLU), QU(  258252992894160189LLU),
-	QU( 6704363880792428622LLU), QU( 6114966032147235763LLU),
-	QU(11075393882690261875LLU), QU( 8797664238933620407LLU),
-	QU( 5901892006476726920LLU), QU( 5309780159285518958LLU),
-	QU(14940808387240817367LLU), QU(14642032021449656698LLU),
-	QU( 9808256672068504139LLU), QU( 3670135111380607658LLU),
-	QU(11211211097845960152LLU), QU( 1474304506716695808LLU),
-	QU(15843166204506876239LLU), QU( 7661051252471780561LLU),
-	QU(10170905502249418476LLU), QU( 7801416045582028589LLU),
-	QU( 2763981484737053050LLU), QU( 9491377905499253054LLU),
-	QU(16201395896336915095LLU), QU( 9256513756442782198LLU),
-	QU( 5411283157972456034LLU), QU( 5059433122288321676LLU),
-	QU( 4327408006721123357LLU), QU( 9278544078834433377LLU),
-	QU( 7601527110882281612LLU), QU(11848295896975505251LLU),
-	QU(12096998801094735560LLU), QU(14773480339823506413LLU),
-	QU(15586227433895802149LLU), QU(12786541257830242872LLU),
-	QU( 6904692985140503067LLU), QU( 5309011515263103959LLU),
-	QU(12105257191179371066LLU), QU(14654380212442225037LLU),
-	QU( 2556774974190695009LLU), QU( 4461297399927600261LLU),
-	QU(14888225660915118646LLU), QU(14915459341148291824LLU),
-	QU( 2738802166252327631LLU), QU( 6047155789239131512LLU),
-	QU(12920545353217010338LLU), QU(10697617257007840205LLU),
-	QU( 2751585253158203504LLU), QU(13252729159780047496LLU),
-	QU(14700326134672815469LLU), QU(14082527904374600529LLU),
-	QU(16852962273496542070LLU), QU(17446675504235853907LLU),
-	QU(15019600398527572311LLU), QU(12312781346344081551LLU),
-	QU(14524667935039810450LLU), QU( 5634005663377195738LLU),
-	QU(11375574739525000569LLU), QU( 2423665396433260040LLU),
-	QU( 5222836914796015410LLU), QU( 4397666386492647387LLU),
-	QU( 4619294441691707638LLU), QU(  665088602354770716LLU),
-	QU(13246495665281593610LLU), QU( 6564144270549729409LLU),
-	QU(10223216188145661688LLU), QU( 3961556907299230585LLU),
-	QU(11543262515492439914LLU), QU(16118031437285993790LLU),
-	QU( 7143417964520166465LLU), QU(13295053515909486772LLU),
-	QU(   40434666004899675LLU), QU(17127804194038347164LLU),
-	QU( 8599165966560586269LLU), QU( 8214016749011284903LLU),
-	QU(13725130352140465239LLU), QU( 5467254474431726291LLU),
-	QU( 7748584297438219877LLU), QU(16933551114829772472LLU),
-	QU( 2169618439506799400LLU), QU( 2169787627665113463LLU),
-	QU(17314493571267943764LLU), QU(18053575102911354912LLU),
-	QU(11928303275378476973LLU), QU(11593850925061715550LLU),
-	QU(17782269923473589362LLU), QU( 3280235307704747039LLU),
-	QU( 6145343578598685149LLU), QU(17080117031114086090LLU),
-	QU(18066839902983594755LLU), QU( 6517508430331020706LLU),
-	QU( 8092908893950411541LLU), QU(12558378233386153732LLU),
-	QU( 4476532167973132976LLU), QU(16081642430367025016LLU),
-	QU( 4233154094369139361LLU), QU( 8693630486693161027LLU),
-	QU(11244959343027742285LLU), QU(12273503967768513508LLU),
-	QU(14108978636385284876LLU), QU( 7242414665378826984LLU),
-	QU( 6561316938846562432LLU), QU( 8601038474994665795LLU),
-	QU(17532942353612365904LLU), QU(17940076637020912186LLU),
-	QU( 7340260368823171304LLU), QU( 7061807613916067905LLU),
-	QU(10561734935039519326LLU), QU(17990796503724650862LLU),
-	QU( 6208732943911827159LLU), QU(  359077562804090617LLU),
-	QU(14177751537784403113LLU), QU(10659599444915362902LLU),
-	QU(15081727220615085833LLU), QU(13417573895659757486LLU),
-	QU(15513842342017811524LLU), QU(11814141516204288231LLU),
-	QU( 1827312513875101814LLU), QU( 2804611699894603103LLU),
-	QU(17116500469975602763LLU), QU(12270191815211952087LLU),
-	QU(12256358467786024988LLU), QU(18435021722453971267LLU),
-	QU(  671330264390865618LLU), QU(  476504300460286050LLU),
-	QU(16465470901027093441LLU), QU( 4047724406247136402LLU),
-	QU( 1322305451411883346LLU), QU( 1388308688834322280LLU),
-	QU( 7303989085269758176LLU), QU( 9323792664765233642LLU),
-	QU( 4542762575316368936LLU), QU(17342696132794337618LLU),
-	QU( 4588025054768498379LLU), QU(13415475057390330804LLU),
-	QU(17880279491733405570LLU), QU(10610553400618620353LLU),
-	QU( 3180842072658960139LLU), QU(13002966655454270120LLU),
-	QU( 1665301181064982826LLU), QU( 7083673946791258979LLU),
-	QU(  190522247122496820LLU), QU(17388280237250677740LLU),
-	QU( 8430770379923642945LLU), QU(12987180971921668584LLU),
-	QU( 2311086108365390642LLU), QU( 2870984383579822345LLU),
-	QU(14014682609164653318LLU), QU(14467187293062251484LLU),
-	QU(  192186361147413298LLU), QU(15171951713531796524LLU),
-	QU( 9900305495015948728LLU), QU(17958004775615466344LLU),
-	QU(14346380954498606514LLU), QU(18040047357617407096LLU),
-	QU( 5035237584833424532LLU), QU(15089555460613972287LLU),
-	QU( 4131411873749729831LLU), QU( 1329013581168250330LLU),
-	QU(10095353333051193949LLU), QU(10749518561022462716LLU),
-	QU( 9050611429810755847LLU), QU(15022028840236655649LLU),
-	QU( 8775554279239748298LLU), QU(13105754025489230502LLU),
-	QU(15471300118574167585LLU), QU(   89864764002355628LLU),
-	QU( 8776416323420466637LLU), QU( 5280258630612040891LLU),
-	QU( 2719174488591862912LLU), QU( 7599309137399661994LLU),
-	QU(15012887256778039979LLU), QU(14062981725630928925LLU),
-	QU(12038536286991689603LLU), QU( 7089756544681775245LLU),
-	QU(10376661532744718039LLU), QU( 1265198725901533130LLU),
-	QU(13807996727081142408LLU), QU( 2935019626765036403LLU),
-	QU( 7651672460680700141LLU), QU( 3644093016200370795LLU),
-	QU( 2840982578090080674LLU), QU(17956262740157449201LLU),
-	QU(18267979450492880548LLU), QU(11799503659796848070LLU),
-	QU( 9942537025669672388LLU), QU(11886606816406990297LLU),
-	QU( 5488594946437447576LLU), QU( 7226714353282744302LLU),
-	QU( 3784851653123877043LLU), QU(  878018453244803041LLU),
-	QU(12110022586268616085LLU), QU(  734072179404675123LLU),
-	QU(11869573627998248542LLU), QU(  469150421297783998LLU),
-	QU(  260151124912803804LLU), QU(11639179410120968649LLU),
-	QU( 9318165193840846253LLU), QU(12795671722734758075LLU),
-	QU(15318410297267253933LLU), QU(  691524703570062620LLU),
-	QU( 5837129010576994601LLU), QU(15045963859726941052LLU),
-	QU( 5850056944932238169LLU), QU(12017434144750943807LLU),
-	QU( 7447139064928956574LLU), QU( 3101711812658245019LLU),
-	QU(16052940704474982954LLU), QU(18195745945986994042LLU),
-	QU( 8932252132785575659LLU), QU(13390817488106794834LLU),
-	QU(11582771836502517453LLU), QU( 4964411326683611686LLU),
-	QU( 2195093981702694011LLU), QU(14145229538389675669LLU),
-	QU(16459605532062271798LLU), QU(  866316924816482864LLU),
-	QU( 4593041209937286377LLU), QU( 8415491391910972138LLU),
-	QU( 4171236715600528969LLU), QU(16637569303336782889LLU),
-	QU( 2002011073439212680LLU), QU(17695124661097601411LLU),
-	QU( 4627687053598611702LLU), QU( 7895831936020190403LLU),
-	QU( 8455951300917267802LLU), QU( 2923861649108534854LLU),
-	QU( 8344557563927786255LLU), QU( 6408671940373352556LLU),
-	QU(12210227354536675772LLU), QU(14294804157294222295LLU),
-	QU(10103022425071085127LLU), QU(10092959489504123771LLU),
-	QU( 6554774405376736268LLU), QU(12629917718410641774LLU),
-	QU( 6260933257596067126LLU), QU( 2460827021439369673LLU),
-	QU( 2541962996717103668LLU), QU(  597377203127351475LLU),
-	QU( 5316984203117315309LLU), QU( 4811211393563241961LLU),
-	QU(13119698597255811641LLU), QU( 8048691512862388981LLU),
-	QU(10216818971194073842LLU), QU( 4612229970165291764LLU),
-	QU(10000980798419974770LLU), QU( 6877640812402540687LLU),
-	QU( 1488727563290436992LLU), QU( 2227774069895697318LLU),
-	QU(11237754507523316593LLU), QU(13478948605382290972LLU),
-	QU( 1963583846976858124LLU), QU( 5512309205269276457LLU),
-	QU( 3972770164717652347LLU), QU( 3841751276198975037LLU),
-	QU(10283343042181903117LLU), QU( 8564001259792872199LLU),
-	QU(16472187244722489221LLU), QU( 8953493499268945921LLU),
-	QU( 3518747340357279580LLU), QU( 4003157546223963073LLU),
-	QU( 3270305958289814590LLU), QU( 3966704458129482496LLU),
-	QU( 8122141865926661939LLU), QU(14627734748099506653LLU),
-	QU(13064426990862560568LLU), QU( 2414079187889870829LLU),
-	QU( 5378461209354225306LLU), QU(10841985740128255566LLU),
-	QU(  538582442885401738LLU), QU( 7535089183482905946LLU),
-	QU(16117559957598879095LLU), QU( 8477890721414539741LLU),
-	QU( 1459127491209533386LLU), QU(17035126360733620462LLU),
-	QU( 8517668552872379126LLU), QU(10292151468337355014LLU),
-	QU(17081267732745344157LLU), QU(13751455337946087178LLU),
-	QU(14026945459523832966LLU), QU( 6653278775061723516LLU),
-	QU(10619085543856390441LLU), QU( 2196343631481122885LLU),
-	QU(10045966074702826136LLU), QU(10082317330452718282LLU),
-	QU( 5920859259504831242LLU), QU( 9951879073426540617LLU),
-	QU( 7074696649151414158LLU), QU(15808193543879464318LLU),
-	QU( 7385247772746953374LLU), QU( 3192003544283864292LLU),
-	QU(18153684490917593847LLU), QU(12423498260668568905LLU),
-	QU(10957758099756378169LLU), QU(11488762179911016040LLU),
-	QU( 2099931186465333782LLU), QU(11180979581250294432LLU),
-	QU( 8098916250668367933LLU), QU( 3529200436790763465LLU),
-	QU(12988418908674681745LLU), QU( 6147567275954808580LLU),
-	QU( 3207503344604030989LLU), QU(10761592604898615360LLU),
-	QU(  229854861031893504LLU), QU( 8809853962667144291LLU),
-	QU(13957364469005693860LLU), QU( 7634287665224495886LLU),
-	QU(12353487366976556874LLU), QU( 1134423796317152034LLU),
-	QU( 2088992471334107068LLU), QU( 7393372127190799698LLU),
-	QU( 1845367839871058391LLU), QU(  207922563987322884LLU),
-	QU(11960870813159944976LLU), QU(12182120053317317363LLU),
-	QU(17307358132571709283LLU), QU(13871081155552824936LLU),
-	QU(18304446751741566262LLU), QU( 7178705220184302849LLU),
-	QU(10929605677758824425LLU), QU(16446976977835806844LLU),
-	QU(13723874412159769044LLU), QU( 6942854352100915216LLU),
-	QU( 1726308474365729390LLU), QU( 2150078766445323155LLU),
-	QU(15345558947919656626LLU), QU(12145453828874527201LLU),
-	QU( 2054448620739726849LLU), QU( 2740102003352628137LLU),
-	QU(11294462163577610655LLU), QU(  756164283387413743LLU),
-	QU(17841144758438810880LLU), QU(10802406021185415861LLU),
-	QU( 8716455530476737846LLU), QU( 6321788834517649606LLU),
-	QU(14681322910577468426LLU), QU(17330043563884336387LLU),
-	QU(12701802180050071614LLU), QU(14695105111079727151LLU),
-	QU( 5112098511654172830LLU), QU( 4957505496794139973LLU),
-	QU( 8270979451952045982LLU), QU(12307685939199120969LLU),
-	QU(12425799408953443032LLU), QU( 8376410143634796588LLU),
-	QU(16621778679680060464LLU), QU( 3580497854566660073LLU),
-	QU( 1122515747803382416LLU), QU(  857664980960597599LLU),
-	QU( 6343640119895925918LLU), QU(12878473260854462891LLU),
-	QU(10036813920765722626LLU), QU(14451335468363173812LLU),
-	QU( 5476809692401102807LLU), QU(16442255173514366342LLU),
-	QU(13060203194757167104LLU), QU(14354124071243177715LLU),
-	QU(15961249405696125227LLU), QU(13703893649690872584LLU),
-	QU(  363907326340340064LLU), QU( 6247455540491754842LLU),
-	QU(12242249332757832361LLU), QU(  156065475679796717LLU),
-	QU( 9351116235749732355LLU), QU( 4590350628677701405LLU),
-	QU( 1671195940982350389LLU), QU(13501398458898451905LLU),
-	QU( 6526341991225002255LLU), QU( 1689782913778157592LLU),
-	QU( 7439222350869010334LLU), QU(13975150263226478308LLU),
-	QU(11411961169932682710LLU), QU(17204271834833847277LLU),
-	QU(  541534742544435367LLU), QU( 6591191931218949684LLU),
-	QU( 2645454775478232486LLU), QU( 4322857481256485321LLU),
-	QU( 8477416487553065110LLU), QU(12902505428548435048LLU),
-	QU(  971445777981341415LLU), QU(14995104682744976712LLU),
-	QU( 4243341648807158063LLU), QU( 8695061252721927661LLU),
-	QU( 5028202003270177222LLU), QU( 2289257340915567840LLU),
-	QU(13870416345121866007LLU), QU(13994481698072092233LLU),
-	QU( 6912785400753196481LLU), QU( 2278309315841980139LLU),
-	QU( 4329765449648304839LLU), QU( 5963108095785485298LLU),
-	QU( 4880024847478722478LLU), QU(16015608779890240947LLU),
-	QU( 1866679034261393544LLU), QU(  914821179919731519LLU),
-	QU( 9643404035648760131LLU), QU( 2418114953615593915LLU),
-	QU(  944756836073702374LLU), QU(15186388048737296834LLU),
-	QU( 7723355336128442206LLU), QU( 7500747479679599691LLU),
-	QU(18013961306453293634LLU), QU( 2315274808095756456LLU),
-	QU(13655308255424029566LLU), QU(17203800273561677098LLU),
-	QU( 1382158694422087756LLU), QU( 5090390250309588976LLU),
-	QU(  517170818384213989LLU), QU( 1612709252627729621LLU),
-	QU( 1330118955572449606LLU), QU(  300922478056709885LLU),
-	QU(18115693291289091987LLU), QU(13491407109725238321LLU),
-	QU(15293714633593827320LLU), QU( 5151539373053314504LLU),
-	QU( 5951523243743139207LLU), QU(14459112015249527975LLU),
-	QU( 5456113959000700739LLU), QU( 3877918438464873016LLU),
-	QU(12534071654260163555LLU), QU(15871678376893555041LLU),
-	QU(11005484805712025549LLU), QU(16353066973143374252LLU),
-	QU( 4358331472063256685LLU), QU( 8268349332210859288LLU),
-	QU(12485161590939658075LLU), QU(13955993592854471343LLU),
-	QU( 5911446886848367039LLU), QU(14925834086813706974LLU),
-	QU( 6590362597857994805LLU), QU( 1280544923533661875LLU),
-	QU( 1637756018947988164LLU), QU( 4734090064512686329LLU),
-	QU(16693705263131485912LLU), QU( 6834882340494360958LLU),
-	QU( 8120732176159658505LLU), QU( 2244371958905329346LLU),
-	QU(10447499707729734021LLU), QU( 7318742361446942194LLU),
-	QU( 8032857516355555296LLU), QU(14023605983059313116LLU),
-	QU( 1032336061815461376LLU), QU( 9840995337876562612LLU),
-	QU( 9869256223029203587LLU), QU(12227975697177267636LLU),
-	QU(12728115115844186033LLU), QU( 7752058479783205470LLU),
-	QU(  729733219713393087LLU), QU(12954017801239007622LLU)
+	QU(16924766246869039260ULL), QU( 8201438687333352714ULL),
+	QU( 2265290287015001750ULL), QU(18397264611805473832ULL),
+	QU( 3375255223302384358ULL), QU( 6345559975416828796ULL),
+	QU(18229739242790328073ULL), QU( 7596792742098800905ULL),
+	QU(  255338647169685981ULL), QU( 2052747240048610300ULL),
+	QU(18328151576097299343ULL), QU(12472905421133796567ULL),
+	QU(11315245349717600863ULL), QU(16594110197775871209ULL),
+	QU(15708751964632456450ULL), QU(10452031272054632535ULL),
+	QU(11097646720811454386ULL), QU( 4556090668445745441ULL),
+	QU(17116187693090663106ULL), QU(14931526836144510645ULL),
+	QU( 9190752218020552591ULL), QU( 9625800285771901401ULL),
+	QU(13995141077659972832ULL), QU( 5194209094927829625ULL),
+	QU( 4156788379151063303ULL), QU( 8523452593770139494ULL),
+	QU(14082382103049296727ULL), QU( 2462601863986088483ULL),
+	QU( 3030583461592840678ULL), QU( 5221622077872827681ULL),
+	QU( 3084210671228981236ULL), QU(13956758381389953823ULL),
+	QU(13503889856213423831ULL), QU(15696904024189836170ULL),
+	QU( 4612584152877036206ULL), QU( 6231135538447867881ULL),
+	QU(10172457294158869468ULL), QU( 6452258628466708150ULL),
+	QU(14044432824917330221ULL), QU(  370168364480044279ULL),
+	QU(10102144686427193359ULL), QU(  667870489994776076ULL),
+	QU( 2732271956925885858ULL), QU(18027788905977284151ULL),
+	QU(15009842788582923859ULL), QU( 7136357960180199542ULL),
+	QU(15901736243475578127ULL), QU(16951293785352615701ULL),
+	QU(10551492125243691632ULL), QU(17668869969146434804ULL),
+	QU(13646002971174390445ULL), QU( 9804471050759613248ULL),
+	QU( 5511670439655935493ULL), QU(18103342091070400926ULL),
+	QU(17224512747665137533ULL), QU(15534627482992618168ULL),
+	QU( 1423813266186582647ULL), QU(15821176807932930024ULL),
+	QU(   30323369733607156ULL), QU(11599382494723479403ULL),
+	QU(  653856076586810062ULL), QU( 3176437395144899659ULL),
+	QU(14028076268147963917ULL), QU(16156398271809666195ULL),
+	QU( 3166955484848201676ULL), QU( 5746805620136919390ULL),
+	QU(17297845208891256593ULL), QU(11691653183226428483ULL),
+	QU(17900026146506981577ULL), QU(15387382115755971042ULL),
+	QU(16923567681040845943ULL), QU( 8039057517199388606ULL),
+	QU(11748409241468629263ULL), QU(  794358245539076095ULL),
+	QU(13438501964693401242ULL), QU(14036803236515618962ULL),
+	QU( 5252311215205424721ULL), QU(17806589612915509081ULL),
+	QU( 6802767092397596006ULL), QU(14212120431184557140ULL),
+	QU( 1072951366761385712ULL), QU(13098491780722836296ULL),
+	QU( 9466676828710797353ULL), QU(12673056849042830081ULL),
+	QU(12763726623645357580ULL), QU(16468961652999309493ULL),
+	QU(15305979875636438926ULL), QU(17444713151223449734ULL),
+	QU( 5692214267627883674ULL), QU(13049589139196151505ULL),
+	QU(  880115207831670745ULL), QU( 1776529075789695498ULL),
+	QU(16695225897801466485ULL), QU(10666901778795346845ULL),
+	QU( 6164389346722833869ULL), QU( 2863817793264300475ULL),
+	QU( 9464049921886304754ULL), QU( 3993566636740015468ULL),
+	QU( 9983749692528514136ULL), QU(16375286075057755211ULL),
+	QU(16042643417005440820ULL), QU(11445419662923489877ULL),
+	QU( 7999038846885158836ULL), QU( 6721913661721511535ULL),
+	QU( 5363052654139357320ULL), QU( 1817788761173584205ULL),
+	QU(13290974386445856444ULL), QU( 4650350818937984680ULL),
+	QU( 8219183528102484836ULL), QU( 1569862923500819899ULL),
+	QU( 4189359732136641860ULL), QU(14202822961683148583ULL),
+	QU( 4457498315309429058ULL), QU(13089067387019074834ULL),
+	QU(11075517153328927293ULL), QU(10277016248336668389ULL),
+	QU( 7070509725324401122ULL), QU(17808892017780289380ULL),
+	QU(13143367339909287349ULL), QU( 1377743745360085151ULL),
+	QU( 5749341807421286485ULL), QU(14832814616770931325ULL),
+	QU( 7688820635324359492ULL), QU(10960474011539770045ULL),
+	QU(   81970066653179790ULL), QU(12619476072607878022ULL),
+	QU( 4419566616271201744ULL), QU(15147917311750568503ULL),
+	QU( 5549739182852706345ULL), QU( 7308198397975204770ULL),
+	QU(13580425496671289278ULL), QU(17070764785210130301ULL),
+	QU( 8202832846285604405ULL), QU( 6873046287640887249ULL),
+	QU( 6927424434308206114ULL), QU( 6139014645937224874ULL),
+	QU(10290373645978487639ULL), QU(15904261291701523804ULL),
+	QU( 9628743442057826883ULL), QU(18383429096255546714ULL),
+	QU( 4977413265753686967ULL), QU( 7714317492425012869ULL),
+	QU( 9025232586309926193ULL), QU(14627338359776709107ULL),
+	QU(14759849896467790763ULL), QU(10931129435864423252ULL),
+	QU( 4588456988775014359ULL), QU(10699388531797056724ULL),
+	QU(  468652268869238792ULL), QU( 5755943035328078086ULL),
+	QU( 2102437379988580216ULL), QU( 9986312786506674028ULL),
+	QU( 2654207180040945604ULL), QU( 8726634790559960062ULL),
+	QU(  100497234871808137ULL), QU( 2800137176951425819ULL),
+	QU( 6076627612918553487ULL), QU( 5780186919186152796ULL),
+	QU( 8179183595769929098ULL), QU( 6009426283716221169ULL),
+	QU( 2796662551397449358ULL), QU( 1756961367041986764ULL),
+	QU( 6972897917355606205ULL), QU(14524774345368968243ULL),
+	QU( 2773529684745706940ULL), QU( 4853632376213075959ULL),
+	QU( 4198177923731358102ULL), QU( 8271224913084139776ULL),
+	QU( 2741753121611092226ULL), QU(16782366145996731181ULL),
+	QU(15426125238972640790ULL), QU(13595497100671260342ULL),
+	QU( 3173531022836259898ULL), QU( 6573264560319511662ULL),
+	QU(18041111951511157441ULL), QU( 2351433581833135952ULL),
+	QU( 3113255578908173487ULL), QU( 1739371330877858784ULL),
+	QU(16046126562789165480ULL), QU( 8072101652214192925ULL),
+	QU(15267091584090664910ULL), QU( 9309579200403648940ULL),
+	QU( 5218892439752408722ULL), QU(14492477246004337115ULL),
+	QU(17431037586679770619ULL), QU( 7385248135963250480ULL),
+	QU( 9580144956565560660ULL), QU( 4919546228040008720ULL),
+	QU(15261542469145035584ULL), QU(18233297270822253102ULL),
+	QU( 5453248417992302857ULL), QU( 9309519155931460285ULL),
+	QU(10342813012345291756ULL), QU(15676085186784762381ULL),
+	QU(15912092950691300645ULL), QU( 9371053121499003195ULL),
+	QU( 9897186478226866746ULL), QU(14061858287188196327ULL),
+	QU(  122575971620788119ULL), QU(12146750969116317754ULL),
+	QU( 4438317272813245201ULL), QU( 8332576791009527119ULL),
+	QU(13907785691786542057ULL), QU(10374194887283287467ULL),
+	QU( 2098798755649059566ULL), QU( 3416235197748288894ULL),
+	QU( 8688269957320773484ULL), QU( 7503964602397371571ULL),
+	QU(16724977015147478236ULL), QU( 9461512855439858184ULL),
+	QU(13259049744534534727ULL), QU( 3583094952542899294ULL),
+	QU( 8764245731305528292ULL), QU(13240823595462088985ULL),
+	QU(13716141617617910448ULL), QU(18114969519935960955ULL),
+	QU( 2297553615798302206ULL), QU( 4585521442944663362ULL),
+	QU(17776858680630198686ULL), QU( 4685873229192163363ULL),
+	QU(  152558080671135627ULL), QU(15424900540842670088ULL),
+	QU(13229630297130024108ULL), QU(17530268788245718717ULL),
+	QU(16675633913065714144ULL), QU( 3158912717897568068ULL),
+	QU(15399132185380087288ULL), QU( 7401418744515677872ULL),
+	QU(13135412922344398535ULL), QU( 6385314346100509511ULL),
+	QU(13962867001134161139ULL), QU(10272780155442671999ULL),
+	QU(12894856086597769142ULL), QU(13340877795287554994ULL),
+	QU(12913630602094607396ULL), QU(12543167911119793857ULL),
+	QU(17343570372251873096ULL), QU(10959487764494150545ULL),
+	QU( 6966737953093821128ULL), QU(13780699135496988601ULL),
+	QU( 4405070719380142046ULL), QU(14923788365607284982ULL),
+	QU( 2869487678905148380ULL), QU( 6416272754197188403ULL),
+	QU(15017380475943612591ULL), QU( 1995636220918429487ULL),
+	QU( 3402016804620122716ULL), QU(15800188663407057080ULL),
+	QU(11362369990390932882ULL), QU(15262183501637986147ULL),
+	QU(10239175385387371494ULL), QU( 9352042420365748334ULL),
+	QU( 1682457034285119875ULL), QU( 1724710651376289644ULL),
+	QU( 2038157098893817966ULL), QU( 9897825558324608773ULL),
+	QU( 1477666236519164736ULL), QU(16835397314511233640ULL),
+	QU(10370866327005346508ULL), QU(10157504370660621982ULL),
+	QU(12113904045335882069ULL), QU(13326444439742783008ULL),
+	QU(11302769043000765804ULL), QU(13594979923955228484ULL),
+	QU(11779351762613475968ULL), QU( 3786101619539298383ULL),
+	QU( 8021122969180846063ULL), QU(15745904401162500495ULL),
+	QU(10762168465993897267ULL), QU(13552058957896319026ULL),
+	QU(11200228655252462013ULL), QU( 5035370357337441226ULL),
+	QU( 7593918984545500013ULL), QU( 5418554918361528700ULL),
+	QU( 4858270799405446371ULL), QU( 9974659566876282544ULL),
+	QU(18227595922273957859ULL), QU( 2772778443635656220ULL),
+	QU(14285143053182085385ULL), QU( 9939700992429600469ULL),
+	QU(12756185904545598068ULL), QU( 2020783375367345262ULL),
+	QU(   57026775058331227ULL), QU(  950827867930065454ULL),
+	QU( 6602279670145371217ULL), QU( 2291171535443566929ULL),
+	QU( 5832380724425010313ULL), QU( 1220343904715982285ULL),
+	QU(17045542598598037633ULL), QU(15460481779702820971ULL),
+	QU(13948388779949365130ULL), QU(13975040175430829518ULL),
+	QU(17477538238425541763ULL), QU(11104663041851745725ULL),
+	QU(15860992957141157587ULL), QU(14529434633012950138ULL),
+	QU( 2504838019075394203ULL), QU( 7512113882611121886ULL),
+	QU( 4859973559980886617ULL), QU( 1258601555703250219ULL),
+	QU(15594548157514316394ULL), QU( 4516730171963773048ULL),
+	QU(11380103193905031983ULL), QU( 6809282239982353344ULL),
+	QU(18045256930420065002ULL), QU( 2453702683108791859ULL),
+	QU(  977214582986981460ULL), QU( 2006410402232713466ULL),
+	QU( 6192236267216378358ULL), QU( 3429468402195675253ULL),
+	QU(18146933153017348921ULL), QU(17369978576367231139ULL),
+	QU( 1246940717230386603ULL), QU(11335758870083327110ULL),
+	QU(14166488801730353682ULL), QU( 9008573127269635732ULL),
+	QU(10776025389820643815ULL), QU(15087605441903942962ULL),
+	QU( 1359542462712147922ULL), QU(13898874411226454206ULL),
+	QU(17911176066536804411ULL), QU( 9435590428600085274ULL),
+	QU(  294488509967864007ULL), QU( 8890111397567922046ULL),
+	QU( 7987823476034328778ULL), QU(13263827582440967651ULL),
+	QU( 7503774813106751573ULL), QU(14974747296185646837ULL),
+	QU( 8504765037032103375ULL), QU(17340303357444536213ULL),
+	QU( 7704610912964485743ULL), QU( 8107533670327205061ULL),
+	QU( 9062969835083315985ULL), QU(16968963142126734184ULL),
+	QU(12958041214190810180ULL), QU( 2720170147759570200ULL),
+	QU( 2986358963942189566ULL), QU(14884226322219356580ULL),
+	QU(  286224325144368520ULL), QU(11313800433154279797ULL),
+	QU(18366849528439673248ULL), QU(17899725929482368789ULL),
+	QU( 3730004284609106799ULL), QU( 1654474302052767205ULL),
+	QU( 5006698007047077032ULL), QU( 8196893913601182838ULL),
+	QU(15214541774425211640ULL), QU(17391346045606626073ULL),
+	QU( 8369003584076969089ULL), QU( 3939046733368550293ULL),
+	QU(10178639720308707785ULL), QU( 2180248669304388697ULL),
+	QU(   62894391300126322ULL), QU( 9205708961736223191ULL),
+	QU( 6837431058165360438ULL), QU( 3150743890848308214ULL),
+	QU(17849330658111464583ULL), QU(12214815643135450865ULL),
+	QU(13410713840519603402ULL), QU( 3200778126692046802ULL),
+	QU(13354780043041779313ULL), QU(  800850022756886036ULL),
+	QU(15660052933953067433ULL), QU( 6572823544154375676ULL),
+	QU(11030281857015819266ULL), QU(12682241941471433835ULL),
+	QU(11654136407300274693ULL), QU( 4517795492388641109ULL),
+	QU( 9757017371504524244ULL), QU(17833043400781889277ULL),
+	QU(12685085201747792227ULL), QU(10408057728835019573ULL),
+	QU(   98370418513455221ULL), QU( 6732663555696848598ULL),
+	QU(13248530959948529780ULL), QU( 3530441401230622826ULL),
+	QU(18188251992895660615ULL), QU( 1847918354186383756ULL),
+	QU( 1127392190402660921ULL), QU(11293734643143819463ULL),
+	QU( 3015506344578682982ULL), QU(13852645444071153329ULL),
+	QU( 2121359659091349142ULL), QU( 1294604376116677694ULL),
+	QU( 5616576231286352318ULL), QU( 7112502442954235625ULL),
+	QU(11676228199551561689ULL), QU(12925182803007305359ULL),
+	QU( 7852375518160493082ULL), QU( 1136513130539296154ULL),
+	QU( 5636923900916593195ULL), QU( 3221077517612607747ULL),
+	QU(17784790465798152513ULL), QU( 3554210049056995938ULL),
+	QU(17476839685878225874ULL), QU( 3206836372585575732ULL),
+	QU( 2765333945644823430ULL), QU(10080070903718799528ULL),
+	QU( 5412370818878286353ULL), QU( 9689685887726257728ULL),
+	QU( 8236117509123533998ULL), QU( 1951139137165040214ULL),
+	QU( 4492205209227980349ULL), QU(16541291230861602967ULL),
+	QU( 1424371548301437940ULL), QU( 9117562079669206794ULL),
+	QU(14374681563251691625ULL), QU(13873164030199921303ULL),
+	QU( 6680317946770936731ULL), QU(15586334026918276214ULL),
+	QU(10896213950976109802ULL), QU( 9506261949596413689ULL),
+	QU( 9903949574308040616ULL), QU( 6038397344557204470ULL),
+	QU(  174601465422373648ULL), QU(15946141191338238030ULL),
+	QU(17142225620992044937ULL), QU( 7552030283784477064ULL),
+	QU( 2947372384532947997ULL), QU(  510797021688197711ULL),
+	QU( 4962499439249363461ULL), QU(   23770320158385357ULL),
+	QU(  959774499105138124ULL), QU( 1468396011518788276ULL),
+	QU( 2015698006852312308ULL), QU( 4149400718489980136ULL),
+	QU( 5992916099522371188ULL), QU(10819182935265531076ULL),
+	QU(16189787999192351131ULL), QU(  342833961790261950ULL),
+	QU(12470830319550495336ULL), QU(18128495041912812501ULL),
+	QU( 1193600899723524337ULL), QU( 9056793666590079770ULL),
+	QU( 2154021227041669041ULL), QU( 4963570213951235735ULL),
+	QU( 4865075960209211409ULL), QU( 2097724599039942963ULL),
+	QU( 2024080278583179845ULL), QU(11527054549196576736ULL),
+	QU(10650256084182390252ULL), QU( 4808408648695766755ULL),
+	QU( 1642839215013788844ULL), QU(10607187948250398390ULL),
+	QU( 7076868166085913508ULL), QU(  730522571106887032ULL),
+	QU(12500579240208524895ULL), QU( 4484390097311355324ULL),
+	QU(15145801330700623870ULL), QU( 8055827661392944028ULL),
+	QU( 5865092976832712268ULL), QU(15159212508053625143ULL),
+	QU( 3560964582876483341ULL), QU( 4070052741344438280ULL),
+	QU( 6032585709886855634ULL), QU(15643262320904604873ULL),
+	QU( 2565119772293371111ULL), QU(  318314293065348260ULL),
+	QU(15047458749141511872ULL), QU( 7772788389811528730ULL),
+	QU( 7081187494343801976ULL), QU( 6465136009467253947ULL),
+	QU(10425940692543362069ULL), QU(  554608190318339115ULL),
+	QU(14796699860302125214ULL), QU( 1638153134431111443ULL),
+	QU(10336967447052276248ULL), QU( 8412308070396592958ULL),
+	QU( 4004557277152051226ULL), QU( 8143598997278774834ULL),
+	QU(16413323996508783221ULL), QU(13139418758033994949ULL),
+	QU( 9772709138335006667ULL), QU( 2818167159287157659ULL),
+	QU(17091740573832523669ULL), QU(14629199013130751608ULL),
+	QU(18268322711500338185ULL), QU( 8290963415675493063ULL),
+	QU( 8830864907452542588ULL), QU( 1614839084637494849ULL),
+	QU(14855358500870422231ULL), QU( 3472996748392519937ULL),
+	QU(15317151166268877716ULL), QU( 5825895018698400362ULL),
+	QU(16730208429367544129ULL), QU(10481156578141202800ULL),
+	QU( 4746166512382823750ULL), QU(12720876014472464998ULL),
+	QU( 8825177124486735972ULL), QU(13733447296837467838ULL),
+	QU( 6412293741681359625ULL), QU( 8313213138756135033ULL),
+	QU(11421481194803712517ULL), QU( 7997007691544174032ULL),
+	QU( 6812963847917605930ULL), QU( 9683091901227558641ULL),
+	QU(14703594165860324713ULL), QU( 1775476144519618309ULL),
+	QU( 2724283288516469519ULL), QU(  717642555185856868ULL),
+	QU( 8736402192215092346ULL), QU(11878800336431381021ULL),
+	QU( 4348816066017061293ULL), QU( 6115112756583631307ULL),
+	QU( 9176597239667142976ULL), QU(12615622714894259204ULL),
+	QU(10283406711301385987ULL), QU( 5111762509485379420ULL),
+	QU( 3118290051198688449ULL), QU( 7345123071632232145ULL),
+	QU( 9176423451688682359ULL), QU( 4843865456157868971ULL),
+	QU(12008036363752566088ULL), QU(12058837181919397720ULL),
+	QU( 2145073958457347366ULL), QU( 1526504881672818067ULL),
+	QU( 3488830105567134848ULL), QU(13208362960674805143ULL),
+	QU( 4077549672899572192ULL), QU( 7770995684693818365ULL),
+	QU( 1398532341546313593ULL), QU(12711859908703927840ULL),
+	QU( 1417561172594446813ULL), QU(17045191024194170604ULL),
+	QU( 4101933177604931713ULL), QU(14708428834203480320ULL),
+	QU(17447509264469407724ULL), QU(14314821973983434255ULL),
+	QU(17990472271061617265ULL), QU( 5087756685841673942ULL),
+	QU(12797820586893859939ULL), QU( 1778128952671092879ULL),
+	QU( 3535918530508665898ULL), QU( 9035729701042481301ULL),
+	QU(14808661568277079962ULL), QU(14587345077537747914ULL),
+	QU(11920080002323122708ULL), QU( 6426515805197278753ULL),
+	QU( 3295612216725984831ULL), QU(11040722532100876120ULL),
+	QU(12305952936387598754ULL), QU(16097391899742004253ULL),
+	QU( 4908537335606182208ULL), QU(12446674552196795504ULL),
+	QU(16010497855816895177ULL), QU( 9194378874788615551ULL),
+	QU( 3382957529567613384ULL), QU( 5154647600754974077ULL),
+	QU( 9801822865328396141ULL), QU( 9023662173919288143ULL),
+	QU(17623115353825147868ULL), QU( 8238115767443015816ULL),
+	QU(15811444159859002560ULL), QU( 9085612528904059661ULL),
+	QU( 6888601089398614254ULL), QU(  258252992894160189ULL),
+	QU( 6704363880792428622ULL), QU( 6114966032147235763ULL),
+	QU(11075393882690261875ULL), QU( 8797664238933620407ULL),
+	QU( 5901892006476726920ULL), QU( 5309780159285518958ULL),
+	QU(14940808387240817367ULL), QU(14642032021449656698ULL),
+	QU( 9808256672068504139ULL), QU( 3670135111380607658ULL),
+	QU(11211211097845960152ULL), QU( 1474304506716695808ULL),
+	QU(15843166204506876239ULL), QU( 7661051252471780561ULL),
+	QU(10170905502249418476ULL), QU( 7801416045582028589ULL),
+	QU( 2763981484737053050ULL), QU( 9491377905499253054ULL),
+	QU(16201395896336915095ULL), QU( 9256513756442782198ULL),
+	QU( 5411283157972456034ULL), QU( 5059433122288321676ULL),
+	QU( 4327408006721123357ULL), QU( 9278544078834433377ULL),
+	QU( 7601527110882281612ULL), QU(11848295896975505251ULL),
+	QU(12096998801094735560ULL), QU(14773480339823506413ULL),
+	QU(15586227433895802149ULL), QU(12786541257830242872ULL),
+	QU( 6904692985140503067ULL), QU( 5309011515263103959ULL),
+	QU(12105257191179371066ULL), QU(14654380212442225037ULL),
+	QU( 2556774974190695009ULL), QU( 4461297399927600261ULL),
+	QU(14888225660915118646ULL), QU(14915459341148291824ULL),
+	QU( 2738802166252327631ULL), QU( 6047155789239131512ULL),
+	QU(12920545353217010338ULL), QU(10697617257007840205ULL),
+	QU( 2751585253158203504ULL), QU(13252729159780047496ULL),
+	QU(14700326134672815469ULL), QU(14082527904374600529ULL),
+	QU(16852962273496542070ULL), QU(17446675504235853907ULL),
+	QU(15019600398527572311ULL), QU(12312781346344081551ULL),
+	QU(14524667935039810450ULL), QU( 5634005663377195738ULL),
+	QU(11375574739525000569ULL), QU( 2423665396433260040ULL),
+	QU( 5222836914796015410ULL), QU( 4397666386492647387ULL),
+	QU( 4619294441691707638ULL), QU(  665088602354770716ULL),
+	QU(13246495665281593610ULL), QU( 6564144270549729409ULL),
+	QU(10223216188145661688ULL), QU( 3961556907299230585ULL),
+	QU(11543262515492439914ULL), QU(16118031437285993790ULL),
+	QU( 7143417964520166465ULL), QU(13295053515909486772ULL),
+	QU(   40434666004899675ULL), QU(17127804194038347164ULL),
+	QU( 8599165966560586269ULL), QU( 8214016749011284903ULL),
+	QU(13725130352140465239ULL), QU( 5467254474431726291ULL),
+	QU( 7748584297438219877ULL), QU(16933551114829772472ULL),
+	QU( 2169618439506799400ULL), QU( 2169787627665113463ULL),
+	QU(17314493571267943764ULL), QU(18053575102911354912ULL),
+	QU(11928303275378476973ULL), QU(11593850925061715550ULL),
+	QU(17782269923473589362ULL), QU( 3280235307704747039ULL),
+	QU( 6145343578598685149ULL), QU(17080117031114086090ULL),
+	QU(18066839902983594755ULL), QU( 6517508430331020706ULL),
+	QU( 8092908893950411541ULL), QU(12558378233386153732ULL),
+	QU( 4476532167973132976ULL), QU(16081642430367025016ULL),
+	QU( 4233154094369139361ULL), QU( 8693630486693161027ULL),
+	QU(11244959343027742285ULL), QU(12273503967768513508ULL),
+	QU(14108978636385284876ULL), QU( 7242414665378826984ULL),
+	QU( 6561316938846562432ULL), QU( 8601038474994665795ULL),
+	QU(17532942353612365904ULL), QU(17940076637020912186ULL),
+	QU( 7340260368823171304ULL), QU( 7061807613916067905ULL),
+	QU(10561734935039519326ULL), QU(17990796503724650862ULL),
+	QU( 6208732943911827159ULL), QU(  359077562804090617ULL),
+	QU(14177751537784403113ULL), QU(10659599444915362902ULL),
+	QU(15081727220615085833ULL), QU(13417573895659757486ULL),
+	QU(15513842342017811524ULL), QU(11814141516204288231ULL),
+	QU( 1827312513875101814ULL), QU( 2804611699894603103ULL),
+	QU(17116500469975602763ULL), QU(12270191815211952087ULL),
+	QU(12256358467786024988ULL), QU(18435021722453971267ULL),
+	QU(  671330264390865618ULL), QU(  476504300460286050ULL),
+	QU(16465470901027093441ULL), QU( 4047724406247136402ULL),
+	QU( 1322305451411883346ULL), QU( 1388308688834322280ULL),
+	QU( 7303989085269758176ULL), QU( 9323792664765233642ULL),
+	QU( 4542762575316368936ULL), QU(17342696132794337618ULL),
+	QU( 4588025054768498379ULL), QU(13415475057390330804ULL),
+	QU(17880279491733405570ULL), QU(10610553400618620353ULL),
+	QU( 3180842072658960139ULL), QU(13002966655454270120ULL),
+	QU( 1665301181064982826ULL), QU( 7083673946791258979ULL),
+	QU(  190522247122496820ULL), QU(17388280237250677740ULL),
+	QU( 8430770379923642945ULL), QU(12987180971921668584ULL),
+	QU( 2311086108365390642ULL), QU( 2870984383579822345ULL),
+	QU(14014682609164653318ULL), QU(14467187293062251484ULL),
+	QU(  192186361147413298ULL), QU(15171951713531796524ULL),
+	QU( 9900305495015948728ULL), QU(17958004775615466344ULL),
+	QU(14346380954498606514ULL), QU(18040047357617407096ULL),
+	QU( 5035237584833424532ULL), QU(15089555460613972287ULL),
+	QU( 4131411873749729831ULL), QU( 1329013581168250330ULL),
+	QU(10095353333051193949ULL), QU(10749518561022462716ULL),
+	QU( 9050611429810755847ULL), QU(15022028840236655649ULL),
+	QU( 8775554279239748298ULL), QU(13105754025489230502ULL),
+	QU(15471300118574167585ULL), QU(   89864764002355628ULL),
+	QU( 8776416323420466637ULL), QU( 5280258630612040891ULL),
+	QU( 2719174488591862912ULL), QU( 7599309137399661994ULL),
+	QU(15012887256778039979ULL), QU(14062981725630928925ULL),
+	QU(12038536286991689603ULL), QU( 7089756544681775245ULL),
+	QU(10376661532744718039ULL), QU( 1265198725901533130ULL),
+	QU(13807996727081142408ULL), QU( 2935019626765036403ULL),
+	QU( 7651672460680700141ULL), QU( 3644093016200370795ULL),
+	QU( 2840982578090080674ULL), QU(17956262740157449201ULL),
+	QU(18267979450492880548ULL), QU(11799503659796848070ULL),
+	QU( 9942537025669672388ULL), QU(11886606816406990297ULL),
+	QU( 5488594946437447576ULL), QU( 7226714353282744302ULL),
+	QU( 3784851653123877043ULL), QU(  878018453244803041ULL),
+	QU(12110022586268616085ULL), QU(  734072179404675123ULL),
+	QU(11869573627998248542ULL), QU(  469150421297783998ULL),
+	QU(  260151124912803804ULL), QU(11639179410120968649ULL),
+	QU( 9318165193840846253ULL), QU(12795671722734758075ULL),
+	QU(15318410297267253933ULL), QU(  691524703570062620ULL),
+	QU( 5837129010576994601ULL), QU(15045963859726941052ULL),
+	QU( 5850056944932238169ULL), QU(12017434144750943807ULL),
+	QU( 7447139064928956574ULL), QU( 3101711812658245019ULL),
+	QU(16052940704474982954ULL), QU(18195745945986994042ULL),
+	QU( 8932252132785575659ULL), QU(13390817488106794834ULL),
+	QU(11582771836502517453ULL), QU( 4964411326683611686ULL),
+	QU( 2195093981702694011ULL), QU(14145229538389675669ULL),
+	QU(16459605532062271798ULL), QU(  866316924816482864ULL),
+	QU( 4593041209937286377ULL), QU( 8415491391910972138ULL),
+	QU( 4171236715600528969ULL), QU(16637569303336782889ULL),
+	QU( 2002011073439212680ULL), QU(17695124661097601411ULL),
+	QU( 4627687053598611702ULL), QU( 7895831936020190403ULL),
+	QU( 8455951300917267802ULL), QU( 2923861649108534854ULL),
+	QU( 8344557563927786255ULL), QU( 6408671940373352556ULL),
+	QU(12210227354536675772ULL), QU(14294804157294222295ULL),
+	QU(10103022425071085127ULL), QU(10092959489504123771ULL),
+	QU( 6554774405376736268ULL), QU(12629917718410641774ULL),
+	QU( 6260933257596067126ULL), QU( 2460827021439369673ULL),
+	QU( 2541962996717103668ULL), QU(  597377203127351475ULL),
+	QU( 5316984203117315309ULL), QU( 4811211393563241961ULL),
+	QU(13119698597255811641ULL), QU( 8048691512862388981ULL),
+	QU(10216818971194073842ULL), QU( 4612229970165291764ULL),
+	QU(10000980798419974770ULL), QU( 6877640812402540687ULL),
+	QU( 1488727563290436992ULL), QU( 2227774069895697318ULL),
+	QU(11237754507523316593ULL), QU(13478948605382290972ULL),
+	QU( 1963583846976858124ULL), QU( 5512309205269276457ULL),
+	QU( 3972770164717652347ULL), QU( 3841751276198975037ULL),
+	QU(10283343042181903117ULL), QU( 8564001259792872199ULL),
+	QU(16472187244722489221ULL), QU( 8953493499268945921ULL),
+	QU( 3518747340357279580ULL), QU( 4003157546223963073ULL),
+	QU( 3270305958289814590ULL), QU( 3966704458129482496ULL),
+	QU( 8122141865926661939ULL), QU(14627734748099506653ULL),
+	QU(13064426990862560568ULL), QU( 2414079187889870829ULL),
+	QU( 5378461209354225306ULL), QU(10841985740128255566ULL),
+	QU(  538582442885401738ULL), QU( 7535089183482905946ULL),
+	QU(16117559957598879095ULL), QU( 8477890721414539741ULL),
+	QU( 1459127491209533386ULL), QU(17035126360733620462ULL),
+	QU( 8517668552872379126ULL), QU(10292151468337355014ULL),
+	QU(17081267732745344157ULL), QU(13751455337946087178ULL),
+	QU(14026945459523832966ULL), QU( 6653278775061723516ULL),
+	QU(10619085543856390441ULL), QU( 2196343631481122885ULL),
+	QU(10045966074702826136ULL), QU(10082317330452718282ULL),
+	QU( 5920859259504831242ULL), QU( 9951879073426540617ULL),
+	QU( 7074696649151414158ULL), QU(15808193543879464318ULL),
+	QU( 7385247772746953374ULL), QU( 3192003544283864292ULL),
+	QU(18153684490917593847ULL), QU(12423498260668568905ULL),
+	QU(10957758099756378169ULL), QU(11488762179911016040ULL),
+	QU( 2099931186465333782ULL), QU(11180979581250294432ULL),
+	QU( 8098916250668367933ULL), QU( 3529200436790763465ULL),
+	QU(12988418908674681745ULL), QU( 6147567275954808580ULL),
+	QU( 3207503344604030989ULL), QU(10761592604898615360ULL),
+	QU(  229854861031893504ULL), QU( 8809853962667144291ULL),
+	QU(13957364469005693860ULL), QU( 7634287665224495886ULL),
+	QU(12353487366976556874ULL), QU( 1134423796317152034ULL),
+	QU( 2088992471334107068ULL), QU( 7393372127190799698ULL),
+	QU( 1845367839871058391ULL), QU(  207922563987322884ULL),
+	QU(11960870813159944976ULL), QU(12182120053317317363ULL),
+	QU(17307358132571709283ULL), QU(13871081155552824936ULL),
+	QU(18304446751741566262ULL), QU( 7178705220184302849ULL),
+	QU(10929605677758824425ULL), QU(16446976977835806844ULL),
+	QU(13723874412159769044ULL), QU( 6942854352100915216ULL),
+	QU( 1726308474365729390ULL), QU( 2150078766445323155ULL),
+	QU(15345558947919656626ULL), QU(12145453828874527201ULL),
+	QU( 2054448620739726849ULL), QU( 2740102003352628137ULL),
+	QU(11294462163577610655ULL), QU(  756164283387413743ULL),
+	QU(17841144758438810880ULL), QU(10802406021185415861ULL),
+	QU( 8716455530476737846ULL), QU( 6321788834517649606ULL),
+	QU(14681322910577468426ULL), QU(17330043563884336387ULL),
+	QU(12701802180050071614ULL), QU(14695105111079727151ULL),
+	QU( 5112098511654172830ULL), QU( 4957505496794139973ULL),
+	QU( 8270979451952045982ULL), QU(12307685939199120969ULL),
+	QU(12425799408953443032ULL), QU( 8376410143634796588ULL),
+	QU(16621778679680060464ULL), QU( 3580497854566660073ULL),
+	QU( 1122515747803382416ULL), QU(  857664980960597599ULL),
+	QU( 6343640119895925918ULL), QU(12878473260854462891ULL),
+	QU(10036813920765722626ULL), QU(14451335468363173812ULL),
+	QU( 5476809692401102807ULL), QU(16442255173514366342ULL),
+	QU(13060203194757167104ULL), QU(14354124071243177715ULL),
+	QU(15961249405696125227ULL), QU(13703893649690872584ULL),
+	QU(  363907326340340064ULL), QU( 6247455540491754842ULL),
+	QU(12242249332757832361ULL), QU(  156065475679796717ULL),
+	QU( 9351116235749732355ULL), QU( 4590350628677701405ULL),
+	QU( 1671195940982350389ULL), QU(13501398458898451905ULL),
+	QU( 6526341991225002255ULL), QU( 1689782913778157592ULL),
+	QU( 7439222350869010334ULL), QU(13975150263226478308ULL),
+	QU(11411961169932682710ULL), QU(17204271834833847277ULL),
+	QU(  541534742544435367ULL), QU( 6591191931218949684ULL),
+	QU( 2645454775478232486ULL), QU( 4322857481256485321ULL),
+	QU( 8477416487553065110ULL), QU(12902505428548435048ULL),
+	QU(  971445777981341415ULL), QU(14995104682744976712ULL),
+	QU( 4243341648807158063ULL), QU( 8695061252721927661ULL),
+	QU( 5028202003270177222ULL), QU( 2289257340915567840ULL),
+	QU(13870416345121866007ULL), QU(13994481698072092233ULL),
+	QU( 6912785400753196481ULL), QU( 2278309315841980139ULL),
+	QU( 4329765449648304839ULL), QU( 5963108095785485298ULL),
+	QU( 4880024847478722478ULL), QU(16015608779890240947ULL),
+	QU( 1866679034261393544ULL), QU(  914821179919731519ULL),
+	QU( 9643404035648760131ULL), QU( 2418114953615593915ULL),
+	QU(  944756836073702374ULL), QU(15186388048737296834ULL),
+	QU( 7723355336128442206ULL), QU( 7500747479679599691ULL),
+	QU(18013961306453293634ULL), QU( 2315274808095756456ULL),
+	QU(13655308255424029566ULL), QU(17203800273561677098ULL),
+	QU( 1382158694422087756ULL), QU( 5090390250309588976ULL),
+	QU(  517170818384213989ULL), QU( 1612709252627729621ULL),
+	QU( 1330118955572449606ULL), QU(  300922478056709885ULL),
+	QU(18115693291289091987ULL), QU(13491407109725238321ULL),
+	QU(15293714633593827320ULL), QU( 5151539373053314504ULL),
+	QU( 5951523243743139207ULL), QU(14459112015249527975ULL),
+	QU( 5456113959000700739ULL), QU( 3877918438464873016ULL),
+	QU(12534071654260163555ULL), QU(15871678376893555041ULL),
+	QU(11005484805712025549ULL), QU(16353066973143374252ULL),
+	QU( 4358331472063256685ULL), QU( 8268349332210859288ULL),
+	QU(12485161590939658075ULL), QU(13955993592854471343ULL),
+	QU( 5911446886848367039ULL), QU(14925834086813706974ULL),
+	QU( 6590362597857994805ULL), QU( 1280544923533661875ULL),
+	QU( 1637756018947988164ULL), QU( 4734090064512686329ULL),
+	QU(16693705263131485912ULL), QU( 6834882340494360958ULL),
+	QU( 8120732176159658505ULL), QU( 2244371958905329346ULL),
+	QU(10447499707729734021ULL), QU( 7318742361446942194ULL),
+	QU( 8032857516355555296ULL), QU(14023605983059313116ULL),
+	QU( 1032336061815461376ULL), QU( 9840995337876562612ULL),
+	QU( 9869256223029203587ULL), QU(12227975697177267636ULL),
+	QU(12728115115844186033ULL), QU( 7752058479783205470ULL),
+	QU(  729733219713393087ULL), QU(12954017801239007622ULL)
 };
 static const uint64_t init_by_array_64_expected[] = {
-	QU( 2100341266307895239LLU), QU( 8344256300489757943LLU),
-	QU(15687933285484243894LLU), QU( 8268620370277076319LLU),
-	QU(12371852309826545459LLU), QU( 8800491541730110238LLU),
-	QU(18113268950100835773LLU), QU( 2886823658884438119LLU),
-	QU( 3293667307248180724LLU), QU( 9307928143300172731LLU),
-	QU( 7688082017574293629LLU), QU(  900986224735166665LLU),
-	QU( 9977972710722265039LLU), QU( 6008205004994830552LLU),
-	QU(  546909104521689292LLU), QU( 7428471521869107594LLU),
-	QU(14777563419314721179LLU), QU(16116143076567350053LLU),
-	QU( 5322685342003142329LLU), QU( 4200427048445863473LLU),
-	QU( 4693092150132559146LLU), QU(13671425863759338582LLU),
-	QU( 6747117460737639916LLU), QU( 4732666080236551150LLU),
-	QU( 5912839950611941263LLU), QU( 3903717554504704909LLU),
-	QU( 2615667650256786818LLU), QU(10844129913887006352LLU),
-	QU(13786467861810997820LLU), QU(14267853002994021570LLU),
-	QU(13767807302847237439LLU), QU(16407963253707224617LLU),
-	QU( 4802498363698583497LLU), QU( 2523802839317209764LLU),
-	QU( 3822579397797475589LLU), QU( 8950320572212130610LLU),
-	QU( 3745623504978342534LLU), QU(16092609066068482806LLU),
-	QU( 9817016950274642398LLU), QU(10591660660323829098LLU),
-	QU(11751606650792815920LLU), QU( 5122873818577122211LLU),
-	QU(17209553764913936624LLU), QU( 6249057709284380343LLU),
-	QU(15088791264695071830LLU), QU(15344673071709851930LLU),
-	QU( 4345751415293646084LLU), QU( 2542865750703067928LLU),
-	QU(13520525127852368784LLU), QU(18294188662880997241LLU),
-	QU( 3871781938044881523LLU), QU( 2873487268122812184LLU),
-	QU(15099676759482679005LLU), QU(15442599127239350490LLU),
-	QU( 6311893274367710888LLU), QU( 3286118760484672933LLU),
-	QU( 4146067961333542189LLU), QU(13303942567897208770LLU),
-	QU( 8196013722255630418LLU), QU( 4437815439340979989LLU),
-	QU(15433791533450605135LLU), QU( 4254828956815687049LLU),
-	QU( 1310903207708286015LLU), QU(10529182764462398549LLU),
-	QU(14900231311660638810LLU), QU( 9727017277104609793LLU),
-	QU( 1821308310948199033LLU), QU(11628861435066772084LLU),
-	QU( 9469019138491546924LLU), QU( 3145812670532604988LLU),
-	QU( 9938468915045491919LLU), QU( 1562447430672662142LLU),
-	QU(13963995266697989134LLU), QU( 3356884357625028695LLU),
-	QU( 4499850304584309747LLU), QU( 8456825817023658122LLU),
-	QU(10859039922814285279LLU), QU( 8099512337972526555LLU),
-	QU(  348006375109672149LLU), QU(11919893998241688603LLU),
-	QU( 1104199577402948826LLU), QU(16689191854356060289LLU),
-	QU(10992552041730168078LLU), QU( 7243733172705465836LLU),
-	QU( 5668075606180319560LLU), QU(18182847037333286970LLU),
-	QU( 4290215357664631322LLU), QU( 4061414220791828613LLU),
-	QU(13006291061652989604LLU), QU( 7140491178917128798LLU),
-	QU(12703446217663283481LLU), QU( 5500220597564558267LLU),
-	QU(10330551509971296358LLU), QU(15958554768648714492LLU),
-	QU( 5174555954515360045LLU), QU( 1731318837687577735LLU),
-	QU( 3557700801048354857LLU), QU(13764012341928616198LLU),
-	QU(13115166194379119043LLU), QU( 7989321021560255519LLU),
-	QU( 2103584280905877040LLU), QU( 9230788662155228488LLU),
-	QU(16396629323325547654LLU), QU(  657926409811318051LLU),
-	QU(15046700264391400727LLU), QU( 5120132858771880830LLU),
-	QU( 7934160097989028561LLU), QU( 6963121488531976245LLU),
-	QU(17412329602621742089LLU), QU(15144843053931774092LLU),
-	QU(17204176651763054532LLU), QU(13166595387554065870LLU),
-	QU( 8590377810513960213LLU), QU( 5834365135373991938LLU),
-	QU( 7640913007182226243LLU), QU( 3479394703859418425LLU),
-	QU(16402784452644521040LLU), QU( 4993979809687083980LLU),
-	QU(13254522168097688865LLU), QU(15643659095244365219LLU),
-	QU( 5881437660538424982LLU), QU(11174892200618987379LLU),
-	QU(  254409966159711077LLU), QU(17158413043140549909LLU),
-	QU( 3638048789290376272LLU), QU( 1376816930299489190LLU),
-	QU( 4622462095217761923LLU), QU(15086407973010263515LLU),
-	QU(13253971772784692238LLU), QU( 5270549043541649236LLU),
-	QU(11182714186805411604LLU), QU(12283846437495577140LLU),
-	QU( 5297647149908953219LLU), QU(10047451738316836654LLU),
-	QU( 4938228100367874746LLU), QU(12328523025304077923LLU),
-	QU( 3601049438595312361LLU), QU( 9313624118352733770LLU),
-	QU(13322966086117661798LLU), QU(16660005705644029394LLU),
-	QU(11337677526988872373LLU), QU(13869299102574417795LLU),
-	QU(15642043183045645437LLU), QU( 3021755569085880019LLU),
-	QU( 4979741767761188161LLU), QU(13679979092079279587LLU),
-	QU( 3344685842861071743LLU), QU(13947960059899588104LLU),
-	QU(  305806934293368007LLU), QU( 5749173929201650029LLU),
-	QU(11123724852118844098LLU), QU(15128987688788879802LLU),
-	QU(15251651211024665009LLU), QU( 7689925933816577776LLU),
-	QU(16732804392695859449LLU), QU(17087345401014078468LLU),
-	QU(14315108589159048871LLU), QU( 4820700266619778917LLU),
-	QU(16709637539357958441LLU), QU( 4936227875177351374LLU),
-	QU( 2137907697912987247LLU), QU(11628565601408395420LLU),
-	QU( 2333250549241556786LLU), QU( 5711200379577778637LLU),
-	QU( 5170680131529031729LLU), QU(12620392043061335164LLU),
-	QU(   95363390101096078LLU), QU( 5487981914081709462LLU),
-	QU( 1763109823981838620LLU), QU( 3395861271473224396LLU),
-	QU( 1300496844282213595LLU), QU( 6894316212820232902LLU),
-	QU(10673859651135576674LLU), QU( 5911839658857903252LLU),
-	QU(17407110743387299102LLU), QU( 8257427154623140385LLU),
-	QU(11389003026741800267LLU), QU( 4070043211095013717LLU),
-	QU(11663806997145259025LLU), QU(15265598950648798210LLU),
-	QU(  630585789434030934LLU), QU( 3524446529213587334LLU),
-	QU( 7186424168495184211LLU), QU(10806585451386379021LLU),
-	QU(11120017753500499273LLU), QU( 1586837651387701301LLU),
-	QU(17530454400954415544LLU), QU( 9991670045077880430LLU),
-	QU( 7550997268990730180LLU), QU( 8640249196597379304LLU),
-	QU( 3522203892786893823LLU), QU(10401116549878854788LLU),
-	QU(13690285544733124852LLU), QU( 8295785675455774586LLU),
-	QU(15535716172155117603LLU), QU( 3112108583723722511LLU),
-	QU(17633179955339271113LLU), QU(18154208056063759375LLU),
-	QU( 1866409236285815666LLU), QU(13326075895396412882LLU),
-	QU( 8756261842948020025LLU), QU( 6281852999868439131LLU),
-	QU(15087653361275292858LLU), QU(10333923911152949397LLU),
-	QU( 5265567645757408500LLU), QU(12728041843210352184LLU),
-	QU( 6347959327507828759LLU), QU(  154112802625564758LLU),
-	QU(18235228308679780218LLU), QU( 3253805274673352418LLU),
-	QU( 4849171610689031197LLU), QU(17948529398340432518LLU),
-	QU(13803510475637409167LLU), QU(13506570190409883095LLU),
-	QU(15870801273282960805LLU), QU( 8451286481299170773LLU),
-	QU( 9562190620034457541LLU), QU( 8518905387449138364LLU),
-	QU(12681306401363385655LLU), QU( 3788073690559762558LLU),
-	QU( 5256820289573487769LLU), QU( 2752021372314875467LLU),
-	QU( 6354035166862520716LLU), QU( 4328956378309739069LLU),
-	QU(  449087441228269600LLU), QU( 5533508742653090868LLU),
-	QU( 1260389420404746988LLU), QU(18175394473289055097LLU),
-	QU( 1535467109660399420LLU), QU( 8818894282874061442LLU),
-	QU(12140873243824811213LLU), QU(15031386653823014946LLU),
-	QU( 1286028221456149232LLU), QU( 6329608889367858784LLU),
-	QU( 9419654354945132725LLU), QU( 6094576547061672379LLU),
-	QU(17706217251847450255LLU), QU( 1733495073065878126LLU),
-	QU(16918923754607552663LLU), QU( 8881949849954945044LLU),
-	QU(12938977706896313891LLU), QU(14043628638299793407LLU),
-	QU(18393874581723718233LLU), QU( 6886318534846892044LLU),
-	QU(14577870878038334081LLU), QU(13541558383439414119LLU),
-	QU(13570472158807588273LLU), QU(18300760537910283361LLU),
-	QU(  818368572800609205LLU), QU( 1417000585112573219LLU),
-	QU(12337533143867683655LLU), QU(12433180994702314480LLU),
-	QU(  778190005829189083LLU), QU(13667356216206524711LLU),
-	QU( 9866149895295225230LLU), QU(11043240490417111999LLU),
-	QU( 1123933826541378598LLU), QU( 6469631933605123610LLU),
-	QU(14508554074431980040LLU), QU(13918931242962026714LLU),
-	QU( 2870785929342348285LLU), QU(14786362626740736974LLU),
-	QU(13176680060902695786LLU), QU( 9591778613541679456LLU),
-	QU( 9097662885117436706LLU), QU(  749262234240924947LLU),
-	QU( 1944844067793307093LLU), QU( 4339214904577487742LLU),
-	QU( 8009584152961946551LLU), QU(16073159501225501777LLU),
-	QU( 3335870590499306217LLU), QU(17088312653151202847LLU),
-	QU( 3108893142681931848LLU), QU(16636841767202792021LLU),
-	QU(10423316431118400637LLU), QU( 8008357368674443506LLU),
-	QU(11340015231914677875LLU), QU(17687896501594936090LLU),
-	QU(15173627921763199958LLU), QU(  542569482243721959LLU),
-	QU(15071714982769812975LLU), QU( 4466624872151386956LLU),
-	QU( 1901780715602332461LLU), QU( 9822227742154351098LLU),
-	QU( 1479332892928648780LLU), QU( 6981611948382474400LLU),
-	QU( 7620824924456077376LLU), QU(14095973329429406782LLU),
-	QU( 7902744005696185404LLU), QU(15830577219375036920LLU),
-	QU(10287076667317764416LLU), QU(12334872764071724025LLU),
-	QU( 4419302088133544331LLU), QU(14455842851266090520LLU),
-	QU(12488077416504654222LLU), QU( 7953892017701886766LLU),
-	QU( 6331484925529519007LLU), QU( 4902145853785030022LLU),
-	QU(17010159216096443073LLU), QU(11945354668653886087LLU),
-	QU(15112022728645230829LLU), QU(17363484484522986742LLU),
-	QU( 4423497825896692887LLU), QU( 8155489510809067471LLU),
-	QU(  258966605622576285LLU), QU( 5462958075742020534LLU),
-	QU( 6763710214913276228LLU), QU( 2368935183451109054LLU),
-	QU(14209506165246453811LLU), QU( 2646257040978514881LLU),
-	QU( 3776001911922207672LLU), QU( 1419304601390147631LLU),
-	QU(14987366598022458284LLU), QU( 3977770701065815721LLU),
-	QU(  730820417451838898LLU), QU( 3982991703612885327LLU),
-	QU( 2803544519671388477LLU), QU(17067667221114424649LLU),
-	QU( 2922555119737867166LLU), QU( 1989477584121460932LLU),
-	QU(15020387605892337354LLU), QU( 9293277796427533547LLU),
-	QU(10722181424063557247LLU), QU(16704542332047511651LLU),
-	QU( 5008286236142089514LLU), QU(16174732308747382540LLU),
-	QU(17597019485798338402LLU), QU(13081745199110622093LLU),
-	QU( 8850305883842258115LLU), QU(12723629125624589005LLU),
-	QU( 8140566453402805978LLU), QU(15356684607680935061LLU),
-	QU(14222190387342648650LLU), QU(11134610460665975178LLU),
-	QU( 1259799058620984266LLU), QU(13281656268025610041LLU),
-	QU(  298262561068153992LLU), QU(12277871700239212922LLU),
-	QU(13911297774719779438LLU), QU(16556727962761474934LLU),
-	QU(17903010316654728010LLU), QU( 9682617699648434744LLU),
-	QU(14757681836838592850LLU), QU( 1327242446558524473LLU),
-	QU(11126645098780572792LLU), QU( 1883602329313221774LLU),
-	QU( 2543897783922776873LLU), QU(15029168513767772842LLU),
-	QU(12710270651039129878LLU), QU(16118202956069604504LLU),
-	QU(15010759372168680524LLU), QU( 2296827082251923948LLU),
-	QU(10793729742623518101LLU), QU(13829764151845413046LLU),
-	QU(17769301223184451213LLU), QU( 3118268169210783372LLU),
-	QU(17626204544105123127LLU), QU( 7416718488974352644LLU),
-	QU(10450751996212925994LLU), QU( 9352529519128770586LLU),
-	QU(  259347569641110140LLU), QU( 8048588892269692697LLU),
-	QU( 1774414152306494058LLU), QU(10669548347214355622LLU),
-	QU(13061992253816795081LLU), QU(18432677803063861659LLU),
-	QU( 8879191055593984333LLU), QU(12433753195199268041LLU),
-	QU(14919392415439730602LLU), QU( 6612848378595332963LLU),
-	QU( 6320986812036143628LLU), QU(10465592420226092859LLU),
-	QU( 4196009278962570808LLU), QU( 3747816564473572224LLU),
-	QU(17941203486133732898LLU), QU( 2350310037040505198LLU),
-	QU( 5811779859134370113LLU), QU(10492109599506195126LLU),
-	QU( 7699650690179541274LLU), QU( 1954338494306022961LLU),
-	QU(14095816969027231152LLU), QU( 5841346919964852061LLU),
-	QU(14945969510148214735LLU), QU( 3680200305887550992LLU),
-	QU( 6218047466131695792LLU), QU( 8242165745175775096LLU),
-	QU(11021371934053307357LLU), QU( 1265099502753169797LLU),
-	QU( 4644347436111321718LLU), QU( 3609296916782832859LLU),
-	QU( 8109807992218521571LLU), QU(18387884215648662020LLU),
-	QU(14656324896296392902LLU), QU(17386819091238216751LLU),
-	QU(17788300878582317152LLU), QU( 7919446259742399591LLU),
-	QU( 4466613134576358004LLU), QU(12928181023667938509LLU),
-	QU(13147446154454932030LLU), QU(16552129038252734620LLU),
-	QU( 8395299403738822450LLU), QU(11313817655275361164LLU),
-	QU(  434258809499511718LLU), QU( 2074882104954788676LLU),
-	QU( 7929892178759395518LLU), QU( 9006461629105745388LLU),
-	QU( 5176475650000323086LLU), QU(11128357033468341069LLU),
-	QU(12026158851559118955LLU), QU(14699716249471156500LLU),
-	QU(  448982497120206757LLU), QU( 4156475356685519900LLU),
-	QU( 6063816103417215727LLU), QU(10073289387954971479LLU),
-	QU( 8174466846138590962LLU), QU( 2675777452363449006LLU),
-	QU( 9090685420572474281LLU), QU( 6659652652765562060LLU),
-	QU(12923120304018106621LLU), QU(11117480560334526775LLU),
-	QU(  937910473424587511LLU), QU( 1838692113502346645LLU),
-	QU(11133914074648726180LLU), QU( 7922600945143884053LLU),
-	QU(13435287702700959550LLU), QU( 5287964921251123332LLU),
-	QU(11354875374575318947LLU), QU(17955724760748238133LLU),
-	QU(13728617396297106512LLU), QU( 4107449660118101255LLU),
-	QU( 1210269794886589623LLU), QU(11408687205733456282LLU),
-	QU( 4538354710392677887LLU), QU(13566803319341319267LLU),
-	QU(17870798107734050771LLU), QU( 3354318982568089135LLU),
-	QU( 9034450839405133651LLU), QU(13087431795753424314LLU),
-	QU(  950333102820688239LLU), QU( 1968360654535604116LLU),
-	QU(16840551645563314995LLU), QU( 8867501803892924995LLU),
-	QU(11395388644490626845LLU), QU( 1529815836300732204LLU),
-	QU(13330848522996608842LLU), QU( 1813432878817504265LLU),
-	QU( 2336867432693429560LLU), QU(15192805445973385902LLU),
-	QU( 2528593071076407877LLU), QU(  128459777936689248LLU),
-	QU( 9976345382867214866LLU), QU( 6208885766767996043LLU),
-	QU(14982349522273141706LLU), QU( 3099654362410737822LLU),
-	QU(13776700761947297661LLU), QU( 8806185470684925550LLU),
-	QU( 8151717890410585321LLU), QU(  640860591588072925LLU),
-	QU(14592096303937307465LLU), QU( 9056472419613564846LLU),
-	QU(14861544647742266352LLU), QU(12703771500398470216LLU),
-	QU( 3142372800384138465LLU), QU( 6201105606917248196LLU),
-	QU(18337516409359270184LLU), QU(15042268695665115339LLU),
-	QU(15188246541383283846LLU), QU(12800028693090114519LLU),
-	QU( 5992859621101493472LLU), QU(18278043971816803521LLU),
-	QU( 9002773075219424560LLU), QU( 7325707116943598353LLU),
-	QU( 7930571931248040822LLU), QU( 5645275869617023448LLU),
-	QU( 7266107455295958487LLU), QU( 4363664528273524411LLU),
-	QU(14313875763787479809LLU), QU(17059695613553486802LLU),
-	QU( 9247761425889940932LLU), QU(13704726459237593128LLU),
-	QU( 2701312427328909832LLU), QU(17235532008287243115LLU),
-	QU(14093147761491729538LLU), QU( 6247352273768386516LLU),
-	QU( 8268710048153268415LLU), QU( 7985295214477182083LLU),
-	QU(15624495190888896807LLU), QU( 3772753430045262788LLU),
-	QU( 9133991620474991698LLU), QU( 5665791943316256028LLU),
-	QU( 7551996832462193473LLU), QU(13163729206798953877LLU),
-	QU( 9263532074153846374LLU), QU( 1015460703698618353LLU),
-	QU(17929874696989519390LLU), QU(18257884721466153847LLU),
-	QU(16271867543011222991LLU), QU( 3905971519021791941LLU),
-	QU(16814488397137052085LLU), QU( 1321197685504621613LLU),
-	QU( 2870359191894002181LLU), QU(14317282970323395450LLU),
-	QU(13663920845511074366LLU), QU( 2052463995796539594LLU),
-	QU(14126345686431444337LLU), QU( 1727572121947022534LLU),
-	QU(17793552254485594241LLU), QU( 6738857418849205750LLU),
-	QU( 1282987123157442952LLU), QU(16655480021581159251LLU),
-	QU( 6784587032080183866LLU), QU(14726758805359965162LLU),
-	QU( 7577995933961987349LLU), QU(12539609320311114036LLU),
-	QU(10789773033385439494LLU), QU( 8517001497411158227LLU),
-	QU(10075543932136339710LLU), QU(14838152340938811081LLU),
-	QU( 9560840631794044194LLU), QU(17445736541454117475LLU),
-	QU(10633026464336393186LLU), QU(15705729708242246293LLU),
-	QU( 1117517596891411098LLU), QU( 4305657943415886942LLU),
-	QU( 4948856840533979263LLU), QU(16071681989041789593LLU),
-	QU(13723031429272486527LLU), QU( 7639567622306509462LLU),
-	QU(12670424537483090390LLU), QU( 9715223453097197134LLU),
-	QU( 5457173389992686394LLU), QU(  289857129276135145LLU),
-	QU(17048610270521972512LLU), QU(  692768013309835485LLU),
-	QU(14823232360546632057LLU), QU(18218002361317895936LLU),
-	QU( 3281724260212650204LLU), QU(16453957266549513795LLU),
-	QU( 8592711109774511881LLU), QU(  929825123473369579LLU),
-	QU(15966784769764367791LLU), QU( 9627344291450607588LLU),
-	QU(10849555504977813287LLU), QU( 9234566913936339275LLU),
-	QU( 6413807690366911210LLU), QU(10862389016184219267LLU),
-	QU(13842504799335374048LLU), QU( 1531994113376881174LLU),
-	QU( 2081314867544364459LLU), QU(16430628791616959932LLU),
-	QU( 8314714038654394368LLU), QU( 9155473892098431813LLU),
-	QU(12577843786670475704LLU), QU( 4399161106452401017LLU),
-	QU( 1668083091682623186LLU), QU( 1741383777203714216LLU),
-	QU( 2162597285417794374LLU), QU(15841980159165218736LLU),
-	QU( 1971354603551467079LLU), QU( 1206714764913205968LLU),
-	QU( 4790860439591272330LLU), QU(14699375615594055799LLU),
-	QU( 8374423871657449988LLU), QU(10950685736472937738LLU),
-	QU(  697344331343267176LLU), QU(10084998763118059810LLU),
-	QU(12897369539795983124LLU), QU(12351260292144383605LLU),
-	QU( 1268810970176811234LLU), QU( 7406287800414582768LLU),
-	QU(  516169557043807831LLU), QU( 5077568278710520380LLU),
-	QU( 3828791738309039304LLU), QU( 7721974069946943610LLU),
-	QU( 3534670260981096460LLU), QU( 4865792189600584891LLU),
-	QU(16892578493734337298LLU), QU( 9161499464278042590LLU),
-	QU(11976149624067055931LLU), QU(13219479887277343990LLU),
-	QU(14161556738111500680LLU), QU(14670715255011223056LLU),
-	QU( 4671205678403576558LLU), QU(12633022931454259781LLU),
-	QU(14821376219869187646LLU), QU(  751181776484317028LLU),
-	QU( 2192211308839047070LLU), QU(11787306362361245189LLU),
-	QU(10672375120744095707LLU), QU( 4601972328345244467LLU),
-	QU(15457217788831125879LLU), QU( 8464345256775460809LLU),
-	QU(10191938789487159478LLU), QU( 6184348739615197613LLU),
-	QU(11425436778806882100LLU), QU( 2739227089124319793LLU),
-	QU(  461464518456000551LLU), QU( 4689850170029177442LLU),
-	QU( 6120307814374078625LLU), QU(11153579230681708671LLU),
-	QU( 7891721473905347926LLU), QU(10281646937824872400LLU),
-	QU( 3026099648191332248LLU), QU( 8666750296953273818LLU),
-	QU(14978499698844363232LLU), QU(13303395102890132065LLU),
-	QU( 8182358205292864080LLU), QU(10560547713972971291LLU),
-	QU(11981635489418959093LLU), QU( 3134621354935288409LLU),
-	QU(11580681977404383968LLU), QU(14205530317404088650LLU),
-	QU( 5997789011854923157LLU), QU(13659151593432238041LLU),
-	QU(11664332114338865086LLU), QU( 7490351383220929386LLU),
-	QU( 7189290499881530378LLU), QU(15039262734271020220LLU),
-	QU( 2057217285976980055LLU), QU(  555570804905355739LLU),
-	QU(11235311968348555110LLU), QU(13824557146269603217LLU),
-	QU(16906788840653099693LLU), QU( 7222878245455661677LLU),
-	QU( 5245139444332423756LLU), QU( 4723748462805674292LLU),
-	QU(12216509815698568612LLU), QU(17402362976648951187LLU),
-	QU(17389614836810366768LLU), QU( 4880936484146667711LLU),
-	QU( 9085007839292639880LLU), QU(13837353458498535449LLU),
-	QU(11914419854360366677LLU), QU(16595890135313864103LLU),
-	QU( 6313969847197627222LLU), QU(18296909792163910431LLU),
-	QU(10041780113382084042LLU), QU( 2499478551172884794LLU),
-	QU(11057894246241189489LLU), QU( 9742243032389068555LLU),
-	QU(12838934582673196228LLU), QU(13437023235248490367LLU),
-	QU(13372420669446163240LLU), QU( 6752564244716909224LLU),
-	QU( 7157333073400313737LLU), QU(12230281516370654308LLU),
-	QU( 1182884552219419117LLU), QU( 2955125381312499218LLU),
-	QU(10308827097079443249LLU), QU( 1337648572986534958LLU),
-	QU(16378788590020343939LLU), QU(  108619126514420935LLU),
-	QU( 3990981009621629188LLU), QU( 5460953070230946410LLU),
-	QU( 9703328329366531883LLU), QU(13166631489188077236LLU),
-	QU( 1104768831213675170LLU), QU( 3447930458553877908LLU),
-	QU( 8067172487769945676LLU), QU( 5445802098190775347LLU),
-	QU( 3244840981648973873LLU), QU(17314668322981950060LLU),
-	QU( 5006812527827763807LLU), QU(18158695070225526260LLU),
-	QU( 2824536478852417853LLU), QU(13974775809127519886LLU),
-	QU( 9814362769074067392LLU), QU(17276205156374862128LLU),
-	QU(11361680725379306967LLU), QU( 3422581970382012542LLU),
-	QU(11003189603753241266LLU), QU(11194292945277862261LLU),
-	QU( 6839623313908521348LLU), QU(11935326462707324634LLU),
-	QU( 1611456788685878444LLU), QU(13112620989475558907LLU),
-	QU(  517659108904450427LLU), QU(13558114318574407624LLU),
-	QU(15699089742731633077LLU), QU( 4988979278862685458LLU),
-	QU( 8111373583056521297LLU), QU( 3891258746615399627LLU),
-	QU( 8137298251469718086LLU), QU(12748663295624701649LLU),
-	QU( 4389835683495292062LLU), QU( 5775217872128831729LLU),
-	QU( 9462091896405534927LLU), QU( 8498124108820263989LLU),
-	QU( 8059131278842839525LLU), QU(10503167994254090892LLU),
-	QU(11613153541070396656LLU), QU(18069248738504647790LLU),
-	QU(  570657419109768508LLU), QU( 3950574167771159665LLU),
-	QU( 5514655599604313077LLU), QU( 2908460854428484165LLU),
-	QU(10777722615935663114LLU), QU(12007363304839279486LLU),
-	QU( 9800646187569484767LLU), QU( 8795423564889864287LLU),
-	QU(14257396680131028419LLU), QU( 6405465117315096498LLU),
-	QU( 7939411072208774878LLU), QU(17577572378528990006LLU),
-	QU(14785873806715994850LLU), QU(16770572680854747390LLU),
-	QU(18127549474419396481LLU), QU(11637013449455757750LLU),
-	QU(14371851933996761086LLU), QU( 3601181063650110280LLU),
-	QU( 4126442845019316144LLU), QU(10198287239244320669LLU),
-	QU(18000169628555379659LLU), QU(18392482400739978269LLU),
-	QU( 6219919037686919957LLU), QU( 3610085377719446052LLU),
-	QU( 2513925039981776336LLU), QU(16679413537926716955LLU),
-	QU(12903302131714909434LLU), QU( 5581145789762985009LLU),
-	QU(12325955044293303233LLU), QU(17216111180742141204LLU),
-	QU( 6321919595276545740LLU), QU( 3507521147216174501LLU),
-	QU( 9659194593319481840LLU), QU(11473976005975358326LLU),
-	QU(14742730101435987026LLU), QU(  492845897709954780LLU),
-	QU(16976371186162599676LLU), QU(17712703422837648655LLU),
-	QU( 9881254778587061697LLU), QU( 8413223156302299551LLU),
-	QU( 1563841828254089168LLU), QU( 9996032758786671975LLU),
-	QU(  138877700583772667LLU), QU(13003043368574995989LLU),
-	QU( 4390573668650456587LLU), QU( 8610287390568126755LLU),
-	QU(15126904974266642199LLU), QU( 6703637238986057662LLU),
-	QU( 2873075592956810157LLU), QU( 6035080933946049418LLU),
-	QU(13382846581202353014LLU), QU( 7303971031814642463LLU),
-	QU(18418024405307444267LLU), QU( 5847096731675404647LLU),
-	QU( 4035880699639842500LLU), QU(11525348625112218478LLU),
-	QU( 3041162365459574102LLU), QU( 2604734487727986558LLU),
-	QU(15526341771636983145LLU), QU(14556052310697370254LLU),
-	QU(12997787077930808155LLU), QU( 9601806501755554499LLU),
-	QU(11349677952521423389LLU), QU(14956777807644899350LLU),
-	QU(16559736957742852721LLU), QU(12360828274778140726LLU),
-	QU( 6685373272009662513LLU), QU(16932258748055324130LLU),
-	QU(15918051131954158508LLU), QU( 1692312913140790144LLU),
-	QU(  546653826801637367LLU), QU( 5341587076045986652LLU),
-	QU(14975057236342585662LLU), QU(12374976357340622412LLU),
-	QU(10328833995181940552LLU), QU(12831807101710443149LLU),
-	QU(10548514914382545716LLU), QU( 2217806727199715993LLU),
-	QU(12627067369242845138LLU), QU( 4598965364035438158LLU),
-	QU(  150923352751318171LLU), QU(14274109544442257283LLU),
-	QU( 4696661475093863031LLU), QU( 1505764114384654516LLU),
-	QU(10699185831891495147LLU), QU( 2392353847713620519LLU),
-	QU( 3652870166711788383LLU), QU( 8640653276221911108LLU),
-	QU( 3894077592275889704LLU), QU( 4918592872135964845LLU),
-	QU(16379121273281400789LLU), QU(12058465483591683656LLU),
-	QU(11250106829302924945LLU), QU( 1147537556296983005LLU),
-	QU( 6376342756004613268LLU), QU(14967128191709280506LLU),
-	QU(18007449949790627628LLU), QU( 9497178279316537841LLU),
-	QU( 7920174844809394893LLU), QU(10037752595255719907LLU),
-	QU(15875342784985217697LLU), QU(15311615921712850696LLU),
-	QU( 9552902652110992950LLU), QU(14054979450099721140LLU),
-	QU( 5998709773566417349LLU), QU(18027910339276320187LLU),
-	QU( 8223099053868585554LLU), QU( 7842270354824999767LLU),
-	QU( 4896315688770080292LLU), QU(12969320296569787895LLU),
-	QU( 2674321489185759961LLU), QU( 4053615936864718439LLU),
-	QU(11349775270588617578LLU), QU( 4743019256284553975LLU),
-	QU( 5602100217469723769LLU), QU(14398995691411527813LLU),
-	QU( 7412170493796825470LLU), QU(  836262406131744846LLU),
-	QU( 8231086633845153022LLU), QU( 5161377920438552287LLU),
-	QU( 8828731196169924949LLU), QU(16211142246465502680LLU),
-	QU( 3307990879253687818LLU), QU( 5193405406899782022LLU),
-	QU( 8510842117467566693LLU), QU( 6070955181022405365LLU),
-	QU(14482950231361409799LLU), QU(12585159371331138077LLU),
-	QU( 3511537678933588148LLU), QU( 2041849474531116417LLU),
-	QU(10944936685095345792LLU), QU(18303116923079107729LLU),
-	QU( 2720566371239725320LLU), QU( 4958672473562397622LLU),
-	QU( 3032326668253243412LLU), QU(13689418691726908338LLU),
-	QU( 1895205511728843996LLU), QU( 8146303515271990527LLU),
-	QU(16507343500056113480LLU), QU(  473996939105902919LLU),
-	QU( 9897686885246881481LLU), QU(14606433762712790575LLU),
-	QU( 6732796251605566368LLU), QU( 1399778120855368916LLU),
-	QU(  935023885182833777LLU), QU(16066282816186753477LLU),
-	QU( 7291270991820612055LLU), QU(17530230393129853844LLU),
-	QU(10223493623477451366LLU), QU(15841725630495676683LLU),
-	QU(17379567246435515824LLU), QU( 8588251429375561971LLU),
-	QU(18339511210887206423LLU), QU(17349587430725976100LLU),
-	QU(12244876521394838088LLU), QU( 6382187714147161259LLU),
-	QU(12335807181848950831LLU), QU(16948885622305460665LLU),
-	QU(13755097796371520506LLU), QU(14806740373324947801LLU),
-	QU( 4828699633859287703LLU), QU( 8209879281452301604LLU),
-	QU(12435716669553736437LLU), QU(13970976859588452131LLU),
-	QU( 6233960842566773148LLU), QU(12507096267900505759LLU),
-	QU( 1198713114381279421LLU), QU(14989862731124149015LLU),
-	QU(15932189508707978949LLU), QU( 2526406641432708722LLU),
-	QU(   29187427817271982LLU), QU( 1499802773054556353LLU),
-	QU(10816638187021897173LLU), QU( 5436139270839738132LLU),
-	QU( 6659882287036010082LLU), QU( 2154048955317173697LLU),
-	QU(10887317019333757642LLU), QU(16281091802634424955LLU),
-	QU(10754549879915384901LLU), QU(10760611745769249815LLU),
-	QU( 2161505946972504002LLU), QU( 5243132808986265107LLU),
-	QU(10129852179873415416LLU), QU(  710339480008649081LLU),
-	QU( 7802129453068808528LLU), QU(17967213567178907213LLU),
-	QU(15730859124668605599LLU), QU(13058356168962376502LLU),
-	QU( 3701224985413645909LLU), QU(14464065869149109264LLU),
-	QU( 9959272418844311646LLU), QU(10157426099515958752LLU),
-	QU(14013736814538268528LLU), QU(17797456992065653951LLU),
-	QU(17418878140257344806LLU), QU(15457429073540561521LLU),
-	QU( 2184426881360949378LLU), QU( 2062193041154712416LLU),
-	QU( 8553463347406931661LLU), QU( 4913057625202871854LLU),
-	QU( 2668943682126618425LLU), QU(17064444737891172288LLU),
-	QU( 4997115903913298637LLU), QU(12019402608892327416LLU),
-	QU(17603584559765897352LLU), QU(11367529582073647975LLU),
-	QU( 8211476043518436050LLU), QU( 8676849804070323674LLU),
-	QU(18431829230394475730LLU), QU(10490177861361247904LLU),
-	QU( 9508720602025651349LLU), QU( 7409627448555722700LLU),
-	QU( 5804047018862729008LLU), QU(11943858176893142594LLU),
-	QU(11908095418933847092LLU), QU( 5415449345715887652LLU),
-	QU( 1554022699166156407LLU), QU( 9073322106406017161LLU),
-	QU( 7080630967969047082LLU), QU(18049736940860732943LLU),
-	QU(12748714242594196794LLU), QU( 1226992415735156741LLU),
-	QU(17900981019609531193LLU), QU(11720739744008710999LLU),
-	QU( 3006400683394775434LLU), QU(11347974011751996028LLU),
-	QU( 3316999628257954608LLU), QU( 8384484563557639101LLU),
-	QU(18117794685961729767LLU), QU( 1900145025596618194LLU),
-	QU(17459527840632892676LLU), QU( 5634784101865710994LLU),
-	QU( 7918619300292897158LLU), QU( 3146577625026301350LLU),
-	QU( 9955212856499068767LLU), QU( 1873995843681746975LLU),
-	QU( 1561487759967972194LLU), QU( 8322718804375878474LLU),
-	QU(11300284215327028366LLU), QU( 4667391032508998982LLU),
-	QU( 9820104494306625580LLU), QU(17922397968599970610LLU),
-	QU( 1784690461886786712LLU), QU(14940365084341346821LLU),
-	QU( 5348719575594186181LLU), QU(10720419084507855261LLU),
-	QU(14210394354145143274LLU), QU( 2426468692164000131LLU),
-	QU(16271062114607059202LLU), QU(14851904092357070247LLU),
-	QU( 6524493015693121897LLU), QU( 9825473835127138531LLU),
-	QU(14222500616268569578LLU), QU(15521484052007487468LLU),
-	QU(14462579404124614699LLU), QU(11012375590820665520LLU),
-	QU(11625327350536084927LLU), QU(14452017765243785417LLU),
-	QU( 9989342263518766305LLU), QU( 3640105471101803790LLU),
-	QU( 4749866455897513242LLU), QU(13963064946736312044LLU),
-	QU(10007416591973223791LLU), QU(18314132234717431115LLU),
-	QU( 3286596588617483450LLU), QU( 7726163455370818765LLU),
-	QU( 7575454721115379328LLU), QU( 5308331576437663422LLU),
-	QU(18288821894903530934LLU), QU( 8028405805410554106LLU),
-	QU(15744019832103296628LLU), QU(  149765559630932100LLU),
-	QU( 6137705557200071977LLU), QU(14513416315434803615LLU),
-	QU(11665702820128984473LLU), QU(  218926670505601386LLU),
-	QU( 6868675028717769519LLU), QU(15282016569441512302LLU),
-	QU( 5707000497782960236LLU), QU( 6671120586555079567LLU),
-	QU( 2194098052618985448LLU), QU(16849577895477330978LLU),
-	QU(12957148471017466283LLU), QU( 1997805535404859393LLU),
-	QU( 1180721060263860490LLU), QU(13206391310193756958LLU),
-	QU(12980208674461861797LLU), QU( 3825967775058875366LLU),
-	QU(17543433670782042631LLU), QU( 1518339070120322730LLU),
-	QU(16344584340890991669LLU), QU( 2611327165318529819LLU),
-	QU(11265022723283422529LLU), QU( 4001552800373196817LLU),
-	QU(14509595890079346161LLU), QU( 3528717165416234562LLU),
-	QU(18153222571501914072LLU), QU( 9387182977209744425LLU),
-	QU(10064342315985580021LLU), QU(11373678413215253977LLU),
-	QU( 2308457853228798099LLU), QU( 9729042942839545302LLU),
-	QU( 7833785471140127746LLU), QU( 6351049900319844436LLU),
-	QU(14454610627133496067LLU), QU(12533175683634819111LLU),
-	QU(15570163926716513029LLU), QU(13356980519185762498LLU)
+	QU( 2100341266307895239ULL), QU( 8344256300489757943ULL),
+	QU(15687933285484243894ULL), QU( 8268620370277076319ULL),
+	QU(12371852309826545459ULL), QU( 8800491541730110238ULL),
+	QU(18113268950100835773ULL), QU( 2886823658884438119ULL),
+	QU( 3293667307248180724ULL), QU( 9307928143300172731ULL),
+	QU( 7688082017574293629ULL), QU(  900986224735166665ULL),
+	QU( 9977972710722265039ULL), QU( 6008205004994830552ULL),
+	QU(  546909104521689292ULL), QU( 7428471521869107594ULL),
+	QU(14777563419314721179ULL), QU(16116143076567350053ULL),
+	QU( 5322685342003142329ULL), QU( 4200427048445863473ULL),
+	QU( 4693092150132559146ULL), QU(13671425863759338582ULL),
+	QU( 6747117460737639916ULL), QU( 4732666080236551150ULL),
+	QU( 5912839950611941263ULL), QU( 3903717554504704909ULL),
+	QU( 2615667650256786818ULL), QU(10844129913887006352ULL),
+	QU(13786467861810997820ULL), QU(14267853002994021570ULL),
+	QU(13767807302847237439ULL), QU(16407963253707224617ULL),
+	QU( 4802498363698583497ULL), QU( 2523802839317209764ULL),
+	QU( 3822579397797475589ULL), QU( 8950320572212130610ULL),
+	QU( 3745623504978342534ULL), QU(16092609066068482806ULL),
+	QU( 9817016950274642398ULL), QU(10591660660323829098ULL),
+	QU(11751606650792815920ULL), QU( 5122873818577122211ULL),
+	QU(17209553764913936624ULL), QU( 6249057709284380343ULL),
+	QU(15088791264695071830ULL), QU(15344673071709851930ULL),
+	QU( 4345751415293646084ULL), QU( 2542865750703067928ULL),
+	QU(13520525127852368784ULL), QU(18294188662880997241ULL),
+	QU( 3871781938044881523ULL), QU( 2873487268122812184ULL),
+	QU(15099676759482679005ULL), QU(15442599127239350490ULL),
+	QU( 6311893274367710888ULL), QU( 3286118760484672933ULL),
+	QU( 4146067961333542189ULL), QU(13303942567897208770ULL),
+	QU( 8196013722255630418ULL), QU( 4437815439340979989ULL),
+	QU(15433791533450605135ULL), QU( 4254828956815687049ULL),
+	QU( 1310903207708286015ULL), QU(10529182764462398549ULL),
+	QU(14900231311660638810ULL), QU( 9727017277104609793ULL),
+	QU( 1821308310948199033ULL), QU(11628861435066772084ULL),
+	QU( 9469019138491546924ULL), QU( 3145812670532604988ULL),
+	QU( 9938468915045491919ULL), QU( 1562447430672662142ULL),
+	QU(13963995266697989134ULL), QU( 3356884357625028695ULL),
+	QU( 4499850304584309747ULL), QU( 8456825817023658122ULL),
+	QU(10859039922814285279ULL), QU( 8099512337972526555ULL),
+	QU(  348006375109672149ULL), QU(11919893998241688603ULL),
+	QU( 1104199577402948826ULL), QU(16689191854356060289ULL),
+	QU(10992552041730168078ULL), QU( 7243733172705465836ULL),
+	QU( 5668075606180319560ULL), QU(18182847037333286970ULL),
+	QU( 4290215357664631322ULL), QU( 4061414220791828613ULL),
+	QU(13006291061652989604ULL), QU( 7140491178917128798ULL),
+	QU(12703446217663283481ULL), QU( 5500220597564558267ULL),
+	QU(10330551509971296358ULL), QU(15958554768648714492ULL),
+	QU( 5174555954515360045ULL), QU( 1731318837687577735ULL),
+	QU( 3557700801048354857ULL), QU(13764012341928616198ULL),
+	QU(13115166194379119043ULL), QU( 7989321021560255519ULL),
+	QU( 2103584280905877040ULL), QU( 9230788662155228488ULL),
+	QU(16396629323325547654ULL), QU(  657926409811318051ULL),
+	QU(15046700264391400727ULL), QU( 5120132858771880830ULL),
+	QU( 7934160097989028561ULL), QU( 6963121488531976245ULL),
+	QU(17412329602621742089ULL), QU(15144843053931774092ULL),
+	QU(17204176651763054532ULL), QU(13166595387554065870ULL),
+	QU( 8590377810513960213ULL), QU( 5834365135373991938ULL),
+	QU( 7640913007182226243ULL), QU( 3479394703859418425ULL),
+	QU(16402784452644521040ULL), QU( 4993979809687083980ULL),
+	QU(13254522168097688865ULL), QU(15643659095244365219ULL),
+	QU( 5881437660538424982ULL), QU(11174892200618987379ULL),
+	QU(  254409966159711077ULL), QU(17158413043140549909ULL),
+	QU( 3638048789290376272ULL), QU( 1376816930299489190ULL),
+	QU( 4622462095217761923ULL), QU(15086407973010263515ULL),
+	QU(13253971772784692238ULL), QU( 5270549043541649236ULL),
+	QU(11182714186805411604ULL), QU(12283846437495577140ULL),
+	QU( 5297647149908953219ULL), QU(10047451738316836654ULL),
+	QU( 4938228100367874746ULL), QU(12328523025304077923ULL),
+	QU( 3601049438595312361ULL), QU( 9313624118352733770ULL),
+	QU(13322966086117661798ULL), QU(16660005705644029394ULL),
+	QU(11337677526988872373ULL), QU(13869299102574417795ULL),
+	QU(15642043183045645437ULL), QU( 3021755569085880019ULL),
+	QU( 4979741767761188161ULL), QU(13679979092079279587ULL),
+	QU( 3344685842861071743ULL), QU(13947960059899588104ULL),
+	QU(  305806934293368007ULL), QU( 5749173929201650029ULL),
+	QU(11123724852118844098ULL), QU(15128987688788879802ULL),
+	QU(15251651211024665009ULL), QU( 7689925933816577776ULL),
+	QU(16732804392695859449ULL), QU(17087345401014078468ULL),
+	QU(14315108589159048871ULL), QU( 4820700266619778917ULL),
+	QU(16709637539357958441ULL), QU( 4936227875177351374ULL),
+	QU( 2137907697912987247ULL), QU(11628565601408395420ULL),
+	QU( 2333250549241556786ULL), QU( 5711200379577778637ULL),
+	QU( 5170680131529031729ULL), QU(12620392043061335164ULL),
+	QU(   95363390101096078ULL), QU( 5487981914081709462ULL),
+	QU( 1763109823981838620ULL), QU( 3395861271473224396ULL),
+	QU( 1300496844282213595ULL), QU( 6894316212820232902ULL),
+	QU(10673859651135576674ULL), QU( 5911839658857903252ULL),
+	QU(17407110743387299102ULL), QU( 8257427154623140385ULL),
+	QU(11389003026741800267ULL), QU( 4070043211095013717ULL),
+	QU(11663806997145259025ULL), QU(15265598950648798210ULL),
+	QU(  630585789434030934ULL), QU( 3524446529213587334ULL),
+	QU( 7186424168495184211ULL), QU(10806585451386379021ULL),
+	QU(11120017753500499273ULL), QU( 1586837651387701301ULL),
+	QU(17530454400954415544ULL), QU( 9991670045077880430ULL),
+	QU( 7550997268990730180ULL), QU( 8640249196597379304ULL),
+	QU( 3522203892786893823ULL), QU(10401116549878854788ULL),
+	QU(13690285544733124852ULL), QU( 8295785675455774586ULL),
+	QU(15535716172155117603ULL), QU( 3112108583723722511ULL),
+	QU(17633179955339271113ULL), QU(18154208056063759375ULL),
+	QU( 1866409236285815666ULL), QU(13326075895396412882ULL),
+	QU( 8756261842948020025ULL), QU( 6281852999868439131ULL),
+	QU(15087653361275292858ULL), QU(10333923911152949397ULL),
+	QU( 5265567645757408500ULL), QU(12728041843210352184ULL),
+	QU( 6347959327507828759ULL), QU(  154112802625564758ULL),
+	QU(18235228308679780218ULL), QU( 3253805274673352418ULL),
+	QU( 4849171610689031197ULL), QU(17948529398340432518ULL),
+	QU(13803510475637409167ULL), QU(13506570190409883095ULL),
+	QU(15870801273282960805ULL), QU( 8451286481299170773ULL),
+	QU( 9562190620034457541ULL), QU( 8518905387449138364ULL),
+	QU(12681306401363385655ULL), QU( 3788073690559762558ULL),
+	QU( 5256820289573487769ULL), QU( 2752021372314875467ULL),
+	QU( 6354035166862520716ULL), QU( 4328956378309739069ULL),
+	QU(  449087441228269600ULL), QU( 5533508742653090868ULL),
+	QU( 1260389420404746988ULL), QU(18175394473289055097ULL),
+	QU( 1535467109660399420ULL), QU( 8818894282874061442ULL),
+	QU(12140873243824811213ULL), QU(15031386653823014946ULL),
+	QU( 1286028221456149232ULL), QU( 6329608889367858784ULL),
+	QU( 9419654354945132725ULL), QU( 6094576547061672379ULL),
+	QU(17706217251847450255ULL), QU( 1733495073065878126ULL),
+	QU(16918923754607552663ULL), QU( 8881949849954945044ULL),
+	QU(12938977706896313891ULL), QU(14043628638299793407ULL),
+	QU(18393874581723718233ULL), QU( 6886318534846892044ULL),
+	QU(14577870878038334081ULL), QU(13541558383439414119ULL),
+	QU(13570472158807588273ULL), QU(18300760537910283361ULL),
+	QU(  818368572800609205ULL), QU( 1417000585112573219ULL),
+	QU(12337533143867683655ULL), QU(12433180994702314480ULL),
+	QU(  778190005829189083ULL), QU(13667356216206524711ULL),
+	QU( 9866149895295225230ULL), QU(11043240490417111999ULL),
+	QU( 1123933826541378598ULL), QU( 6469631933605123610ULL),
+	QU(14508554074431980040ULL), QU(13918931242962026714ULL),
+	QU( 2870785929342348285ULL), QU(14786362626740736974ULL),
+	QU(13176680060902695786ULL), QU( 9591778613541679456ULL),
+	QU( 9097662885117436706ULL), QU(  749262234240924947ULL),
+	QU( 1944844067793307093ULL), QU( 4339214904577487742ULL),
+	QU( 8009584152961946551ULL), QU(16073159501225501777ULL),
+	QU( 3335870590499306217ULL), QU(17088312653151202847ULL),
+	QU( 3108893142681931848ULL), QU(16636841767202792021ULL),
+	QU(10423316431118400637ULL), QU( 8008357368674443506ULL),
+	QU(11340015231914677875ULL), QU(17687896501594936090ULL),
+	QU(15173627921763199958ULL), QU(  542569482243721959ULL),
+	QU(15071714982769812975ULL), QU( 4466624872151386956ULL),
+	QU( 1901780715602332461ULL), QU( 9822227742154351098ULL),
+	QU( 1479332892928648780ULL), QU( 6981611948382474400ULL),
+	QU( 7620824924456077376ULL), QU(14095973329429406782ULL),
+	QU( 7902744005696185404ULL), QU(15830577219375036920ULL),
+	QU(10287076667317764416ULL), QU(12334872764071724025ULL),
+	QU( 4419302088133544331ULL), QU(14455842851266090520ULL),
+	QU(12488077416504654222ULL), QU( 7953892017701886766ULL),
+	QU( 6331484925529519007ULL), QU( 4902145853785030022ULL),
+	QU(17010159216096443073ULL), QU(11945354668653886087ULL),
+	QU(15112022728645230829ULL), QU(17363484484522986742ULL),
+	QU( 4423497825896692887ULL), QU( 8155489510809067471ULL),
+	QU(  258966605622576285ULL), QU( 5462958075742020534ULL),
+	QU( 6763710214913276228ULL), QU( 2368935183451109054ULL),
+	QU(14209506165246453811ULL), QU( 2646257040978514881ULL),
+	QU( 3776001911922207672ULL), QU( 1419304601390147631ULL),
+	QU(14987366598022458284ULL), QU( 3977770701065815721ULL),
+	QU(  730820417451838898ULL), QU( 3982991703612885327ULL),
+	QU( 2803544519671388477ULL), QU(17067667221114424649ULL),
+	QU( 2922555119737867166ULL), QU( 1989477584121460932ULL),
+	QU(15020387605892337354ULL), QU( 9293277796427533547ULL),
+	QU(10722181424063557247ULL), QU(16704542332047511651ULL),
+	QU( 5008286236142089514ULL), QU(16174732308747382540ULL),
+	QU(17597019485798338402ULL), QU(13081745199110622093ULL),
+	QU( 8850305883842258115ULL), QU(12723629125624589005ULL),
+	QU( 8140566453402805978ULL), QU(15356684607680935061ULL),
+	QU(14222190387342648650ULL), QU(11134610460665975178ULL),
+	QU( 1259799058620984266ULL), QU(13281656268025610041ULL),
+	QU(  298262561068153992ULL), QU(12277871700239212922ULL),
+	QU(13911297774719779438ULL), QU(16556727962761474934ULL),
+	QU(17903010316654728010ULL), QU( 9682617699648434744ULL),
+	QU(14757681836838592850ULL), QU( 1327242446558524473ULL),
+	QU(11126645098780572792ULL), QU( 1883602329313221774ULL),
+	QU( 2543897783922776873ULL), QU(15029168513767772842ULL),
+	QU(12710270651039129878ULL), QU(16118202956069604504ULL),
+	QU(15010759372168680524ULL), QU( 2296827082251923948ULL),
+	QU(10793729742623518101ULL), QU(13829764151845413046ULL),
+	QU(17769301223184451213ULL), QU( 3118268169210783372ULL),
+	QU(17626204544105123127ULL), QU( 7416718488974352644ULL),
+	QU(10450751996212925994ULL), QU( 9352529519128770586ULL),
+	QU(  259347569641110140ULL), QU( 8048588892269692697ULL),
+	QU( 1774414152306494058ULL), QU(10669548347214355622ULL),
+	QU(13061992253816795081ULL), QU(18432677803063861659ULL),
+	QU( 8879191055593984333ULL), QU(12433753195199268041ULL),
+	QU(14919392415439730602ULL), QU( 6612848378595332963ULL),
+	QU( 6320986812036143628ULL), QU(10465592420226092859ULL),
+	QU( 4196009278962570808ULL), QU( 3747816564473572224ULL),
+	QU(17941203486133732898ULL), QU( 2350310037040505198ULL),
+	QU( 5811779859134370113ULL), QU(10492109599506195126ULL),
+	QU( 7699650690179541274ULL), QU( 1954338494306022961ULL),
+	QU(14095816969027231152ULL), QU( 5841346919964852061ULL),
+	QU(14945969510148214735ULL), QU( 3680200305887550992ULL),
+	QU( 6218047466131695792ULL), QU( 8242165745175775096ULL),
+	QU(11021371934053307357ULL), QU( 1265099502753169797ULL),
+	QU( 4644347436111321718ULL), QU( 3609296916782832859ULL),
+	QU( 8109807992218521571ULL), QU(18387884215648662020ULL),
+	QU(14656324896296392902ULL), QU(17386819091238216751ULL),
+	QU(17788300878582317152ULL), QU( 7919446259742399591ULL),
+	QU( 4466613134576358004ULL), QU(12928181023667938509ULL),
+	QU(13147446154454932030ULL), QU(16552129038252734620ULL),
+	QU( 8395299403738822450ULL), QU(11313817655275361164ULL),
+	QU(  434258809499511718ULL), QU( 2074882104954788676ULL),
+	QU( 7929892178759395518ULL), QU( 9006461629105745388ULL),
+	QU( 5176475650000323086ULL), QU(11128357033468341069ULL),
+	QU(12026158851559118955ULL), QU(14699716249471156500ULL),
+	QU(  448982497120206757ULL), QU( 4156475356685519900ULL),
+	QU( 6063816103417215727ULL), QU(10073289387954971479ULL),
+	QU( 8174466846138590962ULL), QU( 2675777452363449006ULL),
+	QU( 9090685420572474281ULL), QU( 6659652652765562060ULL),
+	QU(12923120304018106621ULL), QU(11117480560334526775ULL),
+	QU(  937910473424587511ULL), QU( 1838692113502346645ULL),
+	QU(11133914074648726180ULL), QU( 7922600945143884053ULL),
+	QU(13435287702700959550ULL), QU( 5287964921251123332ULL),
+	QU(11354875374575318947ULL), QU(17955724760748238133ULL),
+	QU(13728617396297106512ULL), QU( 4107449660118101255ULL),
+	QU( 1210269794886589623ULL), QU(11408687205733456282ULL),
+	QU( 4538354710392677887ULL), QU(13566803319341319267ULL),
+	QU(17870798107734050771ULL), QU( 3354318982568089135ULL),
+	QU( 9034450839405133651ULL), QU(13087431795753424314ULL),
+	QU(  950333102820688239ULL), QU( 1968360654535604116ULL),
+	QU(16840551645563314995ULL), QU( 8867501803892924995ULL),
+	QU(11395388644490626845ULL), QU( 1529815836300732204ULL),
+	QU(13330848522996608842ULL), QU( 1813432878817504265ULL),
+	QU( 2336867432693429560ULL), QU(15192805445973385902ULL),
+	QU( 2528593071076407877ULL), QU(  128459777936689248ULL),
+	QU( 9976345382867214866ULL), QU( 6208885766767996043ULL),
+	QU(14982349522273141706ULL), QU( 3099654362410737822ULL),
+	QU(13776700761947297661ULL), QU( 8806185470684925550ULL),
+	QU( 8151717890410585321ULL), QU(  640860591588072925ULL),
+	QU(14592096303937307465ULL), QU( 9056472419613564846ULL),
+	QU(14861544647742266352ULL), QU(12703771500398470216ULL),
+	QU( 3142372800384138465ULL), QU( 6201105606917248196ULL),
+	QU(18337516409359270184ULL), QU(15042268695665115339ULL),
+	QU(15188246541383283846ULL), QU(12800028693090114519ULL),
+	QU( 5992859621101493472ULL), QU(18278043971816803521ULL),
+	QU( 9002773075219424560ULL), QU( 7325707116943598353ULL),
+	QU( 7930571931248040822ULL), QU( 5645275869617023448ULL),
+	QU( 7266107455295958487ULL), QU( 4363664528273524411ULL),
+	QU(14313875763787479809ULL), QU(17059695613553486802ULL),
+	QU( 9247761425889940932ULL), QU(13704726459237593128ULL),
+	QU( 2701312427328909832ULL), QU(17235532008287243115ULL),
+	QU(14093147761491729538ULL), QU( 6247352273768386516ULL),
+	QU( 8268710048153268415ULL), QU( 7985295214477182083ULL),
+	QU(15624495190888896807ULL), QU( 3772753430045262788ULL),
+	QU( 9133991620474991698ULL), QU( 5665791943316256028ULL),
+	QU( 7551996832462193473ULL), QU(13163729206798953877ULL),
+	QU( 9263532074153846374ULL), QU( 1015460703698618353ULL),
+	QU(17929874696989519390ULL), QU(18257884721466153847ULL),
+	QU(16271867543011222991ULL), QU( 3905971519021791941ULL),
+	QU(16814488397137052085ULL), QU( 1321197685504621613ULL),
+	QU( 2870359191894002181ULL), QU(14317282970323395450ULL),
+	QU(13663920845511074366ULL), QU( 2052463995796539594ULL),
+	QU(14126345686431444337ULL), QU( 1727572121947022534ULL),
+	QU(17793552254485594241ULL), QU( 6738857418849205750ULL),
+	QU( 1282987123157442952ULL), QU(16655480021581159251ULL),
+	QU( 6784587032080183866ULL), QU(14726758805359965162ULL),
+	QU( 7577995933961987349ULL), QU(12539609320311114036ULL),
+	QU(10789773033385439494ULL), QU( 8517001497411158227ULL),
+	QU(10075543932136339710ULL), QU(14838152340938811081ULL),
+	QU( 9560840631794044194ULL), QU(17445736541454117475ULL),
+	QU(10633026464336393186ULL), QU(15705729708242246293ULL),
+	QU( 1117517596891411098ULL), QU( 4305657943415886942ULL),
+	QU( 4948856840533979263ULL), QU(16071681989041789593ULL),
+	QU(13723031429272486527ULL), QU( 7639567622306509462ULL),
+	QU(12670424537483090390ULL), QU( 9715223453097197134ULL),
+	QU( 5457173389992686394ULL), QU(  289857129276135145ULL),
+	QU(17048610270521972512ULL), QU(  692768013309835485ULL),
+	QU(14823232360546632057ULL), QU(18218002361317895936ULL),
+	QU( 3281724260212650204ULL), QU(16453957266549513795ULL),
+	QU( 8592711109774511881ULL), QU(  929825123473369579ULL),
+	QU(15966784769764367791ULL), QU( 9627344291450607588ULL),
+	QU(10849555504977813287ULL), QU( 9234566913936339275ULL),
+	QU( 6413807690366911210ULL), QU(10862389016184219267ULL),
+	QU(13842504799335374048ULL), QU( 1531994113376881174ULL),
+	QU( 2081314867544364459ULL), QU(16430628791616959932ULL),
+	QU( 8314714038654394368ULL), QU( 9155473892098431813ULL),
+	QU(12577843786670475704ULL), QU( 4399161106452401017ULL),
+	QU( 1668083091682623186ULL), QU( 1741383777203714216ULL),
+	QU( 2162597285417794374ULL), QU(15841980159165218736ULL),
+	QU( 1971354603551467079ULL), QU( 1206714764913205968ULL),
+	QU( 4790860439591272330ULL), QU(14699375615594055799ULL),
+	QU( 8374423871657449988ULL), QU(10950685736472937738ULL),
+	QU(  697344331343267176ULL), QU(10084998763118059810ULL),
+	QU(12897369539795983124ULL), QU(12351260292144383605ULL),
+	QU( 1268810970176811234ULL), QU( 7406287800414582768ULL),
+	QU(  516169557043807831ULL), QU( 5077568278710520380ULL),
+	QU( 3828791738309039304ULL), QU( 7721974069946943610ULL),
+	QU( 3534670260981096460ULL), QU( 4865792189600584891ULL),
+	QU(16892578493734337298ULL), QU( 9161499464278042590ULL),
+	QU(11976149624067055931ULL), QU(13219479887277343990ULL),
+	QU(14161556738111500680ULL), QU(14670715255011223056ULL),
+	QU( 4671205678403576558ULL), QU(12633022931454259781ULL),
+	QU(14821376219869187646ULL), QU(  751181776484317028ULL),
+	QU( 2192211308839047070ULL), QU(11787306362361245189ULL),
+	QU(10672375120744095707ULL), QU( 4601972328345244467ULL),
+	QU(15457217788831125879ULL), QU( 8464345256775460809ULL),
+	QU(10191938789487159478ULL), QU( 6184348739615197613ULL),
+	QU(11425436778806882100ULL), QU( 2739227089124319793ULL),
+	QU(  461464518456000551ULL), QU( 4689850170029177442ULL),
+	QU( 6120307814374078625ULL), QU(11153579230681708671ULL),
+	QU( 7891721473905347926ULL), QU(10281646937824872400ULL),
+	QU( 3026099648191332248ULL), QU( 8666750296953273818ULL),
+	QU(14978499698844363232ULL), QU(13303395102890132065ULL),
+	QU( 8182358205292864080ULL), QU(10560547713972971291ULL),
+	QU(11981635489418959093ULL), QU( 3134621354935288409ULL),
+	QU(11580681977404383968ULL), QU(14205530317404088650ULL),
+	QU( 5997789011854923157ULL), QU(13659151593432238041ULL),
+	QU(11664332114338865086ULL), QU( 7490351383220929386ULL),
+	QU( 7189290499881530378ULL), QU(15039262734271020220ULL),
+	QU( 2057217285976980055ULL), QU(  555570804905355739ULL),
+	QU(11235311968348555110ULL), QU(13824557146269603217ULL),
+	QU(16906788840653099693ULL), QU( 7222878245455661677ULL),
+	QU( 5245139444332423756ULL), QU( 4723748462805674292ULL),
+	QU(12216509815698568612ULL), QU(17402362976648951187ULL),
+	QU(17389614836810366768ULL), QU( 4880936484146667711ULL),
+	QU( 9085007839292639880ULL), QU(13837353458498535449ULL),
+	QU(11914419854360366677ULL), QU(16595890135313864103ULL),
+	QU( 6313969847197627222ULL), QU(18296909792163910431ULL),
+	QU(10041780113382084042ULL), QU( 2499478551172884794ULL),
+	QU(11057894246241189489ULL), QU( 9742243032389068555ULL),
+	QU(12838934582673196228ULL), QU(13437023235248490367ULL),
+	QU(13372420669446163240ULL), QU( 6752564244716909224ULL),
+	QU( 7157333073400313737ULL), QU(12230281516370654308ULL),
+	QU( 1182884552219419117ULL), QU( 2955125381312499218ULL),
+	QU(10308827097079443249ULL), QU( 1337648572986534958ULL),
+	QU(16378788590020343939ULL), QU(  108619126514420935ULL),
+	QU( 3990981009621629188ULL), QU( 5460953070230946410ULL),
+	QU( 9703328329366531883ULL), QU(13166631489188077236ULL),
+	QU( 1104768831213675170ULL), QU( 3447930458553877908ULL),
+	QU( 8067172487769945676ULL), QU( 5445802098190775347ULL),
+	QU( 3244840981648973873ULL), QU(17314668322981950060ULL),
+	QU( 5006812527827763807ULL), QU(18158695070225526260ULL),
+	QU( 2824536478852417853ULL), QU(13974775809127519886ULL),
+	QU( 9814362769074067392ULL), QU(17276205156374862128ULL),
+	QU(11361680725379306967ULL), QU( 3422581970382012542ULL),
+	QU(11003189603753241266ULL), QU(11194292945277862261ULL),
+	QU( 6839623313908521348ULL), QU(11935326462707324634ULL),
+	QU( 1611456788685878444ULL), QU(13112620989475558907ULL),
+	QU(  517659108904450427ULL), QU(13558114318574407624ULL),
+	QU(15699089742731633077ULL), QU( 4988979278862685458ULL),
+	QU( 8111373583056521297ULL), QU( 3891258746615399627ULL),
+	QU( 8137298251469718086ULL), QU(12748663295624701649ULL),
+	QU( 4389835683495292062ULL), QU( 5775217872128831729ULL),
+	QU( 9462091896405534927ULL), QU( 8498124108820263989ULL),
+	QU( 8059131278842839525ULL), QU(10503167994254090892ULL),
+	QU(11613153541070396656ULL), QU(18069248738504647790ULL),
+	QU(  570657419109768508ULL), QU( 3950574167771159665ULL),
+	QU( 5514655599604313077ULL), QU( 2908460854428484165ULL),
+	QU(10777722615935663114ULL), QU(12007363304839279486ULL),
+	QU( 9800646187569484767ULL), QU( 8795423564889864287ULL),
+	QU(14257396680131028419ULL), QU( 6405465117315096498ULL),
+	QU( 7939411072208774878ULL), QU(17577572378528990006ULL),
+	QU(14785873806715994850ULL), QU(16770572680854747390ULL),
+	QU(18127549474419396481ULL), QU(11637013449455757750ULL),
+	QU(14371851933996761086ULL), QU( 3601181063650110280ULL),
+	QU( 4126442845019316144ULL), QU(10198287239244320669ULL),
+	QU(18000169628555379659ULL), QU(18392482400739978269ULL),
+	QU( 6219919037686919957ULL), QU( 3610085377719446052ULL),
+	QU( 2513925039981776336ULL), QU(16679413537926716955ULL),
+	QU(12903302131714909434ULL), QU( 5581145789762985009ULL),
+	QU(12325955044293303233ULL), QU(17216111180742141204ULL),
+	QU( 6321919595276545740ULL), QU( 3507521147216174501ULL),
+	QU( 9659194593319481840ULL), QU(11473976005975358326ULL),
+	QU(14742730101435987026ULL), QU(  492845897709954780ULL),
+	QU(16976371186162599676ULL), QU(17712703422837648655ULL),
+	QU( 9881254778587061697ULL), QU( 8413223156302299551ULL),
+	QU( 1563841828254089168ULL), QU( 9996032758786671975ULL),
+	QU(  138877700583772667ULL), QU(13003043368574995989ULL),
+	QU( 4390573668650456587ULL), QU( 8610287390568126755ULL),
+	QU(15126904974266642199ULL), QU( 6703637238986057662ULL),
+	QU( 2873075592956810157ULL), QU( 6035080933946049418ULL),
+	QU(13382846581202353014ULL), QU( 7303971031814642463ULL),
+	QU(18418024405307444267ULL), QU( 5847096731675404647ULL),
+	QU( 4035880699639842500ULL), QU(11525348625112218478ULL),
+	QU( 3041162365459574102ULL), QU( 2604734487727986558ULL),
+	QU(15526341771636983145ULL), QU(14556052310697370254ULL),
+	QU(12997787077930808155ULL), QU( 9601806501755554499ULL),
+	QU(11349677952521423389ULL), QU(14956777807644899350ULL),
+	QU(16559736957742852721ULL), QU(12360828274778140726ULL),
+	QU( 6685373272009662513ULL), QU(16932258748055324130ULL),
+	QU(15918051131954158508ULL), QU( 1692312913140790144ULL),
+	QU(  546653826801637367ULL), QU( 5341587076045986652ULL),
+	QU(14975057236342585662ULL), QU(12374976357340622412ULL),
+	QU(10328833995181940552ULL), QU(12831807101710443149ULL),
+	QU(10548514914382545716ULL), QU( 2217806727199715993ULL),
+	QU(12627067369242845138ULL), QU( 4598965364035438158ULL),
+	QU(  150923352751318171ULL), QU(14274109544442257283ULL),
+	QU( 4696661475093863031ULL), QU( 1505764114384654516ULL),
+	QU(10699185831891495147ULL), QU( 2392353847713620519ULL),
+	QU( 3652870166711788383ULL), QU( 8640653276221911108ULL),
+	QU( 3894077592275889704ULL), QU( 4918592872135964845ULL),
+	QU(16379121273281400789ULL), QU(12058465483591683656ULL),
+	QU(11250106829302924945ULL), QU( 1147537556296983005ULL),
+	QU( 6376342756004613268ULL), QU(14967128191709280506ULL),
+	QU(18007449949790627628ULL), QU( 9497178279316537841ULL),
+	QU( 7920174844809394893ULL), QU(10037752595255719907ULL),
+	QU(15875342784985217697ULL), QU(15311615921712850696ULL),
+	QU( 9552902652110992950ULL), QU(14054979450099721140ULL),
+	QU( 5998709773566417349ULL), QU(18027910339276320187ULL),
+	QU( 8223099053868585554ULL), QU( 7842270354824999767ULL),
+	QU( 4896315688770080292ULL), QU(12969320296569787895ULL),
+	QU( 2674321489185759961ULL), QU( 4053615936864718439ULL),
+	QU(11349775270588617578ULL), QU( 4743019256284553975ULL),
+	QU( 5602100217469723769ULL), QU(14398995691411527813ULL),
+	QU( 7412170493796825470ULL), QU(  836262406131744846ULL),
+	QU( 8231086633845153022ULL), QU( 5161377920438552287ULL),
+	QU( 8828731196169924949ULL), QU(16211142246465502680ULL),
+	QU( 3307990879253687818ULL), QU( 5193405406899782022ULL),
+	QU( 8510842117467566693ULL), QU( 6070955181022405365ULL),
+	QU(14482950231361409799ULL), QU(12585159371331138077ULL),
+	QU( 3511537678933588148ULL), QU( 2041849474531116417ULL),
+	QU(10944936685095345792ULL), QU(18303116923079107729ULL),
+	QU( 2720566371239725320ULL), QU( 4958672473562397622ULL),
+	QU( 3032326668253243412ULL), QU(13689418691726908338ULL),
+	QU( 1895205511728843996ULL), QU( 8146303515271990527ULL),
+	QU(16507343500056113480ULL), QU(  473996939105902919ULL),
+	QU( 9897686885246881481ULL), QU(14606433762712790575ULL),
+	QU( 6732796251605566368ULL), QU( 1399778120855368916ULL),
+	QU(  935023885182833777ULL), QU(16066282816186753477ULL),
+	QU( 7291270991820612055ULL), QU(17530230393129853844ULL),
+	QU(10223493623477451366ULL), QU(15841725630495676683ULL),
+	QU(17379567246435515824ULL), QU( 8588251429375561971ULL),
+	QU(18339511210887206423ULL), QU(17349587430725976100ULL),
+	QU(12244876521394838088ULL), QU( 6382187714147161259ULL),
+	QU(12335807181848950831ULL), QU(16948885622305460665ULL),
+	QU(13755097796371520506ULL), QU(14806740373324947801ULL),
+	QU( 4828699633859287703ULL), QU( 8209879281452301604ULL),
+	QU(12435716669553736437ULL), QU(13970976859588452131ULL),
+	QU( 6233960842566773148ULL), QU(12507096267900505759ULL),
+	QU( 1198713114381279421ULL), QU(14989862731124149015ULL),
+	QU(15932189508707978949ULL), QU( 2526406641432708722ULL),
+	QU(   29187427817271982ULL), QU( 1499802773054556353ULL),
+	QU(10816638187021897173ULL), QU( 5436139270839738132ULL),
+	QU( 6659882287036010082ULL), QU( 2154048955317173697ULL),
+	QU(10887317019333757642ULL), QU(16281091802634424955ULL),
+	QU(10754549879915384901ULL), QU(10760611745769249815ULL),
+	QU( 2161505946972504002ULL), QU( 5243132808986265107ULL),
+	QU(10129852179873415416ULL), QU(  710339480008649081ULL),
+	QU( 7802129453068808528ULL), QU(17967213567178907213ULL),
+	QU(15730859124668605599ULL), QU(13058356168962376502ULL),
+	QU( 3701224985413645909ULL), QU(14464065869149109264ULL),
+	QU( 9959272418844311646ULL), QU(10157426099515958752ULL),
+	QU(14013736814538268528ULL), QU(17797456992065653951ULL),
+	QU(17418878140257344806ULL), QU(15457429073540561521ULL),
+	QU( 2184426881360949378ULL), QU( 2062193041154712416ULL),
+	QU( 8553463347406931661ULL), QU( 4913057625202871854ULL),
+	QU( 2668943682126618425ULL), QU(17064444737891172288ULL),
+	QU( 4997115903913298637ULL), QU(12019402608892327416ULL),
+	QU(17603584559765897352ULL), QU(11367529582073647975ULL),
+	QU( 8211476043518436050ULL), QU( 8676849804070323674ULL),
+	QU(18431829230394475730ULL), QU(10490177861361247904ULL),
+	QU( 9508720602025651349ULL), QU( 7409627448555722700ULL),
+	QU( 5804047018862729008ULL), QU(11943858176893142594ULL),
+	QU(11908095418933847092ULL), QU( 5415449345715887652ULL),
+	QU( 1554022699166156407ULL), QU( 9073322106406017161ULL),
+	QU( 7080630967969047082ULL), QU(18049736940860732943ULL),
+	QU(12748714242594196794ULL), QU( 1226992415735156741ULL),
+	QU(17900981019609531193ULL), QU(11720739744008710999ULL),
+	QU( 3006400683394775434ULL), QU(11347974011751996028ULL),
+	QU( 3316999628257954608ULL), QU( 8384484563557639101ULL),
+	QU(18117794685961729767ULL), QU( 1900145025596618194ULL),
+	QU(17459527840632892676ULL), QU( 5634784101865710994ULL),
+	QU( 7918619300292897158ULL), QU( 3146577625026301350ULL),
+	QU( 9955212856499068767ULL), QU( 1873995843681746975ULL),
+	QU( 1561487759967972194ULL), QU( 8322718804375878474ULL),
+	QU(11300284215327028366ULL), QU( 4667391032508998982ULL),
+	QU( 9820104494306625580ULL), QU(17922397968599970610ULL),
+	QU( 1784690461886786712ULL), QU(14940365084341346821ULL),
+	QU( 5348719575594186181ULL), QU(10720419084507855261ULL),
+	QU(14210394354145143274ULL), QU( 2426468692164000131ULL),
+	QU(16271062114607059202ULL), QU(14851904092357070247ULL),
+	QU( 6524493015693121897ULL), QU( 9825473835127138531ULL),
+	QU(14222500616268569578ULL), QU(15521484052007487468ULL),
+	QU(14462579404124614699ULL), QU(11012375590820665520ULL),
+	QU(11625327350536084927ULL), QU(14452017765243785417ULL),
+	QU( 9989342263518766305ULL), QU( 3640105471101803790ULL),
+	QU( 4749866455897513242ULL), QU(13963064946736312044ULL),
+	QU(10007416591973223791ULL), QU(18314132234717431115ULL),
+	QU( 3286596588617483450ULL), QU( 7726163455370818765ULL),
+	QU( 7575454721115379328ULL), QU( 5308331576437663422ULL),
+	QU(18288821894903530934ULL), QU( 8028405805410554106ULL),
+	QU(15744019832103296628ULL), QU(  149765559630932100ULL),
+	QU( 6137705557200071977ULL), QU(14513416315434803615ULL),
+	QU(11665702820128984473ULL), QU(  218926670505601386ULL),
+	QU( 6868675028717769519ULL), QU(15282016569441512302ULL),
+	QU( 5707000497782960236ULL), QU( 6671120586555079567ULL),
+	QU( 2194098052618985448ULL), QU(16849577895477330978ULL),
+	QU(12957148471017466283ULL), QU( 1997805535404859393ULL),
+	QU( 1180721060263860490ULL), QU(13206391310193756958ULL),
+	QU(12980208674461861797ULL), QU( 3825967775058875366ULL),
+	QU(17543433670782042631ULL), QU( 1518339070120322730ULL),
+	QU(16344584340890991669ULL), QU( 2611327165318529819ULL),
+	QU(11265022723283422529ULL), QU( 4001552800373196817ULL),
+	QU(14509595890079346161ULL), QU( 3528717165416234562ULL),
+	QU(18153222571501914072ULL), QU( 9387182977209744425ULL),
+	QU(10064342315985580021ULL), QU(11373678413215253977ULL),
+	QU( 2308457853228798099ULL), QU( 9729042942839545302ULL),
+	QU( 7833785471140127746ULL), QU( 6351049900319844436ULL),
+	QU(14454610627133496067ULL), QU(12533175683634819111ULL),
+	QU(15570163926716513029ULL), QU(13356980519185762498ULL)
 };
 
 TEST_BEGIN(test_gen_rand_32)
-- 
2.0.0.rc2


From normalperson at yhbt.net  Tue May 27 00:15:48 2014
From: normalperson at yhbt.net (Eric Wong)
Date: Tue, 27 May 2014 07:15:48 +0000
Subject: jemalloc for small applications
Message-ID: <20140527071548.GA24330@dcvr.yhbt.net>

Hello, I've been using jemalloc 3.6 more on my 64-bit Debian stable
workstations and notice it uses more memory than eglibc malloc for my
smaller Ruby daemons.

For example, dtas-player[1] uses 4-5M more memory with jemalloc when
running on recent ruby-trunk (r46150).  (./configure LIBS=-ljemalloc)

Everything is mostly single-threaded and contention is not an issue, so
I use MALLOC_CONF=narenas:1 for jemalloc and MALLOC_ARENA_TEST=1
MALLOC_ARENA_MAX=1 for eglibc.

Is higher memory usage for small apps is inherent in the design and a
concious tradeoff for bigger apps?

Are there tuning or (preferably) out-of-the-box changes which can be
made to reduce memory usage for smaller apps?

But probably most development is driven by users of large server
applications and not crazy music shells like dtas :)

Anyways, my fat Ruby web server is happier on jemalloc :)
60-80M on eglibc, ~40M on jemalloc (32-bit on a VM, even))

Thanks for jemalloc and for reading!

[1] http://dtas.80x24.org/README

From annulen at yandex.ru  Tue May 27 00:32:34 2014
From: annulen at yandex.ru (Konstantin Tokarev)
Date: Tue, 27 May 2014 11:32:34 +0400
Subject: jemalloc for small applications
In-Reply-To: <20140527071548.GA24330@dcvr.yhbt.net>
References: <20140527071548.GA24330@dcvr.yhbt.net>
Message-ID: <1468251401175954@web19h.yandex.ru>



27.05.2014, 11:15, "Eric Wong" <normalperson at yhbt.net>:
> Hello, I've been using jemalloc 3.6 more on my 64-bit Debian stable
> workstations and notice it uses more memory than eglibc malloc for my
> smaller Ruby daemons.
>
> For example, dtas-player[1] uses 4-5M more memory with jemalloc when
> running on recent ruby-trunk (r46150). ?(./configure LIBS=-ljemalloc)
>
> Everything is mostly single-threaded and contention is not an issue, so
> I use MALLOC_CONF=narenas:1 for jemalloc and MALLOC_ARENA_TEST=1
> MALLOC_ARENA_MAX=1 for eglibc.
>
> Is higher memory usage for small apps is inherent in the design and a
> concious tradeoff for bigger apps?
>
> Are there tuning or (preferably) out-of-the-box changes which can be
> made to reduce memory usage for smaller apps?
>
> But probably most development is driven by users of large server
> applications and not crazy music shells like dtas :)
>
> Anyways, my fat Ruby web server is happier on jemalloc :)
> 60-80M on eglibc, ~40M on jemalloc (32-bit on a VM, even))
>
> Thanks for jemalloc and for reading!
>
> [1] http://dtas.80x24.org/README

You may want to decerease lg_chunk value, e.g. MALLOC_CONF=lg_chunk:21.

Note that it degrades performance of allocator, it may even become slower
than glibc at some point.

-- 
Regards, Konstantin

From jasone at canonware.com  Tue May 27 15:03:57 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:03:57 -0700
Subject: [PATCH] Fix manual dependency on jemalloc_test.h
In-Reply-To: <1400657904-27030-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400657904-27030-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <D2D61413-B116-425B-8706-CA0D1857FEB4@canonware.com>

On May 21, 2014, at 12:38 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> Makefile.in | 2 +-
> 1 file changed, 1 insertion(+), 1 deletion(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/ed0b0ec935a6df9ef429e56a08c0c9b63c3ba358

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:06:22 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:06:22 -0700
Subject: [PATCH] Define _CRT_SPINCOUNT in test/src/mtx.c like in
	src/mutex.c
In-Reply-To: <1400659190-31544-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400659190-31544-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <79399A3E-5D6A-415D-97CE-91BBBE181334@canonware.com>

On May 21, 2014, at 12:59 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/src/mtx.c | 4 ++++
> 1 file changed, 4 insertions(+)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/47d58a01ff9d894f854412f3f6d3ba97a7aa2929

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:09:56 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:09:56 -0700
Subject: [PATCH] Define DLLEXPORT when building .jet objects
In-Reply-To: <1400659464-31658-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400659464-31658-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <969F1E39-ACE6-4B55-A2CB-2E3C238AB696@canonware.com>

On May 21, 2014, at 1:04 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> Makefile.in | 2 +-
> 1 file changed, 1 insertion(+), 1 deletion(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/d6fd11413e1fe33a9bc947d794e880d7d10f7786

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:12:42 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:12:42 -0700
Subject: [PATCH] Replace variable arrays in tests with VARIABLE_ARRAY
In-Reply-To: <1400660648-31992-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400660648-31992-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <EF0E7660-A77E-41F7-B4CC-A886DD9E4D25@canonware.com>

On May 21, 2014, at 1:24 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/unit/hash.c    | 4 ++--
> test/unit/mallctl.c | 2 +-
> 2 files changed, 3 insertions(+), 3 deletions(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/f41f14366877538b03109ecf346dbff2e21bbb16

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:15:09 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:15:09 -0700
Subject: [PATCH] Add missing $(EXE) to filter TESTS_UNIT_AUX_OBJS
In-Reply-To: <1400661882-32587-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400661882-32587-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <BDD9B620-664D-4BE9-80B1-15CC3DC0CE51@canonware.com>

On May 21, 2014, at 1:44 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> Makefile.in | 2 +-
> 1 file changed, 1 insertion(+), 1 deletion(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/1ad4a6e9f9ba55c874d0ad63041e09b96b459b1f

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:19:30 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:19:30 -0700
Subject: [PATCH] Use C99 varadic macros instead of GCC ones
In-Reply-To: <1400662815-605-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400659150-31482-1-git-send-email-mh+jemalloc@glandium.org>
	<1400662815-605-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <F7560937-4AAB-46EE-848F-24CE6B02FC3F@canonware.com>

On May 21, 2014, at 2:00 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/include/test/test.h | 384 +++++++++++++++++++++++------------------------
> test/unit/util.c         |   8 +-
> 2 files changed, 196 insertions(+), 196 deletions(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/7330c3770af0e5328d749635217387efbbe0ae3c

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:22:22 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:22:22 -0700
Subject: [PATCH] Rename "small" local variable,
	because windows headers #define it
In-Reply-To: <1400662881-697-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400662881-697-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <327F2E42-07DA-4D9E-897F-1B6F7E5A29C7@canonware.com>

On May 21, 2014, at 2:01 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/unit/stats.c | 8 ++++----
> 1 file changed, 4 insertions(+), 4 deletions(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/86e2e703ffb3cc17e05af816df8895db62a9272e

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:28:09 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:28:09 -0700
Subject: [PATCH] Avoid pointer arithmetic on void* in
	test/integration/rallocx.c
In-Reply-To: <1400663601-1919-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400663601-1919-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <209BBA04-B300-47CF-B0B6-12B372F91FF3@canonware.com>

On May 21, 2014, at 2:13 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/integration/rallocx.c | 6 +++---
> 1 file changed, 3 insertions(+), 3 deletions(-)
> 
> diff --git a/test/integration/rallocx.c b/test/integration/rallocx.c
> index ee21aed..7acb211 100644
> --- a/test/integration/rallocx.c
> +++ b/test/integration/rallocx.c
> @@ -95,7 +95,7 @@ TEST_BEGIN(test_zero)
> 				    "Expected zeroed memory");
> 			}
> 			if (psz != qsz) {
> -				memset(q+psz, FILL_BYTE, qsz-psz);
> +				memset((char *)q+psz, FILL_BYTE, qsz-psz);
> 				psz = qsz;
> 			}
> 			p = q;
> @@ -159,8 +159,8 @@ TEST_BEGIN(test_lg_align_and_zero)
> 		} else {
> 			assert_false(validate_fill(q, 0, 0, MAX_VALIDATE),
> 			    "Expected zeroed memory");
> -			assert_false(validate_fill(q+sz-MAX_VALIDATE, 0, 0,
> -			    MAX_VALIDATE), "Expected zeroed memory");
> +			assert_false(validate_fill((char *)q+sz-MAX_VALIDATE,
> +                            0, 0, MAX_VALIDATE), "Expected zeroed memory");
> 		}
> 		p = q;
> 	}

Integrated, with minor modification:

	https://github.com/jemalloc/jemalloc/commit/3a730dfd5062ecd6fc46b68f28342e14b461f560

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:44:15 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:44:15 -0700
Subject: [PATCH] Use a configure test to detect the form of
	malloc_usable_size in malloc.h
In-Reply-To: <20140521134058.GA29640@glandium.org>
References: <1400679446-29574-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521134058.GA29640@glandium.org>
Message-ID: <C187170E-77BA-4092-98C2-6EA444304B41@canonware.com>

On May 21, 2014, at 6:40 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> On Wed, May 21, 2014 at 10:37:26PM +0900, Mike Hommey wrote:
>> From: Mike Hommey <mh at glandium.org>
>> 
>> ---
>> configure.ac | 18 ++++++++++++++++--
>> 1 file changed, 16 insertions(+), 2 deletions(-)
>> 
>> diff --git a/configure.ac b/configure.ac
>> index 57015d1..0a3d8a8 100644
>> --- a/configure.ac
>> +++ b/configure.ac
>> @@ -258,7 +258,6 @@ dnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the
>> dnl definitions need to be seen before any headers are included, which is a pain
>> dnl to make happen otherwise.
>> default_munmap="1"
>> -JEMALLOC_USABLE_SIZE_CONST="const"
>> case "${host}" in
>>   *-*-darwin*)
>> 	CFLAGS="$CFLAGS"
>> @@ -286,7 +285,6 @@ case "${host}" in
>> 	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
>> 	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
>> 	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
>> -	JEMALLOC_USABLE_SIZE_CONST=""
>> 	default_munmap="0"
>> 	;;
>>   *-*-netbsd*)
>> @@ -351,6 +349,22 @@ case "${host}" in
>> 	abi="elf"
>> 	;;
>> esac
>> +
>> +JEMALLOC_USABLE_SIZE_CONST=
>> +AC_CHECK_HEADERS([malloc.h], [
>> +  AC_MSG_CHECKING([whether system malloc_usable_size definition uses const argument])
> 
> Note, this sentence is wrong on windows, where there is no system
> malloc_usable_size, but where the test *does* run and return yes.
> 
> Also, it might be better to check independently of whether malloc.h is
> available or not.
> 
> Tell me if you want me to fix those.

I'm not sure there's a way to write a resilient configure test.  Because malloc_usable_size() isn't a standard function, there's not a standard header for it.  For example, here's FreeBSD's malloc.h (malloc_usable_size() is defined in malloc_np.h):

#if __STDC__
#error "<malloc.h> has been replaced by <stdlib.h>"
#else
#include <stdlib.h>
#endif

If nothing else, JEMALLOC_USABLE_SIZE_CONST="const" needs to be added to the FreeBSD (and NetBSD?) sections for this diff to work correctly.

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:47:56 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:47:56 -0700
Subject: [PATCH] Use ULL prefix instead of LLU for unsigned long longs
In-Reply-To: <1400657642-20648-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400657642-20648-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <CEF04E89-1E35-4ABC-B4C9-42309198BCC0@canonware.com>

On May 21, 2014, at 12:34 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> include/jemalloc/internal/hash.h |    8 +-
> test/src/SFMT.c                  |    2 +-
> test/unit/SFMT.c                 | 2000 +++++++++++++++++++-------------------
> 3 files changed, 1005 insertions(+), 1005 deletions(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/a9df1ae622d0eb91a26208c03c51d0c518cce146

Thanks,
Jason

From jasone at canonware.com  Tue May 27 15:54:13 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 15:54:13 -0700
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <866AFED9-87CD-4981-B43E-B906CA29E92E@canonware.com>

On May 21, 2014, at 2:06 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> include/jemalloc/internal/jemalloc_internal.h.in     | 1 -
> include/jemalloc/internal/jemalloc_internal_macros.h | 4 ++++
> 2 files changed, 4 insertions(+), 1 deletion(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/22bc570fba00c4dd04cb4962e219d4230f137a4c

Thanks,
Jason

From mh+jemalloc at glandium.org  Tue May 27 16:10:12 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 08:10:12 +0900
Subject: [PATCH] Use a configure test to detect the form of malloc_usable_size
	in malloc.h
In-Reply-To: <C187170E-77BA-4092-98C2-6EA444304B41@canonware.com>
References: <C187170E-77BA-4092-98C2-6EA444304B41@canonware.com>
Message-ID: <1401232212-8755-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index 57015d1..04bb294 100644
--- a/configure.ac
+++ b/configure.ac
@@ -258,7 +258,6 @@ dnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the
 dnl definitions need to be seen before any headers are included, which is a pain
 dnl to make happen otherwise.
 default_munmap="1"
-JEMALLOC_USABLE_SIZE_CONST="const"
 case "${host}" in
   *-*-darwin*)
 	CFLAGS="$CFLAGS"
@@ -286,7 +285,6 @@ case "${host}" in
 	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
 	AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ])
 	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
-	JEMALLOC_USABLE_SIZE_CONST=""
 	default_munmap="0"
 	;;
   *-*-netbsd*)
@@ -351,6 +349,22 @@ case "${host}" in
 	abi="elf"
 	;;
 esac
+
+JEMALLOC_USABLE_SIZE_CONST=const
+AC_CHECK_HEADERS([malloc.h], [
+  AC_MSG_CHECKING([whether malloc_usable_size definition can use const argument])
+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+    [#include <malloc.h>
+     #include <stddef.h>
+    size_t malloc_usable_size(const void *ptr);
+    ],
+    [])],[
+                AC_MSG_RESULT([yes])
+         ],[
+                JEMALLOC_USABLE_SIZE_CONST=
+                AC_MSG_RESULT([no])
+         ])
+])
 AC_DEFINE_UNQUOTED([JEMALLOC_USABLE_SIZE_CONST], [$JEMALLOC_USABLE_SIZE_CONST])
 AC_SUBST([abi])
 AC_SUBST([RPATH])
-- 
2.0.0.rc2


From jasone at canonware.com  Tue May 27 16:10:39 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 16:10:39 -0700
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140521094227.GA2323@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
Message-ID: <06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>

On May 21, 2014, at 2:42 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> On Wed, May 21, 2014 at 06:06:14PM +0900, Mike Hommey wrote:
>> From: Mike Hommey <mh at glandium.org>
>> 
>> test/integration/aligned_alloc.c needs it.
>> ---
>> include/jemalloc/internal/jemalloc_internal.h.in     | 1 -
>> include/jemalloc/internal/jemalloc_internal_macros.h | 4 ++++
>> 2 files changed, 4 insertions(+), 1 deletion(-)
>> 
>> diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
>> index c9462e5..d9bfadf 100644
>> --- a/include/jemalloc/internal/jemalloc_internal.h.in
>> +++ b/include/jemalloc/internal/jemalloc_internal.h.in
>> @@ -46,7 +46,6 @@
>> typedef intptr_t ssize_t;
> 
> This (ssize_t) is also needed in another integration test. It seems
> convoluted to move that in _macros.h.
> 
> Jason, how do you think I should handle this?

What do you think of creating include/jemalloc/internal/jemalloc_internal_decls.h (sibling of jemalloc_internal_macros.h), moving the ssize_t definition there, and including the new header in the same places as its sibling?

> Relatedly, with the 10 patches I just sent (one of which is in the
> moderation queue because the patch is big), I have two remaining
> build failures on tests with MSVC:
> - test/unit/math.c fails to build because of the lack of INFINITY.
> I haven't found a replacement definition that works in a const array.

This is likely to work:

	#define	INFINITY	1e500

> - test/unit/mq.c fails to build because of the use of
>  nanosleep/timespec. I haven't looked for a replacement yet.
> 
> As for running tests, the following unit tests crash:
> - ckh
> - rtree
> - tsd
> 
> They all crash in malloc_tsd_malloc, which is fishy.

Probably a bootstrapping order issue, but I don't have any concrete guesses as to how it's failing.

> In integration tests, thread_arena, posix_memalign and aligned_alloc
> fail with assertions. Haven't looked further.

Thank you for fixing the bitrot that has accumulated in the Windows port.  You've motivated me to make another attempt at purchasing the necessary MS software to add Windows to my testing regime.

Jason

From jasone at canonware.com  Tue May 27 16:14:57 2014
From: jasone at canonware.com (Jason Evans)
Date: Tue, 27 May 2014 16:14:57 -0700
Subject: [PATCH] Use a configure test to detect the form of
	malloc_usable_size in malloc.h
In-Reply-To: <1401232212-8755-1-git-send-email-mh+jemalloc@glandium.org>
References: <C187170E-77BA-4092-98C2-6EA444304B41@canonware.com>
	<1401232212-8755-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <EC27C58B-981A-4C7F-9F75-6DDA6C3C522E@canonware.com>

On May 27, 2014, at 4:10 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> configure.ac | 18 ++++++++++++++++--
> 1 file changed, 16 insertions(+), 2 deletions(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/affe009e3765384805a23d804152fbf04151b117

Thanks,
Jason

From mh+jemalloc at glandium.org  Tue May 27 17:28:11 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 09:28:11 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
Message-ID: <20140528002811.GA10846@glandium.org>

On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> Thank you for fixing the bitrot that has accumulated in the Windows
> port.  You've motivated me to make another attempt at purchasing the
> necessary MS software to add Windows to my testing regime.

That'd be great :) Although I've also been guilty of letting it bitrot.

Relatedly, I just found out that building from the source directory is
broken, too, because srcroot ends up being "" because srcdir is ".", and
the msvc_compat include dir is derived from srcroot, so it ends up being
"/include/msvc_compat", which obviously doesn't work.

Mike

From mh+jemalloc at glandium.org  Tue May 27 17:36:02 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 09:36:02 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
Message-ID: <20140528003602.GA11308@glandium.org>

On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> This is likely to work:
> 
> 	#define	INFINITY	1e500

error C2177: constant too big

Mike

From mh+jemalloc at glandium.org  Tue May 27 19:37:23 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 11:37:23 +0900
Subject: [PATCH] Avoid pointer arithmetic on void* in
	test/integration/rallocx.c
In-Reply-To: <209BBA04-B300-47CF-B0B6-12B372F91FF3@canonware.com>
References: <1400663601-1919-1-git-send-email-mh+jemalloc@glandium.org>
	<209BBA04-B300-47CF-B0B6-12B372F91FF3@canonware.com>
Message-ID: <20140528023723.GA13199@glandium.org>

On Tue, May 27, 2014 at 03:28:09PM -0700, Jason Evans wrote:
> On May 21, 2014, at 2:13 AM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> > ---
> > test/integration/rallocx.c | 6 +++---
> > 1 file changed, 3 insertions(+), 3 deletions(-)
> > 
> > diff --git a/test/integration/rallocx.c b/test/integration/rallocx.c
> > index ee21aed..7acb211 100644
> > --- a/test/integration/rallocx.c
> > +++ b/test/integration/rallocx.c
> > @@ -95,7 +95,7 @@ TEST_BEGIN(test_zero)
> > 				    "Expected zeroed memory");
> > 			}
> > 			if (psz != qsz) {
> > -				memset(q+psz, FILL_BYTE, qsz-psz);
> > +				memset((char *)q+psz, FILL_BYTE, qsz-psz);
> > 				psz = qsz;
> > 			}
> > 			p = q;
> > @@ -159,8 +159,8 @@ TEST_BEGIN(test_lg_align_and_zero)
> > 		} else {
> > 			assert_false(validate_fill(q, 0, 0, MAX_VALIDATE),
> > 			    "Expected zeroed memory");
> > -			assert_false(validate_fill(q+sz-MAX_VALIDATE, 0, 0,
> > -			    MAX_VALIDATE), "Expected zeroed memory");
> > +			assert_false(validate_fill((char *)q+sz-MAX_VALIDATE,
> > +                            0, 0, MAX_VALIDATE), "Expected zeroed memory");
> > 		}
> > 		p = q;
> > 	}
> 
> Integrated, with minor modification:
> 
> 	https://github.com/jemalloc/jemalloc/commit/3a730dfd5062ecd6fc46b68f28342e14b461f560

Fails to build with C2036: 'void *' : unknown size

The problem is the (void *) cast doesn't apply to the result of the
addition.

Mike

From mh+jemalloc at glandium.org  Tue May 27 20:38:42 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 12:38:42 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
Message-ID: <20140528033842.GB13199@glandium.org>

On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> > As for running tests, the following unit tests crash:
> > - ckh
> > - rtree
> > - tsd
> > 
> > They all crash in malloc_tsd_malloc, which is fishy.
> 
> Probably a bootstrapping order issue, but I don't have any concrete guesses as to how it's failing.

And it is. It is caused by those tests assuming that jemalloc is
initialized as a side effect of the constructor added in
20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
builds, and is not needed since there is no fork().

Do you think it's better to make jemalloc initialize itself on msvc
builds anyways, or to make those tests explicitely initialize jemalloc?

With that fixed, as well as the ssize_t thing, that leaves me with:
- SFMT crashing in gen_rand_array
- thread_arena assertions
- math.c and mq.c failure to build

Mike

From mh+jemalloc at glandium.org  Tue May 27 20:39:13 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 12:39:13 +0900
Subject: [PATCH] Move platform headers and tricks from jemalloc_internal.h.in
	to a new jemalloc_internal_decls.h header
Message-ID: <1401248353-14644-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 include/jemalloc/internal/jemalloc_internal.h.in   | 53 +-------------------
 .../jemalloc/internal/jemalloc_internal_decls.h    | 58 ++++++++++++++++++++++
 .../jemalloc/internal/jemalloc_internal_macros.h   |  4 --
 test/include/test/jemalloc_test_defs.h.in          |  1 +
 4 files changed, 60 insertions(+), 56 deletions(-)
 create mode 100644 include/jemalloc/internal/jemalloc_internal_decls.h

diff --git a/include/jemalloc/internal/jemalloc_internal.h.in b/include/jemalloc/internal/jemalloc_internal.h.in
index d9bfadf..cf20f1f 100644
--- a/include/jemalloc/internal/jemalloc_internal.h.in
+++ b/include/jemalloc/internal/jemalloc_internal.h.in
@@ -1,59 +1,8 @@
 #ifndef JEMALLOC_INTERNAL_H
 #define	JEMALLOC_INTERNAL_H
-#include <math.h>
-#ifdef _WIN32
-#  include <windows.h>
-#  define ENOENT ERROR_PATH_NOT_FOUND
-#  define EINVAL ERROR_BAD_ARGUMENTS
-#  define EAGAIN ERROR_OUTOFMEMORY
-#  define EPERM  ERROR_WRITE_FAULT
-#  define EFAULT ERROR_INVALID_ADDRESS
-#  define ENOMEM ERROR_NOT_ENOUGH_MEMORY
-#  undef ERANGE
-#  define ERANGE ERROR_INVALID_DATA
-#else
-#  include <sys/param.h>
-#  include <sys/mman.h>
-#  include <sys/syscall.h>
-#  if !defined(SYS_write) && defined(__NR_write)
-#    define SYS_write __NR_write
-#  endif
-#  include <sys/uio.h>
-#  include <pthread.h>
-#  include <errno.h>
-#endif
-#include <sys/types.h>
-
-#include <limits.h>
-#ifndef SIZE_T_MAX
-#  define SIZE_T_MAX	SIZE_MAX
-#endif
-#include <stdarg.h>
-#include <stdbool.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <stddef.h>
-#ifndef offsetof
-#  define offsetof(type, member)	((size_t)&(((type *)NULL)->member))
-#endif
-#include <inttypes.h>
-#include <string.h>
-#include <strings.h>
-#include <ctype.h>
-#ifdef _MSC_VER
-#  include <io.h>
-typedef intptr_t ssize_t;
-#  define PATH_MAX 1024
-#  define STDERR_FILENO 2
-/* Disable warnings about deprecated system functions */
-#  pragma warning(disable: 4996)
-#else
-#  include <unistd.h>
-#endif
-#include <fcntl.h>
 
 #include "jemalloc_internal_defs.h"
+#include "jemalloc/internal/jemalloc_internal_decls.h"
 
 #ifdef JEMALLOC_UTRACE
 #include <sys/ktrace.h>
diff --git a/include/jemalloc/internal/jemalloc_internal_decls.h b/include/jemalloc/internal/jemalloc_internal_decls.h
new file mode 100644
index 0000000..7775ab3
--- /dev/null
+++ b/include/jemalloc/internal/jemalloc_internal_decls.h
@@ -0,0 +1,58 @@
+#ifndef JEMALLOC_INTERNAL_DECLS_H
+#define	JEMALLOC_INTERNAL_DECLS_H
+
+#include <math.h>
+#ifdef _WIN32
+#  include <windows.h>
+#  define ENOENT ERROR_PATH_NOT_FOUND
+#  define EINVAL ERROR_BAD_ARGUMENTS
+#  define EAGAIN ERROR_OUTOFMEMORY
+#  define EPERM  ERROR_WRITE_FAULT
+#  define EFAULT ERROR_INVALID_ADDRESS
+#  define ENOMEM ERROR_NOT_ENOUGH_MEMORY
+#  undef ERANGE
+#  define ERANGE ERROR_INVALID_DATA
+#else
+#  include <sys/param.h>
+#  include <sys/mman.h>
+#  include <sys/syscall.h>
+#  if !defined(SYS_write) && defined(__NR_write)
+#    define SYS_write __NR_write
+#  endif
+#  include <sys/uio.h>
+#  include <pthread.h>
+#  include <errno.h>
+#endif
+#include <sys/types.h>
+
+#include <limits.h>
+#ifndef SIZE_T_MAX
+#  define SIZE_T_MAX	SIZE_MAX
+#endif
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <stddef.h>
+#ifndef offsetof
+#  define offsetof(type, member)	((size_t)&(((type *)NULL)->member))
+#endif
+#include <inttypes.h>
+#include <string.h>
+#include <strings.h>
+#include <ctype.h>
+#ifdef _MSC_VER
+#  include <io.h>
+typedef intptr_t ssize_t;
+#  define PATH_MAX 1024
+#  define STDERR_FILENO 2
+#  define __func__ __FUNCTION__
+/* Disable warnings about deprecated system functions */
+#  pragma warning(disable: 4996)
+#else
+#  include <unistd.h>
+#endif
+#include <fcntl.h>
+
+#endif /* JEMALLOC_INTERNAL_H */
diff --git a/include/jemalloc/internal/jemalloc_internal_macros.h b/include/jemalloc/internal/jemalloc_internal_macros.h
index bb81e99..4e23923 100644
--- a/include/jemalloc/internal/jemalloc_internal_macros.h
+++ b/include/jemalloc/internal/jemalloc_internal_macros.h
@@ -49,7 +49,3 @@
 #ifndef JEMALLOC_HAS_RESTRICT
 #  define restrict
 #endif
-
-#ifdef _MSC_VER
-#  define __func__ __FUNCTION__
-#endif
diff --git a/test/include/test/jemalloc_test_defs.h.in b/test/include/test/jemalloc_test_defs.h.in
index 18a9773..aaaaec1 100644
--- a/test/include/test/jemalloc_test_defs.h.in
+++ b/test/include/test/jemalloc_test_defs.h.in
@@ -1,4 +1,5 @@
 #include "jemalloc/internal/jemalloc_internal_defs.h"
+#include "jemalloc/internal/jemalloc_internal_decls.h"
 
 /* For use by SFMT. */
 #undef HAVE_SSE2
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Tue May 27 21:14:46 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 13:14:46 +0900
Subject: [PATCH] Define INFINITY when it's not defined
Message-ID: <1401250486-15087-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/unit/math.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/test/unit/math.c b/test/unit/math.c
index a1b288e..b1b2377 100644
--- a/test/unit/math.c
+++ b/test/unit/math.c
@@ -3,6 +3,12 @@
 #define	MAX_REL_ERR 1.0e-9
 #define	MAX_ABS_ERR 1.0e-9
 
+#include <float.h>
+
+#ifndef INFINITY
+#define INFINITY (DBL_MAX + DBL_MAX)
+#endif
+
 static bool
 double_eq_rel(double a, double b, double max_rel_err, double max_abs_err)
 {
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Tue May 27 22:06:30 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 14:06:30 +0900
Subject: [PATCH] Correctly return exit code from thd_join on Windows
Message-ID: <1401253590-18622-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/src/thd.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/test/src/thd.c b/test/src/thd.c
index 233242a..7e53625 100644
--- a/test/src/thd.c
+++ b/test/src/thd.c
@@ -14,7 +14,8 @@ void
 thd_join(thd_t thd, void **ret)
 {
 
-	WaitForSingleObject(thd, INFINITE);
+	if (WaitForSingleObject(thd, INFINITE) == WAIT_OBJECT_0 && ret)
+		GetExitCodeThread(thd, (LPDWORD) ret);
 }
 
 #else
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Tue May 27 22:17:01 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Wed, 28 May 2014 14:17:01 +0900
Subject: [PATCH] Fixup after 3a730df
In-Reply-To: <20140528023723.GA13199@glandium.org>
References: <20140528023723.GA13199@glandium.org>
Message-ID: <1401254221-18844-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/integration/rallocx.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/test/integration/rallocx.c b/test/integration/rallocx.c
index e78e02f..b698072 100644
--- a/test/integration/rallocx.c
+++ b/test/integration/rallocx.c
@@ -95,7 +95,7 @@ TEST_BEGIN(test_zero)
 				    "Expected zeroed memory");
 			}
 			if (psz != qsz) {
-				memset((void *)(uintptr_t)q+psz, FILL_BYTE,
+				memset((void *)((uintptr_t)q+psz), FILL_BYTE,
 				    qsz-psz);
 				psz = qsz;
 			}
@@ -161,7 +161,7 @@ TEST_BEGIN(test_lg_align_and_zero)
 			assert_false(validate_fill(q, 0, 0, MAX_VALIDATE),
 			    "Expected zeroed memory");
 			assert_false(validate_fill(
-			    (void *)(uintptr_t)q+sz-MAX_VALIDATE,
+			    (void *)((uintptr_t)q+sz-MAX_VALIDATE),
 			    0, 0, MAX_VALIDATE), "Expected zeroed memory");
 		}
 		p = q;
-- 
2.0.0.rc2


From jasone at canonware.com  Wed May 28 09:40:30 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 09:40:30 -0700
Subject: [PATCH] Move platform headers and tricks from
	jemalloc_internal.h.in to a new jemalloc_internal_decls.h header
In-Reply-To: <1401248353-14644-1-git-send-email-mh+jemalloc@glandium.org>
References: <1401248353-14644-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <E4CE20AC-81B3-41F9-A4C2-BEC83D1BC295@canonware.com>

On May 27, 2014, at 8:39 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> include/jemalloc/internal/jemalloc_internal.h.in   | 53 +-------------------
> .../jemalloc/internal/jemalloc_internal_decls.h    | 58 ++++++++++++++++++++++
> .../jemalloc/internal/jemalloc_internal_macros.h   |  4 --
> test/include/test/jemalloc_test_defs.h.in          |  1 +
> 4 files changed, 60 insertions(+), 56 deletions(-)
> create mode 100644 include/jemalloc/internal/jemalloc_internal_decls.h

Integrated:

	https://github.com/jemalloc/jemalloc/commit/12f74e680c1d53c8fe5323a4ff66877534dcadd3

Thanks,
Jason

From jasone at canonware.com  Wed May 28 09:42:31 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 09:42:31 -0700
Subject: [PATCH] Define INFINITY when it's not defined
In-Reply-To: <1401250486-15087-1-git-send-email-mh+jemalloc@glandium.org>
References: <1401250486-15087-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <5395904E-3BD6-417E-AC33-65B36D40B9ED@canonware.com>

On May 27, 2014, at 9:14 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/unit/math.c | 6 ++++++
> 1 file changed, 6 insertions(+)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/26246af977250a520194a1ced89cbc73ce218ca7

Thanks,
Jason

From jasone at canonware.com  Wed May 28 09:45:01 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 09:45:01 -0700
Subject: [PATCH] Correctly return exit code from thd_join on Windows
In-Reply-To: <1401253590-18622-1-git-send-email-mh+jemalloc@glandium.org>
References: <1401253590-18622-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <A0AD18C2-EB52-44DE-9EE6-EBC2DC6715D9@canonware.com>

On May 27, 2014, at 10:06 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/src/thd.c | 3 ++-
> 1 file changed, 2 insertions(+), 1 deletion(-)

Integrated:

	https://github.com/jemalloc/jemalloc/commit/17767b5f2b195076a8b57f8489addabb1ee68009

Thanks,
Jason

From jasone at canonware.com  Wed May 28 09:52:23 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 09:52:23 -0700
Subject: [PATCH] Fixup after 3a730df
In-Reply-To: <1401254221-18844-1-git-send-email-mh+jemalloc@glandium.org>
References: <20140528023723.GA13199@glandium.org>
	<1401254221-18844-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <FAC9948B-08B8-456C-B274-81A77C6EFDF6@canonware.com>

On May 27, 2014, at 10:17 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> ---
> test/integration/rallocx.c | 4 ++--
> 1 file changed, 2 insertions(+), 2 deletions(-)

Oops.  Integrated:

	https://github.com/jemalloc/jemalloc/commit/b54aef1d8cc16f7b3f295cf857842aa6d5844d46

Thanks,
Jason

From jasone at canonware.com  Wed May 28 10:46:19 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 10:46:19 -0700
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140528002811.GA10846@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528002811.GA10846@glandium.org>
Message-ID: <6B7487AE-089F-4FE4-B3A4-BEC9383BE1BF@canonware.com>

On May 27, 2014, at 5:28 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
>> Thank you for fixing the bitrot that has accumulated in the Windows
>> port.  You've motivated me to make another attempt at purchasing the
>> necessary MS software to add Windows to my testing regime.
> 
> That'd be great :) Although I've also been guilty of letting it bitrot.

After a naively mistaken purchase and refund of the downloadable Windows 8.1 (a .exe download is of little use since I don't have any MS operating system), I have a physical copy on the way.  I'll be interested to to learn how far away we are from being able to use Visual Studio in addition to MinGW, but mainly I'm eager to detect regressions prior to releases and be able to claim with a straight face that jemalloc is reliable on Windows. =)

Jason


From jasone at canonware.com  Wed May 28 11:11:52 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 11:11:52 -0700
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140528033842.GB13199@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
Message-ID: <01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>

On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
> On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
>>> As for running tests, the following unit tests crash:
>>> - ckh
>>> - rtree
>>> - tsd
>>> 
>>> They all crash in malloc_tsd_malloc, which is fishy.
>> 
>> Probably a bootstrapping order issue, but I don't have any concrete guesses as to how it's failing.
> 
> And it is. It is caused by those tests assuming that jemalloc is
> initialized as a side effect of the constructor added in
> 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
> builds, and is not needed since there is no fork().
> 
> Do you think it's better to make jemalloc initialize itself on msvc
> builds anyways, or to make those tests explicitely initialize jemalloc?

I just made a small change to the test harness to address this:

	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57

I'd rather initialization be automatic so that we don't run into this sort of test fragility in the future.  Let me know if the diff doesn't do the right thing for some reason.

Thanks,
Jason

From jasone at canonware.com  Wed May 28 11:26:21 2014
From: jasone at canonware.com (Jason Evans)
Date: Wed, 28 May 2014 11:26:21 -0700
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
	<01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
Message-ID: <683C99C8-975C-4AAC-827B-276CD87BD986@canonware.com>

On May 28, 2014, at 11:11 AM, Jason Evans <jasone at canonware.com> wrote:
> On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org> wrote:
>> On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
>>>> As for running tests, the following unit tests crash:
>>>> - ckh
>>>> - rtree
>>>> - tsd
>>>> 
>>>> They all crash in malloc_tsd_malloc, which is fishy.
>>> 
>>> Probably a bootstrapping order issue, but I don't have any concrete guesses as to how it's failing.
>> 
>> And it is. It is caused by those tests assuming that jemalloc is
>> initialized as a side effect of the constructor added in
>> 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
>> builds, and is not needed since there is no fork().
>> 
>> Do you think it's better to make jemalloc initialize itself on msvc
>> builds anyways, or to make those tests explicitely initialize jemalloc?
> 
> I just made a small change to the test harness to address this:
> 
> 	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57
> 
> I'd rather initialization be automatic so that we don't run into this sort of test fragility in the future.  Let me know if the diff doesn't do the right thing for some reason.

Avoid unintended side effects:

	https://github.com/jemalloc/jemalloc/commit/99118622ff5204feaabd2ee4109a7847ab388282

Jason

From paul at pedriana.com  Wed May 28 12:10:15 2014
From: paul at pedriana.com (Paul Pedriana)
Date: Wed, 28 May 2014 12:10:15 -0700
Subject: [PATCH] Correctly return exit code from thd_join on Windows
In-Reply-To: <1401253590-18622-1-git-send-email-mh+jemalloc@glandium.org>
References: <1401253590-18622-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <CAJ5r4P2Dv5tWKNv+pDdroX3pUL8nBmAek92MuPGg+AG=S43RLA@mail.gmail.com>

I'm not sure that Windows GetExitCodeThread usage is right. DWORD is 32
bits even on 64 bit Windows, so on Win64 when you cast void** ret to DWORD*
you have a size mismatch.
On May 27, 2014 10:06 PM, "Mike Hommey" <mh+jemalloc at glandium.org> wrote:

> From: Mike Hommey <mh at glandium.org>
>
> ---
>  test/src/thd.c | 3 ++-
>  1 file changed, 2 insertions(+), 1 deletion(-)
>
> diff --git a/test/src/thd.c b/test/src/thd.c
> index 233242a..7e53625 100644
> --- a/test/src/thd.c
> +++ b/test/src/thd.c
> @@ -14,7 +14,8 @@ void
>  thd_join(thd_t thd, void **ret)
>  {
>
> -       WaitForSingleObject(thd, INFINITE);
> +       if (WaitForSingleObject(thd, INFINITE) == WAIT_OBJECT_0 && ret)
> +               GetExitCodeThread(thd, (LPDWORD) ret);
>  }
>
>  #else
> --
> 2.0.0.rc2
>
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.canonware.com/pipermail/jemalloc-discuss/attachments/20140528/ff03117b/attachment.html>

From mh+jemalloc at glandium.org  Wed May 28 17:03:00 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 09:03:00 +0900
Subject: [PATCH] Fix thd_join on win64
In-Reply-To: <CAJ5r4P2Dv5tWKNv+pDdroX3pUL8nBmAek92MuPGg+AG=S43RLA@mail.gmail.com>
References: <CAJ5r4P2Dv5tWKNv+pDdroX3pUL8nBmAek92MuPGg+AG=S43RLA@mail.gmail.com>
Message-ID: <1401321780-734-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 test/src/thd.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/test/src/thd.c b/test/src/thd.c
index 7e53625..c9d0065 100644
--- a/test/src/thd.c
+++ b/test/src/thd.c
@@ -14,8 +14,11 @@ void
 thd_join(thd_t thd, void **ret)
 {
 
-	if (WaitForSingleObject(thd, INFINITE) == WAIT_OBJECT_0 && ret)
-		GetExitCodeThread(thd, (LPDWORD) ret);
+	if (WaitForSingleObject(thd, INFINITE) == WAIT_OBJECT_0 && ret) {
+		DWORD exit_code;
+		GetExitCodeThread(thd, (LPDWORD) &exit_code);
+		*ret = (void *)(uintptr_t)exit_code;
+	}
 }
 
 #else
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Wed May 28 17:05:16 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 09:05:16 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
	<01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
Message-ID: <20140529000516.GA638@glandium.org>

On Wed, May 28, 2014 at 11:11:52AM -0700, Jason Evans wrote:
> On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org>
> wrote:
> > On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> >>> As for running tests, the following unit tests crash: - ckh -
> >>> rtree - tsd
> >>> 
> >>> They all crash in malloc_tsd_malloc, which is fishy.
> >> 
> >> Probably a bootstrapping order issue, but I don't have any concrete
> >> guesses as to how it's failing.
> > 
> > And it is. It is caused by those tests assuming that jemalloc is
> > initialized as a side effect of the constructor added in
> > 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
> > builds, and is not needed since there is no fork().
> > 
> > Do you think it's better to make jemalloc initialize itself on msvc
> > builds anyways, or to make those tests explicitely initialize
> > jemalloc?
> 
> I just made a small change to the test harness to address this:
> 
> 	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57
> 
> I'd rather initialization be automatic so that we don't run into this
> sort of test fragility in the future.  Let me know if the diff doesn't
> do the right thing for some reason.

So, interestingly, this makes SFMT work, while calling malloc_init from
_init_init_lock makes it crash. However, contrary to calling malloc_init
from _init_init_lock, it doesn't fix test/unit/tsd. I'll check what's
wrong with that one.

Cheers,

Mike

From mh+jemalloc at glandium.org  Wed May 28 17:46:34 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 09:46:34 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140529000516.GA638@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
	<01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
	<20140529000516.GA638@glandium.org>
Message-ID: <20140529004634.GB638@glandium.org>

On Thu, May 29, 2014 at 09:05:16AM +0900, Mike Hommey wrote:
> On Wed, May 28, 2014 at 11:11:52AM -0700, Jason Evans wrote:
> > On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org>
> > wrote:
> > > On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> > >>> As for running tests, the following unit tests crash: - ckh -
> > >>> rtree - tsd
> > >>> 
> > >>> They all crash in malloc_tsd_malloc, which is fishy.
> > >> 
> > >> Probably a bootstrapping order issue, but I don't have any concrete
> > >> guesses as to how it's failing.
> > > 
> > > And it is. It is caused by those tests assuming that jemalloc is
> > > initialized as a side effect of the constructor added in
> > > 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
> > > builds, and is not needed since there is no fork().
> > > 
> > > Do you think it's better to make jemalloc initialize itself on msvc
> > > builds anyways, or to make those tests explicitely initialize
> > > jemalloc?
> > 
> > I just made a small change to the test harness to address this:
> > 
> > 	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57
> > 
> > I'd rather initialization be automatic so that we don't run into this
> > sort of test fragility in the future.  Let me know if the diff doesn't
> > do the right thing for some reason.
> 
> So, interestingly, this makes SFMT work, while calling malloc_init from
> _init_init_lock makes it crash. However, contrary to calling malloc_init
> from _init_init_lock, it doesn't fix test/unit/tsd. I'll check what's
> wrong with that one.

And it's because data_tsd_boot in test/unit/tsd.c's main runs before the
initialization you added, which then happily resets ncleanups and makes
other tsd cleanups overwrite data's. Arguably, malloc_tsd_boot is
useless, but in case it grows to do something else, it should still run
before data_tsd_boot.

Adding malloc_tsd_boot before data_tsd_boot obviously doesn't work,
because the test harness init will call malloc_init, which will call
malloc_tsd_boot again, leaving the problem exactly as it is now.

Moving data_tsd_boot in test_tsd_main_thread worked for me, but I'm not
convinced that's really the best thing to do. How about adding another
nallocx before data_tsd_boot?

Mike

From mh+jemalloc at glandium.org  Wed May 28 17:55:51 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 09:55:51 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140529004634.GB638@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
	<01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
	<20140529000516.GA638@glandium.org>
	<20140529004634.GB638@glandium.org>
Message-ID: <20140529005551.GA1709@glandium.org>

On Thu, May 29, 2014 at 09:46:34AM +0900, Mike Hommey wrote:
> On Thu, May 29, 2014 at 09:05:16AM +0900, Mike Hommey wrote:
> > On Wed, May 28, 2014 at 11:11:52AM -0700, Jason Evans wrote:
> > > On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org>
> > > wrote:
> > > > On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> > > >>> As for running tests, the following unit tests crash: - ckh -
> > > >>> rtree - tsd
> > > >>> 
> > > >>> They all crash in malloc_tsd_malloc, which is fishy.
> > > >> 
> > > >> Probably a bootstrapping order issue, but I don't have any concrete
> > > >> guesses as to how it's failing.
> > > > 
> > > > And it is. It is caused by those tests assuming that jemalloc is
> > > > initialized as a side effect of the constructor added in
> > > > 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
> > > > builds, and is not needed since there is no fork().
> > > > 
> > > > Do you think it's better to make jemalloc initialize itself on msvc
> > > > builds anyways, or to make those tests explicitely initialize
> > > > jemalloc?
> > > 
> > > I just made a small change to the test harness to address this:
> > > 
> > > 	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57
> > > 
> > > I'd rather initialization be automatic so that we don't run into this
> > > sort of test fragility in the future.  Let me know if the diff doesn't
> > > do the right thing for some reason.
> > 
> > So, interestingly, this makes SFMT work, while calling malloc_init from
> > _init_init_lock makes it crash. However, contrary to calling malloc_init
> > from _init_init_lock, it doesn't fix test/unit/tsd. I'll check what's
> > wrong with that one.
> 
> And it's because data_tsd_boot in test/unit/tsd.c's main runs before the
> initialization you added, which then happily resets ncleanups and makes
> other tsd cleanups overwrite data's. Arguably, malloc_tsd_boot is
> useless, but in case it grows to do something else, it should still run
> before data_tsd_boot.
> 
> Adding malloc_tsd_boot before data_tsd_boot obviously doesn't work,
> because the test harness init will call malloc_init, which will call
> malloc_tsd_boot again, leaving the problem exactly as it is now.
> 
> Moving data_tsd_boot in test_tsd_main_thread worked for me, but I'm not
> convinced that's really the best thing to do. How about adding another
> nallocx before data_tsd_boot?

BTW, with this out of the way, mq.c is the very last bit currently
failing (to build), and, I must say, I'm not very concerned about it. My
interest was making sure a jemalloc built with MSVC still passed tests, and
aiui, mq.c is a test of something that's not even used, so I'm less
interested in finding a fix.

Mike

From mh+jemalloc at glandium.org  Thu May 29 00:20:41 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:20:41 +0900
Subject: [PATCH] Don't use msvc_compat's C99 headers with MSVC versions that
	have (some) C99 support
Message-ID: <1401348041-8675-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac                       |   4 +
 include/msvc_compat/C99/inttypes.h | 313 +++++++++++++++++++++++++++++++++++++
 include/msvc_compat/C99/stdbool.h  |  16 ++
 include/msvc_compat/C99/stdint.h   | 247 +++++++++++++++++++++++++++++
 include/msvc_compat/inttypes.h     | 313 -------------------------------------
 include/msvc_compat/stdbool.h      |  16 --
 include/msvc_compat/stdint.h       | 247 -----------------------------
 7 files changed, 580 insertions(+), 576 deletions(-)
 create mode 100644 include/msvc_compat/C99/inttypes.h
 create mode 100644 include/msvc_compat/C99/stdbool.h
 create mode 100644 include/msvc_compat/C99/stdint.h
 delete mode 100644 include/msvc_compat/inttypes.h
 delete mode 100644 include/msvc_compat/stdbool.h
 delete mode 100644 include/msvc_compat/stdint.h

diff --git a/configure.ac b/configure.ac
index 58f6289..0d83ab9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -155,6 +155,10 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
   AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ])
 fi
 
+if test "x$je_cv_msvc" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "x"; then
+  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
+fi
+
 AC_CHECK_SIZEOF([void *])
 if test "x${ac_cv_sizeof_void_p}" = "x8" ; then
   LG_SIZEOF_PTR=3
diff --git a/include/msvc_compat/C99/inttypes.h b/include/msvc_compat/C99/inttypes.h
new file mode 100644
index 0000000..a4e6b75
--- /dev/null
+++ b/include/msvc_compat/C99/inttypes.h
@@ -0,0 +1,313 @@
+// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_INTTYPES_H_ // [
+#define _MSC_INTTYPES_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include "stdint.h"
+
+// 7.8 Format conversion of integer types
+
+typedef struct {
+   intmax_t quot;
+   intmax_t rem;
+} imaxdiv_t;
+
+// 7.8.1 Macros for format specifiers
+
+#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
+
+#ifdef _WIN64
+#  define __PRI64_PREFIX        "l"
+#  define __PRIPTR_PREFIX       "l"
+#else
+#  define __PRI64_PREFIX        "ll"
+#  define __PRIPTR_PREFIX
+#endif
+
+// The fprintf macros for signed integers are:
+#define PRId8       "d"
+#define PRIi8       "i"
+#define PRIdLEAST8  "d"
+#define PRIiLEAST8  "i"
+#define PRIdFAST8   "d"
+#define PRIiFAST8   "i"
+
+#define PRId16       "hd"
+#define PRIi16       "hi"
+#define PRIdLEAST16  "hd"
+#define PRIiLEAST16  "hi"
+#define PRIdFAST16   "hd"
+#define PRIiFAST16   "hi"
+
+#define PRId32       "d"
+#define PRIi32       "i"
+#define PRIdLEAST32  "d"
+#define PRIiLEAST32  "i"
+#define PRIdFAST32   "d"
+#define PRIiFAST32   "i"
+
+#define PRId64       __PRI64_PREFIX "d"
+#define PRIi64       __PRI64_PREFIX "i"
+#define PRIdLEAST64  __PRI64_PREFIX "d"
+#define PRIiLEAST64  __PRI64_PREFIX "i"
+#define PRIdFAST64   __PRI64_PREFIX "d"
+#define PRIiFAST64   __PRI64_PREFIX "i"
+
+#define PRIdMAX     __PRI64_PREFIX "d"
+#define PRIiMAX     __PRI64_PREFIX "i"
+
+#define PRIdPTR     __PRIPTR_PREFIX "d"
+#define PRIiPTR     __PRIPTR_PREFIX "i"
+
+// The fprintf macros for unsigned integers are:
+#define PRIo8       "o"
+#define PRIu8       "u"
+#define PRIx8       "x"
+#define PRIX8       "X"
+#define PRIoLEAST8  "o"
+#define PRIuLEAST8  "u"
+#define PRIxLEAST8  "x"
+#define PRIXLEAST8  "X"
+#define PRIoFAST8   "o"
+#define PRIuFAST8   "u"
+#define PRIxFAST8   "x"
+#define PRIXFAST8   "X"
+
+#define PRIo16       "ho"
+#define PRIu16       "hu"
+#define PRIx16       "hx"
+#define PRIX16       "hX"
+#define PRIoLEAST16  "ho"
+#define PRIuLEAST16  "hu"
+#define PRIxLEAST16  "hx"
+#define PRIXLEAST16  "hX"
+#define PRIoFAST16   "ho"
+#define PRIuFAST16   "hu"
+#define PRIxFAST16   "hx"
+#define PRIXFAST16   "hX"
+
+#define PRIo32       "o"
+#define PRIu32       "u"
+#define PRIx32       "x"
+#define PRIX32       "X"
+#define PRIoLEAST32  "o"
+#define PRIuLEAST32  "u"
+#define PRIxLEAST32  "x"
+#define PRIXLEAST32  "X"
+#define PRIoFAST32   "o"
+#define PRIuFAST32   "u"
+#define PRIxFAST32   "x"
+#define PRIXFAST32   "X"
+
+#define PRIo64       __PRI64_PREFIX "o"
+#define PRIu64       __PRI64_PREFIX "u"
+#define PRIx64       __PRI64_PREFIX "x"
+#define PRIX64       __PRI64_PREFIX "X"
+#define PRIoLEAST64  __PRI64_PREFIX "o"
+#define PRIuLEAST64  __PRI64_PREFIX "u"
+#define PRIxLEAST64  __PRI64_PREFIX "x"
+#define PRIXLEAST64  __PRI64_PREFIX "X"
+#define PRIoFAST64   __PRI64_PREFIX "o"
+#define PRIuFAST64   __PRI64_PREFIX "u"
+#define PRIxFAST64   __PRI64_PREFIX "x"
+#define PRIXFAST64   __PRI64_PREFIX "X"
+
+#define PRIoMAX     __PRI64_PREFIX "o"
+#define PRIuMAX     __PRI64_PREFIX "u"
+#define PRIxMAX     __PRI64_PREFIX "x"
+#define PRIXMAX     __PRI64_PREFIX "X"
+
+#define PRIoPTR     __PRIPTR_PREFIX "o"
+#define PRIuPTR     __PRIPTR_PREFIX "u"
+#define PRIxPTR     __PRIPTR_PREFIX "x"
+#define PRIXPTR     __PRIPTR_PREFIX "X"
+
+// The fscanf macros for signed integers are:
+#define SCNd8       "d"
+#define SCNi8       "i"
+#define SCNdLEAST8  "d"
+#define SCNiLEAST8  "i"
+#define SCNdFAST8   "d"
+#define SCNiFAST8   "i"
+
+#define SCNd16       "hd"
+#define SCNi16       "hi"
+#define SCNdLEAST16  "hd"
+#define SCNiLEAST16  "hi"
+#define SCNdFAST16   "hd"
+#define SCNiFAST16   "hi"
+
+#define SCNd32       "ld"
+#define SCNi32       "li"
+#define SCNdLEAST32  "ld"
+#define SCNiLEAST32  "li"
+#define SCNdFAST32   "ld"
+#define SCNiFAST32   "li"
+
+#define SCNd64       "I64d"
+#define SCNi64       "I64i"
+#define SCNdLEAST64  "I64d"
+#define SCNiLEAST64  "I64i"
+#define SCNdFAST64   "I64d"
+#define SCNiFAST64   "I64i"
+
+#define SCNdMAX     "I64d"
+#define SCNiMAX     "I64i"
+
+#ifdef _WIN64 // [
+#  define SCNdPTR     "I64d"
+#  define SCNiPTR     "I64i"
+#else  // _WIN64 ][
+#  define SCNdPTR     "ld"
+#  define SCNiPTR     "li"
+#endif  // _WIN64 ]
+
+// The fscanf macros for unsigned integers are:
+#define SCNo8       "o"
+#define SCNu8       "u"
+#define SCNx8       "x"
+#define SCNX8       "X"
+#define SCNoLEAST8  "o"
+#define SCNuLEAST8  "u"
+#define SCNxLEAST8  "x"
+#define SCNXLEAST8  "X"
+#define SCNoFAST8   "o"
+#define SCNuFAST8   "u"
+#define SCNxFAST8   "x"
+#define SCNXFAST8   "X"
+
+#define SCNo16       "ho"
+#define SCNu16       "hu"
+#define SCNx16       "hx"
+#define SCNX16       "hX"
+#define SCNoLEAST16  "ho"
+#define SCNuLEAST16  "hu"
+#define SCNxLEAST16  "hx"
+#define SCNXLEAST16  "hX"
+#define SCNoFAST16   "ho"
+#define SCNuFAST16   "hu"
+#define SCNxFAST16   "hx"
+#define SCNXFAST16   "hX"
+
+#define SCNo32       "lo"
+#define SCNu32       "lu"
+#define SCNx32       "lx"
+#define SCNX32       "lX"
+#define SCNoLEAST32  "lo"
+#define SCNuLEAST32  "lu"
+#define SCNxLEAST32  "lx"
+#define SCNXLEAST32  "lX"
+#define SCNoFAST32   "lo"
+#define SCNuFAST32   "lu"
+#define SCNxFAST32   "lx"
+#define SCNXFAST32   "lX"
+
+#define SCNo64       "I64o"
+#define SCNu64       "I64u"
+#define SCNx64       "I64x"
+#define SCNX64       "I64X"
+#define SCNoLEAST64  "I64o"
+#define SCNuLEAST64  "I64u"
+#define SCNxLEAST64  "I64x"
+#define SCNXLEAST64  "I64X"
+#define SCNoFAST64   "I64o"
+#define SCNuFAST64   "I64u"
+#define SCNxFAST64   "I64x"
+#define SCNXFAST64   "I64X"
+
+#define SCNoMAX     "I64o"
+#define SCNuMAX     "I64u"
+#define SCNxMAX     "I64x"
+#define SCNXMAX     "I64X"
+
+#ifdef _WIN64 // [
+#  define SCNoPTR     "I64o"
+#  define SCNuPTR     "I64u"
+#  define SCNxPTR     "I64x"
+#  define SCNXPTR     "I64X"
+#else  // _WIN64 ][
+#  define SCNoPTR     "lo"
+#  define SCNuPTR     "lu"
+#  define SCNxPTR     "lx"
+#  define SCNXPTR     "lX"
+#endif  // _WIN64 ]
+
+#endif // __STDC_FORMAT_MACROS ]
+
+// 7.8.2 Functions for greatest-width integer types
+
+// 7.8.2.1 The imaxabs function
+#define imaxabs _abs64
+
+// 7.8.2.2 The imaxdiv function
+
+// This is modified version of div() function from Microsoft's div.c found
+// in %MSVC.NET%\crt\src\div.c
+#ifdef STATIC_IMAXDIV // [
+static
+#else // STATIC_IMAXDIV ][
+_inline
+#endif // STATIC_IMAXDIV ]
+imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
+{
+   imaxdiv_t result;
+
+   result.quot = numer / denom;
+   result.rem = numer % denom;
+
+   if (numer < 0 && result.rem > 0) {
+      // did division wrong; must fix up
+      ++result.quot;
+      result.rem -= denom;
+   }
+
+   return result;
+}
+
+// 7.8.2.3 The strtoimax and strtoumax functions
+#define strtoimax _strtoi64
+#define strtoumax _strtoui64
+
+// 7.8.2.4 The wcstoimax and wcstoumax functions
+#define wcstoimax _wcstoi64
+#define wcstoumax _wcstoui64
+
+
+#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/C99/stdbool.h b/include/msvc_compat/C99/stdbool.h
new file mode 100644
index 0000000..da9ee8b
--- /dev/null
+++ b/include/msvc_compat/C99/stdbool.h
@@ -0,0 +1,16 @@
+#ifndef stdbool_h
+#define stdbool_h
+
+#include <wtypes.h>
+
+/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
+/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
+typedef BOOL _Bool;
+
+#define bool _Bool
+#define true 1
+#define false 0
+
+#define __bool_true_false_are_defined 1
+
+#endif /* stdbool_h */
diff --git a/include/msvc_compat/C99/stdint.h b/include/msvc_compat/C99/stdint.h
new file mode 100644
index 0000000..d02608a
--- /dev/null
+++ b/include/msvc_compat/C99/stdint.h
@@ -0,0 +1,247 @@
+// ISO C9x  compliant stdint.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006-2008 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_STDINT_H_ // [
+#define _MSC_STDINT_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <limits.h>
+
+// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
+// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
+// or compiler give many errors like this:
+//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
+#ifdef __cplusplus
+extern "C" {
+#endif
+#  include <wchar.h>
+#ifdef __cplusplus
+}
+#endif
+
+// Define _W64 macros to mark types changing their size, like intptr_t.
+#ifndef _W64
+#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
+#     define _W64 __w64
+#  else
+#     define _W64
+#  endif
+#endif
+
+
+// 7.18.1 Integer types
+
+// 7.18.1.1 Exact-width integer types
+
+// Visual Studio 6 and Embedded Visual C++ 4 doesn't
+// realize that, e.g. char has the same size as __int8
+// so we give up on __intX for them.
+#if (_MSC_VER < 1300)
+   typedef signed char       int8_t;
+   typedef signed short      int16_t;
+   typedef signed int        int32_t;
+   typedef unsigned char     uint8_t;
+   typedef unsigned short    uint16_t;
+   typedef unsigned int      uint32_t;
+#else
+   typedef signed __int8     int8_t;
+   typedef signed __int16    int16_t;
+   typedef signed __int32    int32_t;
+   typedef unsigned __int8   uint8_t;
+   typedef unsigned __int16  uint16_t;
+   typedef unsigned __int32  uint32_t;
+#endif
+typedef signed __int64       int64_t;
+typedef unsigned __int64     uint64_t;
+
+
+// 7.18.1.2 Minimum-width integer types
+typedef int8_t    int_least8_t;
+typedef int16_t   int_least16_t;
+typedef int32_t   int_least32_t;
+typedef int64_t   int_least64_t;
+typedef uint8_t   uint_least8_t;
+typedef uint16_t  uint_least16_t;
+typedef uint32_t  uint_least32_t;
+typedef uint64_t  uint_least64_t;
+
+// 7.18.1.3 Fastest minimum-width integer types
+typedef int8_t    int_fast8_t;
+typedef int16_t   int_fast16_t;
+typedef int32_t   int_fast32_t;
+typedef int64_t   int_fast64_t;
+typedef uint8_t   uint_fast8_t;
+typedef uint16_t  uint_fast16_t;
+typedef uint32_t  uint_fast32_t;
+typedef uint64_t  uint_fast64_t;
+
+// 7.18.1.4 Integer types capable of holding object pointers
+#ifdef _WIN64 // [
+   typedef signed __int64    intptr_t;
+   typedef unsigned __int64  uintptr_t;
+#else // _WIN64 ][
+   typedef _W64 signed int   intptr_t;
+   typedef _W64 unsigned int uintptr_t;
+#endif // _WIN64 ]
+
+// 7.18.1.5 Greatest-width integer types
+typedef int64_t   intmax_t;
+typedef uint64_t  uintmax_t;
+
+
+// 7.18.2 Limits of specified-width integer types
+
+#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
+
+// 7.18.2.1 Limits of exact-width integer types
+#define INT8_MIN     ((int8_t)_I8_MIN)
+#define INT8_MAX     _I8_MAX
+#define INT16_MIN    ((int16_t)_I16_MIN)
+#define INT16_MAX    _I16_MAX
+#define INT32_MIN    ((int32_t)_I32_MIN)
+#define INT32_MAX    _I32_MAX
+#define INT64_MIN    ((int64_t)_I64_MIN)
+#define INT64_MAX    _I64_MAX
+#define UINT8_MAX    _UI8_MAX
+#define UINT16_MAX   _UI16_MAX
+#define UINT32_MAX   _UI32_MAX
+#define UINT64_MAX   _UI64_MAX
+
+// 7.18.2.2 Limits of minimum-width integer types
+#define INT_LEAST8_MIN    INT8_MIN
+#define INT_LEAST8_MAX    INT8_MAX
+#define INT_LEAST16_MIN   INT16_MIN
+#define INT_LEAST16_MAX   INT16_MAX
+#define INT_LEAST32_MIN   INT32_MIN
+#define INT_LEAST32_MAX   INT32_MAX
+#define INT_LEAST64_MIN   INT64_MIN
+#define INT_LEAST64_MAX   INT64_MAX
+#define UINT_LEAST8_MAX   UINT8_MAX
+#define UINT_LEAST16_MAX  UINT16_MAX
+#define UINT_LEAST32_MAX  UINT32_MAX
+#define UINT_LEAST64_MAX  UINT64_MAX
+
+// 7.18.2.3 Limits of fastest minimum-width integer types
+#define INT_FAST8_MIN    INT8_MIN
+#define INT_FAST8_MAX    INT8_MAX
+#define INT_FAST16_MIN   INT16_MIN
+#define INT_FAST16_MAX   INT16_MAX
+#define INT_FAST32_MIN   INT32_MIN
+#define INT_FAST32_MAX   INT32_MAX
+#define INT_FAST64_MIN   INT64_MIN
+#define INT_FAST64_MAX   INT64_MAX
+#define UINT_FAST8_MAX   UINT8_MAX
+#define UINT_FAST16_MAX  UINT16_MAX
+#define UINT_FAST32_MAX  UINT32_MAX
+#define UINT_FAST64_MAX  UINT64_MAX
+
+// 7.18.2.4 Limits of integer types capable of holding object pointers
+#ifdef _WIN64 // [
+#  define INTPTR_MIN   INT64_MIN
+#  define INTPTR_MAX   INT64_MAX
+#  define UINTPTR_MAX  UINT64_MAX
+#else // _WIN64 ][
+#  define INTPTR_MIN   INT32_MIN
+#  define INTPTR_MAX   INT32_MAX
+#  define UINTPTR_MAX  UINT32_MAX
+#endif // _WIN64 ]
+
+// 7.18.2.5 Limits of greatest-width integer types
+#define INTMAX_MIN   INT64_MIN
+#define INTMAX_MAX   INT64_MAX
+#define UINTMAX_MAX  UINT64_MAX
+
+// 7.18.3 Limits of other integer types
+
+#ifdef _WIN64 // [
+#  define PTRDIFF_MIN  _I64_MIN
+#  define PTRDIFF_MAX  _I64_MAX
+#else  // _WIN64 ][
+#  define PTRDIFF_MIN  _I32_MIN
+#  define PTRDIFF_MAX  _I32_MAX
+#endif  // _WIN64 ]
+
+#define SIG_ATOMIC_MIN  INT_MIN
+#define SIG_ATOMIC_MAX  INT_MAX
+
+#ifndef SIZE_MAX // [
+#  ifdef _WIN64 // [
+#     define SIZE_MAX  _UI64_MAX
+#  else // _WIN64 ][
+#     define SIZE_MAX  _UI32_MAX
+#  endif // _WIN64 ]
+#endif // SIZE_MAX ]
+
+// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
+#ifndef WCHAR_MIN // [
+#  define WCHAR_MIN  0
+#endif  // WCHAR_MIN ]
+#ifndef WCHAR_MAX // [
+#  define WCHAR_MAX  _UI16_MAX
+#endif  // WCHAR_MAX ]
+
+#define WINT_MIN  0
+#define WINT_MAX  _UI16_MAX
+
+#endif // __STDC_LIMIT_MACROS ]
+
+
+// 7.18.4 Limits of other integer types
+
+#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
+
+// 7.18.4.1 Macros for minimum-width integer constants
+
+#define INT8_C(val)  val##i8
+#define INT16_C(val) val##i16
+#define INT32_C(val) val##i32
+#define INT64_C(val) val##i64
+
+#define UINT8_C(val)  val##ui8
+#define UINT16_C(val) val##ui16
+#define UINT32_C(val) val##ui32
+#define UINT64_C(val) val##ui64
+
+// 7.18.4.2 Macros for greatest-width integer constants
+#define INTMAX_C   INT64_C
+#define UINTMAX_C  UINT64_C
+
+#endif // __STDC_CONSTANT_MACROS ]
+
+
+#endif // _MSC_STDINT_H_ ]
diff --git a/include/msvc_compat/inttypes.h b/include/msvc_compat/inttypes.h
deleted file mode 100644
index a4e6b75..0000000
--- a/include/msvc_compat/inttypes.h
+++ /dev/null
@@ -1,313 +0,0 @@
-// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_INTTYPES_H_ // [
-#define _MSC_INTTYPES_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include "stdint.h"
-
-// 7.8 Format conversion of integer types
-
-typedef struct {
-   intmax_t quot;
-   intmax_t rem;
-} imaxdiv_t;
-
-// 7.8.1 Macros for format specifiers
-
-#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
-
-#ifdef _WIN64
-#  define __PRI64_PREFIX        "l"
-#  define __PRIPTR_PREFIX       "l"
-#else
-#  define __PRI64_PREFIX        "ll"
-#  define __PRIPTR_PREFIX
-#endif
-
-// The fprintf macros for signed integers are:
-#define PRId8       "d"
-#define PRIi8       "i"
-#define PRIdLEAST8  "d"
-#define PRIiLEAST8  "i"
-#define PRIdFAST8   "d"
-#define PRIiFAST8   "i"
-
-#define PRId16       "hd"
-#define PRIi16       "hi"
-#define PRIdLEAST16  "hd"
-#define PRIiLEAST16  "hi"
-#define PRIdFAST16   "hd"
-#define PRIiFAST16   "hi"
-
-#define PRId32       "d"
-#define PRIi32       "i"
-#define PRIdLEAST32  "d"
-#define PRIiLEAST32  "i"
-#define PRIdFAST32   "d"
-#define PRIiFAST32   "i"
-
-#define PRId64       __PRI64_PREFIX "d"
-#define PRIi64       __PRI64_PREFIX "i"
-#define PRIdLEAST64  __PRI64_PREFIX "d"
-#define PRIiLEAST64  __PRI64_PREFIX "i"
-#define PRIdFAST64   __PRI64_PREFIX "d"
-#define PRIiFAST64   __PRI64_PREFIX "i"
-
-#define PRIdMAX     __PRI64_PREFIX "d"
-#define PRIiMAX     __PRI64_PREFIX "i"
-
-#define PRIdPTR     __PRIPTR_PREFIX "d"
-#define PRIiPTR     __PRIPTR_PREFIX "i"
-
-// The fprintf macros for unsigned integers are:
-#define PRIo8       "o"
-#define PRIu8       "u"
-#define PRIx8       "x"
-#define PRIX8       "X"
-#define PRIoLEAST8  "o"
-#define PRIuLEAST8  "u"
-#define PRIxLEAST8  "x"
-#define PRIXLEAST8  "X"
-#define PRIoFAST8   "o"
-#define PRIuFAST8   "u"
-#define PRIxFAST8   "x"
-#define PRIXFAST8   "X"
-
-#define PRIo16       "ho"
-#define PRIu16       "hu"
-#define PRIx16       "hx"
-#define PRIX16       "hX"
-#define PRIoLEAST16  "ho"
-#define PRIuLEAST16  "hu"
-#define PRIxLEAST16  "hx"
-#define PRIXLEAST16  "hX"
-#define PRIoFAST16   "ho"
-#define PRIuFAST16   "hu"
-#define PRIxFAST16   "hx"
-#define PRIXFAST16   "hX"
-
-#define PRIo32       "o"
-#define PRIu32       "u"
-#define PRIx32       "x"
-#define PRIX32       "X"
-#define PRIoLEAST32  "o"
-#define PRIuLEAST32  "u"
-#define PRIxLEAST32  "x"
-#define PRIXLEAST32  "X"
-#define PRIoFAST32   "o"
-#define PRIuFAST32   "u"
-#define PRIxFAST32   "x"
-#define PRIXFAST32   "X"
-
-#define PRIo64       __PRI64_PREFIX "o"
-#define PRIu64       __PRI64_PREFIX "u"
-#define PRIx64       __PRI64_PREFIX "x"
-#define PRIX64       __PRI64_PREFIX "X"
-#define PRIoLEAST64  __PRI64_PREFIX "o"
-#define PRIuLEAST64  __PRI64_PREFIX "u"
-#define PRIxLEAST64  __PRI64_PREFIX "x"
-#define PRIXLEAST64  __PRI64_PREFIX "X"
-#define PRIoFAST64   __PRI64_PREFIX "o"
-#define PRIuFAST64   __PRI64_PREFIX "u"
-#define PRIxFAST64   __PRI64_PREFIX "x"
-#define PRIXFAST64   __PRI64_PREFIX "X"
-
-#define PRIoMAX     __PRI64_PREFIX "o"
-#define PRIuMAX     __PRI64_PREFIX "u"
-#define PRIxMAX     __PRI64_PREFIX "x"
-#define PRIXMAX     __PRI64_PREFIX "X"
-
-#define PRIoPTR     __PRIPTR_PREFIX "o"
-#define PRIuPTR     __PRIPTR_PREFIX "u"
-#define PRIxPTR     __PRIPTR_PREFIX "x"
-#define PRIXPTR     __PRIPTR_PREFIX "X"
-
-// The fscanf macros for signed integers are:
-#define SCNd8       "d"
-#define SCNi8       "i"
-#define SCNdLEAST8  "d"
-#define SCNiLEAST8  "i"
-#define SCNdFAST8   "d"
-#define SCNiFAST8   "i"
-
-#define SCNd16       "hd"
-#define SCNi16       "hi"
-#define SCNdLEAST16  "hd"
-#define SCNiLEAST16  "hi"
-#define SCNdFAST16   "hd"
-#define SCNiFAST16   "hi"
-
-#define SCNd32       "ld"
-#define SCNi32       "li"
-#define SCNdLEAST32  "ld"
-#define SCNiLEAST32  "li"
-#define SCNdFAST32   "ld"
-#define SCNiFAST32   "li"
-
-#define SCNd64       "I64d"
-#define SCNi64       "I64i"
-#define SCNdLEAST64  "I64d"
-#define SCNiLEAST64  "I64i"
-#define SCNdFAST64   "I64d"
-#define SCNiFAST64   "I64i"
-
-#define SCNdMAX     "I64d"
-#define SCNiMAX     "I64i"
-
-#ifdef _WIN64 // [
-#  define SCNdPTR     "I64d"
-#  define SCNiPTR     "I64i"
-#else  // _WIN64 ][
-#  define SCNdPTR     "ld"
-#  define SCNiPTR     "li"
-#endif  // _WIN64 ]
-
-// The fscanf macros for unsigned integers are:
-#define SCNo8       "o"
-#define SCNu8       "u"
-#define SCNx8       "x"
-#define SCNX8       "X"
-#define SCNoLEAST8  "o"
-#define SCNuLEAST8  "u"
-#define SCNxLEAST8  "x"
-#define SCNXLEAST8  "X"
-#define SCNoFAST8   "o"
-#define SCNuFAST8   "u"
-#define SCNxFAST8   "x"
-#define SCNXFAST8   "X"
-
-#define SCNo16       "ho"
-#define SCNu16       "hu"
-#define SCNx16       "hx"
-#define SCNX16       "hX"
-#define SCNoLEAST16  "ho"
-#define SCNuLEAST16  "hu"
-#define SCNxLEAST16  "hx"
-#define SCNXLEAST16  "hX"
-#define SCNoFAST16   "ho"
-#define SCNuFAST16   "hu"
-#define SCNxFAST16   "hx"
-#define SCNXFAST16   "hX"
-
-#define SCNo32       "lo"
-#define SCNu32       "lu"
-#define SCNx32       "lx"
-#define SCNX32       "lX"
-#define SCNoLEAST32  "lo"
-#define SCNuLEAST32  "lu"
-#define SCNxLEAST32  "lx"
-#define SCNXLEAST32  "lX"
-#define SCNoFAST32   "lo"
-#define SCNuFAST32   "lu"
-#define SCNxFAST32   "lx"
-#define SCNXFAST32   "lX"
-
-#define SCNo64       "I64o"
-#define SCNu64       "I64u"
-#define SCNx64       "I64x"
-#define SCNX64       "I64X"
-#define SCNoLEAST64  "I64o"
-#define SCNuLEAST64  "I64u"
-#define SCNxLEAST64  "I64x"
-#define SCNXLEAST64  "I64X"
-#define SCNoFAST64   "I64o"
-#define SCNuFAST64   "I64u"
-#define SCNxFAST64   "I64x"
-#define SCNXFAST64   "I64X"
-
-#define SCNoMAX     "I64o"
-#define SCNuMAX     "I64u"
-#define SCNxMAX     "I64x"
-#define SCNXMAX     "I64X"
-
-#ifdef _WIN64 // [
-#  define SCNoPTR     "I64o"
-#  define SCNuPTR     "I64u"
-#  define SCNxPTR     "I64x"
-#  define SCNXPTR     "I64X"
-#else  // _WIN64 ][
-#  define SCNoPTR     "lo"
-#  define SCNuPTR     "lu"
-#  define SCNxPTR     "lx"
-#  define SCNXPTR     "lX"
-#endif  // _WIN64 ]
-
-#endif // __STDC_FORMAT_MACROS ]
-
-// 7.8.2 Functions for greatest-width integer types
-
-// 7.8.2.1 The imaxabs function
-#define imaxabs _abs64
-
-// 7.8.2.2 The imaxdiv function
-
-// This is modified version of div() function from Microsoft's div.c found
-// in %MSVC.NET%\crt\src\div.c
-#ifdef STATIC_IMAXDIV // [
-static
-#else // STATIC_IMAXDIV ][
-_inline
-#endif // STATIC_IMAXDIV ]
-imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
-{
-   imaxdiv_t result;
-
-   result.quot = numer / denom;
-   result.rem = numer % denom;
-
-   if (numer < 0 && result.rem > 0) {
-      // did division wrong; must fix up
-      ++result.quot;
-      result.rem -= denom;
-   }
-
-   return result;
-}
-
-// 7.8.2.3 The strtoimax and strtoumax functions
-#define strtoimax _strtoi64
-#define strtoumax _strtoui64
-
-// 7.8.2.4 The wcstoimax and wcstoumax functions
-#define wcstoimax _wcstoi64
-#define wcstoumax _wcstoui64
-
-
-#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/stdbool.h b/include/msvc_compat/stdbool.h
deleted file mode 100644
index da9ee8b..0000000
--- a/include/msvc_compat/stdbool.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef stdbool_h
-#define stdbool_h
-
-#include <wtypes.h>
-
-/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
-/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
-typedef BOOL _Bool;
-
-#define bool _Bool
-#define true 1
-#define false 0
-
-#define __bool_true_false_are_defined 1
-
-#endif /* stdbool_h */
diff --git a/include/msvc_compat/stdint.h b/include/msvc_compat/stdint.h
deleted file mode 100644
index d02608a..0000000
--- a/include/msvc_compat/stdint.h
+++ /dev/null
@@ -1,247 +0,0 @@
-// ISO C9x  compliant stdint.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006-2008 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_STDINT_H_ // [
-#define _MSC_STDINT_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include <limits.h>
-
-// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
-// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
-// or compiler give many errors like this:
-//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
-#ifdef __cplusplus
-extern "C" {
-#endif
-#  include <wchar.h>
-#ifdef __cplusplus
-}
-#endif
-
-// Define _W64 macros to mark types changing their size, like intptr_t.
-#ifndef _W64
-#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
-#     define _W64 __w64
-#  else
-#     define _W64
-#  endif
-#endif
-
-
-// 7.18.1 Integer types
-
-// 7.18.1.1 Exact-width integer types
-
-// Visual Studio 6 and Embedded Visual C++ 4 doesn't
-// realize that, e.g. char has the same size as __int8
-// so we give up on __intX for them.
-#if (_MSC_VER < 1300)
-   typedef signed char       int8_t;
-   typedef signed short      int16_t;
-   typedef signed int        int32_t;
-   typedef unsigned char     uint8_t;
-   typedef unsigned short    uint16_t;
-   typedef unsigned int      uint32_t;
-#else
-   typedef signed __int8     int8_t;
-   typedef signed __int16    int16_t;
-   typedef signed __int32    int32_t;
-   typedef unsigned __int8   uint8_t;
-   typedef unsigned __int16  uint16_t;
-   typedef unsigned __int32  uint32_t;
-#endif
-typedef signed __int64       int64_t;
-typedef unsigned __int64     uint64_t;
-
-
-// 7.18.1.2 Minimum-width integer types
-typedef int8_t    int_least8_t;
-typedef int16_t   int_least16_t;
-typedef int32_t   int_least32_t;
-typedef int64_t   int_least64_t;
-typedef uint8_t   uint_least8_t;
-typedef uint16_t  uint_least16_t;
-typedef uint32_t  uint_least32_t;
-typedef uint64_t  uint_least64_t;
-
-// 7.18.1.3 Fastest minimum-width integer types
-typedef int8_t    int_fast8_t;
-typedef int16_t   int_fast16_t;
-typedef int32_t   int_fast32_t;
-typedef int64_t   int_fast64_t;
-typedef uint8_t   uint_fast8_t;
-typedef uint16_t  uint_fast16_t;
-typedef uint32_t  uint_fast32_t;
-typedef uint64_t  uint_fast64_t;
-
-// 7.18.1.4 Integer types capable of holding object pointers
-#ifdef _WIN64 // [
-   typedef signed __int64    intptr_t;
-   typedef unsigned __int64  uintptr_t;
-#else // _WIN64 ][
-   typedef _W64 signed int   intptr_t;
-   typedef _W64 unsigned int uintptr_t;
-#endif // _WIN64 ]
-
-// 7.18.1.5 Greatest-width integer types
-typedef int64_t   intmax_t;
-typedef uint64_t  uintmax_t;
-
-
-// 7.18.2 Limits of specified-width integer types
-
-#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
-
-// 7.18.2.1 Limits of exact-width integer types
-#define INT8_MIN     ((int8_t)_I8_MIN)
-#define INT8_MAX     _I8_MAX
-#define INT16_MIN    ((int16_t)_I16_MIN)
-#define INT16_MAX    _I16_MAX
-#define INT32_MIN    ((int32_t)_I32_MIN)
-#define INT32_MAX    _I32_MAX
-#define INT64_MIN    ((int64_t)_I64_MIN)
-#define INT64_MAX    _I64_MAX
-#define UINT8_MAX    _UI8_MAX
-#define UINT16_MAX   _UI16_MAX
-#define UINT32_MAX   _UI32_MAX
-#define UINT64_MAX   _UI64_MAX
-
-// 7.18.2.2 Limits of minimum-width integer types
-#define INT_LEAST8_MIN    INT8_MIN
-#define INT_LEAST8_MAX    INT8_MAX
-#define INT_LEAST16_MIN   INT16_MIN
-#define INT_LEAST16_MAX   INT16_MAX
-#define INT_LEAST32_MIN   INT32_MIN
-#define INT_LEAST32_MAX   INT32_MAX
-#define INT_LEAST64_MIN   INT64_MIN
-#define INT_LEAST64_MAX   INT64_MAX
-#define UINT_LEAST8_MAX   UINT8_MAX
-#define UINT_LEAST16_MAX  UINT16_MAX
-#define UINT_LEAST32_MAX  UINT32_MAX
-#define UINT_LEAST64_MAX  UINT64_MAX
-
-// 7.18.2.3 Limits of fastest minimum-width integer types
-#define INT_FAST8_MIN    INT8_MIN
-#define INT_FAST8_MAX    INT8_MAX
-#define INT_FAST16_MIN   INT16_MIN
-#define INT_FAST16_MAX   INT16_MAX
-#define INT_FAST32_MIN   INT32_MIN
-#define INT_FAST32_MAX   INT32_MAX
-#define INT_FAST64_MIN   INT64_MIN
-#define INT_FAST64_MAX   INT64_MAX
-#define UINT_FAST8_MAX   UINT8_MAX
-#define UINT_FAST16_MAX  UINT16_MAX
-#define UINT_FAST32_MAX  UINT32_MAX
-#define UINT_FAST64_MAX  UINT64_MAX
-
-// 7.18.2.4 Limits of integer types capable of holding object pointers
-#ifdef _WIN64 // [
-#  define INTPTR_MIN   INT64_MIN
-#  define INTPTR_MAX   INT64_MAX
-#  define UINTPTR_MAX  UINT64_MAX
-#else // _WIN64 ][
-#  define INTPTR_MIN   INT32_MIN
-#  define INTPTR_MAX   INT32_MAX
-#  define UINTPTR_MAX  UINT32_MAX
-#endif // _WIN64 ]
-
-// 7.18.2.5 Limits of greatest-width integer types
-#define INTMAX_MIN   INT64_MIN
-#define INTMAX_MAX   INT64_MAX
-#define UINTMAX_MAX  UINT64_MAX
-
-// 7.18.3 Limits of other integer types
-
-#ifdef _WIN64 // [
-#  define PTRDIFF_MIN  _I64_MIN
-#  define PTRDIFF_MAX  _I64_MAX
-#else  // _WIN64 ][
-#  define PTRDIFF_MIN  _I32_MIN
-#  define PTRDIFF_MAX  _I32_MAX
-#endif  // _WIN64 ]
-
-#define SIG_ATOMIC_MIN  INT_MIN
-#define SIG_ATOMIC_MAX  INT_MAX
-
-#ifndef SIZE_MAX // [
-#  ifdef _WIN64 // [
-#     define SIZE_MAX  _UI64_MAX
-#  else // _WIN64 ][
-#     define SIZE_MAX  _UI32_MAX
-#  endif // _WIN64 ]
-#endif // SIZE_MAX ]
-
-// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
-#ifndef WCHAR_MIN // [
-#  define WCHAR_MIN  0
-#endif  // WCHAR_MIN ]
-#ifndef WCHAR_MAX // [
-#  define WCHAR_MAX  _UI16_MAX
-#endif  // WCHAR_MAX ]
-
-#define WINT_MIN  0
-#define WINT_MAX  _UI16_MAX
-
-#endif // __STDC_LIMIT_MACROS ]
-
-
-// 7.18.4 Limits of other integer types
-
-#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
-
-// 7.18.4.1 Macros for minimum-width integer constants
-
-#define INT8_C(val)  val##i8
-#define INT16_C(val) val##i16
-#define INT32_C(val) val##i32
-#define INT64_C(val) val##i64
-
-#define UINT8_C(val)  val##ui8
-#define UINT16_C(val) val##ui16
-#define UINT32_C(val) val##ui32
-#define UINT64_C(val) val##ui64
-
-// 7.18.4.2 Macros for greatest-width integer constants
-#define INTMAX_C   INT64_C
-#define UINTMAX_C  UINT64_C
-
-#endif // __STDC_CONSTANT_MACROS ]
-
-
-#endif // _MSC_STDINT_H_ ]
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Thu May 29 00:25:39 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:25:39 +0900
Subject: [PATCH] Don't use msvc_compat's C99 headers with MSVC versions
	that have (some) C99 support
In-Reply-To: <1401348041-8675-1-git-send-email-mh+jemalloc@glandium.org>
References: <1401348041-8675-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20140529072539.GA8948@glandium.org>

Sorry, that was the wrong patch. Fixed patch incoming.

On Thu, May 29, 2014 at 04:20:41PM +0900, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
>  configure.ac                       |   4 +
>  include/msvc_compat/C99/inttypes.h | 313 +++++++++++++++++++++++++++++++++++++
>  include/msvc_compat/C99/stdbool.h  |  16 ++
>  include/msvc_compat/C99/stdint.h   | 247 +++++++++++++++++++++++++++++
>  include/msvc_compat/inttypes.h     | 313 -------------------------------------
>  include/msvc_compat/stdbool.h      |  16 --
>  include/msvc_compat/stdint.h       | 247 -----------------------------
>  7 files changed, 580 insertions(+), 576 deletions(-)
>  create mode 100644 include/msvc_compat/C99/inttypes.h
>  create mode 100644 include/msvc_compat/C99/stdbool.h
>  create mode 100644 include/msvc_compat/C99/stdint.h
>  delete mode 100644 include/msvc_compat/inttypes.h
>  delete mode 100644 include/msvc_compat/stdbool.h
>  delete mode 100644 include/msvc_compat/stdint.h
> 
> diff --git a/configure.ac b/configure.ac
> index 58f6289..0d83ab9 100644
> --- a/configure.ac
> +++ b/configure.ac
> @@ -155,6 +155,10 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
>    AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ])
>  fi
>  
> +if test "x$je_cv_msvc" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "x"; then
> +  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
> +fi
> +
>  AC_CHECK_SIZEOF([void *])
>  if test "x${ac_cv_sizeof_void_p}" = "x8" ; then
>    LG_SIZEOF_PTR=3
> diff --git a/include/msvc_compat/C99/inttypes.h b/include/msvc_compat/C99/inttypes.h
> new file mode 100644
> index 0000000..a4e6b75
> --- /dev/null
> +++ b/include/msvc_compat/C99/inttypes.h
> @@ -0,0 +1,313 @@
> +// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
> +// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> +// 
> +//  Copyright (c) 2006 Alexander Chemeris
> +// 
> +// Redistribution and use in source and binary forms, with or without
> +// modification, are permitted provided that the following conditions are met:
> +// 
> +//   1. Redistributions of source code must retain the above copyright notice,
> +//      this list of conditions and the following disclaimer.
> +// 
> +//   2. Redistributions in binary form must reproduce the above copyright
> +//      notice, this list of conditions and the following disclaimer in the
> +//      documentation and/or other materials provided with the distribution.
> +// 
> +//   3. The name of the author may be used to endorse or promote products
> +//      derived from this software without specific prior written permission.
> +// 
> +// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> +// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> +// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> +// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> +// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> +// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> +// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> +// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> +// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> +// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> +// 
> +///////////////////////////////////////////////////////////////////////////////
> +
> +#ifndef _MSC_VER // [
> +#error "Use this header only with Microsoft Visual C++ compilers!"
> +#endif // _MSC_VER ]
> +
> +#ifndef _MSC_INTTYPES_H_ // [
> +#define _MSC_INTTYPES_H_
> +
> +#if _MSC_VER > 1000
> +#pragma once
> +#endif
> +
> +#include "stdint.h"
> +
> +// 7.8 Format conversion of integer types
> +
> +typedef struct {
> +   intmax_t quot;
> +   intmax_t rem;
> +} imaxdiv_t;
> +
> +// 7.8.1 Macros for format specifiers
> +
> +#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
> +
> +#ifdef _WIN64
> +#  define __PRI64_PREFIX        "l"
> +#  define __PRIPTR_PREFIX       "l"
> +#else
> +#  define __PRI64_PREFIX        "ll"
> +#  define __PRIPTR_PREFIX
> +#endif
> +
> +// The fprintf macros for signed integers are:
> +#define PRId8       "d"
> +#define PRIi8       "i"
> +#define PRIdLEAST8  "d"
> +#define PRIiLEAST8  "i"
> +#define PRIdFAST8   "d"
> +#define PRIiFAST8   "i"
> +
> +#define PRId16       "hd"
> +#define PRIi16       "hi"
> +#define PRIdLEAST16  "hd"
> +#define PRIiLEAST16  "hi"
> +#define PRIdFAST16   "hd"
> +#define PRIiFAST16   "hi"
> +
> +#define PRId32       "d"
> +#define PRIi32       "i"
> +#define PRIdLEAST32  "d"
> +#define PRIiLEAST32  "i"
> +#define PRIdFAST32   "d"
> +#define PRIiFAST32   "i"
> +
> +#define PRId64       __PRI64_PREFIX "d"
> +#define PRIi64       __PRI64_PREFIX "i"
> +#define PRIdLEAST64  __PRI64_PREFIX "d"
> +#define PRIiLEAST64  __PRI64_PREFIX "i"
> +#define PRIdFAST64   __PRI64_PREFIX "d"
> +#define PRIiFAST64   __PRI64_PREFIX "i"
> +
> +#define PRIdMAX     __PRI64_PREFIX "d"
> +#define PRIiMAX     __PRI64_PREFIX "i"
> +
> +#define PRIdPTR     __PRIPTR_PREFIX "d"
> +#define PRIiPTR     __PRIPTR_PREFIX "i"
> +
> +// The fprintf macros for unsigned integers are:
> +#define PRIo8       "o"
> +#define PRIu8       "u"
> +#define PRIx8       "x"
> +#define PRIX8       "X"
> +#define PRIoLEAST8  "o"
> +#define PRIuLEAST8  "u"
> +#define PRIxLEAST8  "x"
> +#define PRIXLEAST8  "X"
> +#define PRIoFAST8   "o"
> +#define PRIuFAST8   "u"
> +#define PRIxFAST8   "x"
> +#define PRIXFAST8   "X"
> +
> +#define PRIo16       "ho"
> +#define PRIu16       "hu"
> +#define PRIx16       "hx"
> +#define PRIX16       "hX"
> +#define PRIoLEAST16  "ho"
> +#define PRIuLEAST16  "hu"
> +#define PRIxLEAST16  "hx"
> +#define PRIXLEAST16  "hX"
> +#define PRIoFAST16   "ho"
> +#define PRIuFAST16   "hu"
> +#define PRIxFAST16   "hx"
> +#define PRIXFAST16   "hX"
> +
> +#define PRIo32       "o"
> +#define PRIu32       "u"
> +#define PRIx32       "x"
> +#define PRIX32       "X"
> +#define PRIoLEAST32  "o"
> +#define PRIuLEAST32  "u"
> +#define PRIxLEAST32  "x"
> +#define PRIXLEAST32  "X"
> +#define PRIoFAST32   "o"
> +#define PRIuFAST32   "u"
> +#define PRIxFAST32   "x"
> +#define PRIXFAST32   "X"
> +
> +#define PRIo64       __PRI64_PREFIX "o"
> +#define PRIu64       __PRI64_PREFIX "u"
> +#define PRIx64       __PRI64_PREFIX "x"
> +#define PRIX64       __PRI64_PREFIX "X"
> +#define PRIoLEAST64  __PRI64_PREFIX "o"
> +#define PRIuLEAST64  __PRI64_PREFIX "u"
> +#define PRIxLEAST64  __PRI64_PREFIX "x"
> +#define PRIXLEAST64  __PRI64_PREFIX "X"
> +#define PRIoFAST64   __PRI64_PREFIX "o"
> +#define PRIuFAST64   __PRI64_PREFIX "u"
> +#define PRIxFAST64   __PRI64_PREFIX "x"
> +#define PRIXFAST64   __PRI64_PREFIX "X"
> +
> +#define PRIoMAX     __PRI64_PREFIX "o"
> +#define PRIuMAX     __PRI64_PREFIX "u"
> +#define PRIxMAX     __PRI64_PREFIX "x"
> +#define PRIXMAX     __PRI64_PREFIX "X"
> +
> +#define PRIoPTR     __PRIPTR_PREFIX "o"
> +#define PRIuPTR     __PRIPTR_PREFIX "u"
> +#define PRIxPTR     __PRIPTR_PREFIX "x"
> +#define PRIXPTR     __PRIPTR_PREFIX "X"
> +
> +// The fscanf macros for signed integers are:
> +#define SCNd8       "d"
> +#define SCNi8       "i"
> +#define SCNdLEAST8  "d"
> +#define SCNiLEAST8  "i"
> +#define SCNdFAST8   "d"
> +#define SCNiFAST8   "i"
> +
> +#define SCNd16       "hd"
> +#define SCNi16       "hi"
> +#define SCNdLEAST16  "hd"
> +#define SCNiLEAST16  "hi"
> +#define SCNdFAST16   "hd"
> +#define SCNiFAST16   "hi"
> +
> +#define SCNd32       "ld"
> +#define SCNi32       "li"
> +#define SCNdLEAST32  "ld"
> +#define SCNiLEAST32  "li"
> +#define SCNdFAST32   "ld"
> +#define SCNiFAST32   "li"
> +
> +#define SCNd64       "I64d"
> +#define SCNi64       "I64i"
> +#define SCNdLEAST64  "I64d"
> +#define SCNiLEAST64  "I64i"
> +#define SCNdFAST64   "I64d"
> +#define SCNiFAST64   "I64i"
> +
> +#define SCNdMAX     "I64d"
> +#define SCNiMAX     "I64i"
> +
> +#ifdef _WIN64 // [
> +#  define SCNdPTR     "I64d"
> +#  define SCNiPTR     "I64i"
> +#else  // _WIN64 ][
> +#  define SCNdPTR     "ld"
> +#  define SCNiPTR     "li"
> +#endif  // _WIN64 ]
> +
> +// The fscanf macros for unsigned integers are:
> +#define SCNo8       "o"
> +#define SCNu8       "u"
> +#define SCNx8       "x"
> +#define SCNX8       "X"
> +#define SCNoLEAST8  "o"
> +#define SCNuLEAST8  "u"
> +#define SCNxLEAST8  "x"
> +#define SCNXLEAST8  "X"
> +#define SCNoFAST8   "o"
> +#define SCNuFAST8   "u"
> +#define SCNxFAST8   "x"
> +#define SCNXFAST8   "X"
> +
> +#define SCNo16       "ho"
> +#define SCNu16       "hu"
> +#define SCNx16       "hx"
> +#define SCNX16       "hX"
> +#define SCNoLEAST16  "ho"
> +#define SCNuLEAST16  "hu"
> +#define SCNxLEAST16  "hx"
> +#define SCNXLEAST16  "hX"
> +#define SCNoFAST16   "ho"
> +#define SCNuFAST16   "hu"
> +#define SCNxFAST16   "hx"
> +#define SCNXFAST16   "hX"
> +
> +#define SCNo32       "lo"
> +#define SCNu32       "lu"
> +#define SCNx32       "lx"
> +#define SCNX32       "lX"
> +#define SCNoLEAST32  "lo"
> +#define SCNuLEAST32  "lu"
> +#define SCNxLEAST32  "lx"
> +#define SCNXLEAST32  "lX"
> +#define SCNoFAST32   "lo"
> +#define SCNuFAST32   "lu"
> +#define SCNxFAST32   "lx"
> +#define SCNXFAST32   "lX"
> +
> +#define SCNo64       "I64o"
> +#define SCNu64       "I64u"
> +#define SCNx64       "I64x"
> +#define SCNX64       "I64X"
> +#define SCNoLEAST64  "I64o"
> +#define SCNuLEAST64  "I64u"
> +#define SCNxLEAST64  "I64x"
> +#define SCNXLEAST64  "I64X"
> +#define SCNoFAST64   "I64o"
> +#define SCNuFAST64   "I64u"
> +#define SCNxFAST64   "I64x"
> +#define SCNXFAST64   "I64X"
> +
> +#define SCNoMAX     "I64o"
> +#define SCNuMAX     "I64u"
> +#define SCNxMAX     "I64x"
> +#define SCNXMAX     "I64X"
> +
> +#ifdef _WIN64 // [
> +#  define SCNoPTR     "I64o"
> +#  define SCNuPTR     "I64u"
> +#  define SCNxPTR     "I64x"
> +#  define SCNXPTR     "I64X"
> +#else  // _WIN64 ][
> +#  define SCNoPTR     "lo"
> +#  define SCNuPTR     "lu"
> +#  define SCNxPTR     "lx"
> +#  define SCNXPTR     "lX"
> +#endif  // _WIN64 ]
> +
> +#endif // __STDC_FORMAT_MACROS ]
> +
> +// 7.8.2 Functions for greatest-width integer types
> +
> +// 7.8.2.1 The imaxabs function
> +#define imaxabs _abs64
> +
> +// 7.8.2.2 The imaxdiv function
> +
> +// This is modified version of div() function from Microsoft's div.c found
> +// in %MSVC.NET%\crt\src\div.c
> +#ifdef STATIC_IMAXDIV // [
> +static
> +#else // STATIC_IMAXDIV ][
> +_inline
> +#endif // STATIC_IMAXDIV ]
> +imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
> +{
> +   imaxdiv_t result;
> +
> +   result.quot = numer / denom;
> +   result.rem = numer % denom;
> +
> +   if (numer < 0 && result.rem > 0) {
> +      // did division wrong; must fix up
> +      ++result.quot;
> +      result.rem -= denom;
> +   }
> +
> +   return result;
> +}
> +
> +// 7.8.2.3 The strtoimax and strtoumax functions
> +#define strtoimax _strtoi64
> +#define strtoumax _strtoui64
> +
> +// 7.8.2.4 The wcstoimax and wcstoumax functions
> +#define wcstoimax _wcstoi64
> +#define wcstoumax _wcstoui64
> +
> +
> +#endif // _MSC_INTTYPES_H_ ]
> diff --git a/include/msvc_compat/C99/stdbool.h b/include/msvc_compat/C99/stdbool.h
> new file mode 100644
> index 0000000..da9ee8b
> --- /dev/null
> +++ b/include/msvc_compat/C99/stdbool.h
> @@ -0,0 +1,16 @@
> +#ifndef stdbool_h
> +#define stdbool_h
> +
> +#include <wtypes.h>
> +
> +/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
> +/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
> +typedef BOOL _Bool;
> +
> +#define bool _Bool
> +#define true 1
> +#define false 0
> +
> +#define __bool_true_false_are_defined 1
> +
> +#endif /* stdbool_h */
> diff --git a/include/msvc_compat/C99/stdint.h b/include/msvc_compat/C99/stdint.h
> new file mode 100644
> index 0000000..d02608a
> --- /dev/null
> +++ b/include/msvc_compat/C99/stdint.h
> @@ -0,0 +1,247 @@
> +// ISO C9x  compliant stdint.h for Microsoft Visual Studio
> +// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> +// 
> +//  Copyright (c) 2006-2008 Alexander Chemeris
> +// 
> +// Redistribution and use in source and binary forms, with or without
> +// modification, are permitted provided that the following conditions are met:
> +// 
> +//   1. Redistributions of source code must retain the above copyright notice,
> +//      this list of conditions and the following disclaimer.
> +// 
> +//   2. Redistributions in binary form must reproduce the above copyright
> +//      notice, this list of conditions and the following disclaimer in the
> +//      documentation and/or other materials provided with the distribution.
> +// 
> +//   3. The name of the author may be used to endorse or promote products
> +//      derived from this software without specific prior written permission.
> +// 
> +// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> +// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> +// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> +// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> +// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> +// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> +// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> +// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> +// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> +// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> +// 
> +///////////////////////////////////////////////////////////////////////////////
> +
> +#ifndef _MSC_VER // [
> +#error "Use this header only with Microsoft Visual C++ compilers!"
> +#endif // _MSC_VER ]
> +
> +#ifndef _MSC_STDINT_H_ // [
> +#define _MSC_STDINT_H_
> +
> +#if _MSC_VER > 1000
> +#pragma once
> +#endif
> +
> +#include <limits.h>
> +
> +// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
> +// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
> +// or compiler give many errors like this:
> +//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
> +#ifdef __cplusplus
> +extern "C" {
> +#endif
> +#  include <wchar.h>
> +#ifdef __cplusplus
> +}
> +#endif
> +
> +// Define _W64 macros to mark types changing their size, like intptr_t.
> +#ifndef _W64
> +#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
> +#     define _W64 __w64
> +#  else
> +#     define _W64
> +#  endif
> +#endif
> +
> +
> +// 7.18.1 Integer types
> +
> +// 7.18.1.1 Exact-width integer types
> +
> +// Visual Studio 6 and Embedded Visual C++ 4 doesn't
> +// realize that, e.g. char has the same size as __int8
> +// so we give up on __intX for them.
> +#if (_MSC_VER < 1300)
> +   typedef signed char       int8_t;
> +   typedef signed short      int16_t;
> +   typedef signed int        int32_t;
> +   typedef unsigned char     uint8_t;
> +   typedef unsigned short    uint16_t;
> +   typedef unsigned int      uint32_t;
> +#else
> +   typedef signed __int8     int8_t;
> +   typedef signed __int16    int16_t;
> +   typedef signed __int32    int32_t;
> +   typedef unsigned __int8   uint8_t;
> +   typedef unsigned __int16  uint16_t;
> +   typedef unsigned __int32  uint32_t;
> +#endif
> +typedef signed __int64       int64_t;
> +typedef unsigned __int64     uint64_t;
> +
> +
> +// 7.18.1.2 Minimum-width integer types
> +typedef int8_t    int_least8_t;
> +typedef int16_t   int_least16_t;
> +typedef int32_t   int_least32_t;
> +typedef int64_t   int_least64_t;
> +typedef uint8_t   uint_least8_t;
> +typedef uint16_t  uint_least16_t;
> +typedef uint32_t  uint_least32_t;
> +typedef uint64_t  uint_least64_t;
> +
> +// 7.18.1.3 Fastest minimum-width integer types
> +typedef int8_t    int_fast8_t;
> +typedef int16_t   int_fast16_t;
> +typedef int32_t   int_fast32_t;
> +typedef int64_t   int_fast64_t;
> +typedef uint8_t   uint_fast8_t;
> +typedef uint16_t  uint_fast16_t;
> +typedef uint32_t  uint_fast32_t;
> +typedef uint64_t  uint_fast64_t;
> +
> +// 7.18.1.4 Integer types capable of holding object pointers
> +#ifdef _WIN64 // [
> +   typedef signed __int64    intptr_t;
> +   typedef unsigned __int64  uintptr_t;
> +#else // _WIN64 ][
> +   typedef _W64 signed int   intptr_t;
> +   typedef _W64 unsigned int uintptr_t;
> +#endif // _WIN64 ]
> +
> +// 7.18.1.5 Greatest-width integer types
> +typedef int64_t   intmax_t;
> +typedef uint64_t  uintmax_t;
> +
> +
> +// 7.18.2 Limits of specified-width integer types
> +
> +#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
> +
> +// 7.18.2.1 Limits of exact-width integer types
> +#define INT8_MIN     ((int8_t)_I8_MIN)
> +#define INT8_MAX     _I8_MAX
> +#define INT16_MIN    ((int16_t)_I16_MIN)
> +#define INT16_MAX    _I16_MAX
> +#define INT32_MIN    ((int32_t)_I32_MIN)
> +#define INT32_MAX    _I32_MAX
> +#define INT64_MIN    ((int64_t)_I64_MIN)
> +#define INT64_MAX    _I64_MAX
> +#define UINT8_MAX    _UI8_MAX
> +#define UINT16_MAX   _UI16_MAX
> +#define UINT32_MAX   _UI32_MAX
> +#define UINT64_MAX   _UI64_MAX
> +
> +// 7.18.2.2 Limits of minimum-width integer types
> +#define INT_LEAST8_MIN    INT8_MIN
> +#define INT_LEAST8_MAX    INT8_MAX
> +#define INT_LEAST16_MIN   INT16_MIN
> +#define INT_LEAST16_MAX   INT16_MAX
> +#define INT_LEAST32_MIN   INT32_MIN
> +#define INT_LEAST32_MAX   INT32_MAX
> +#define INT_LEAST64_MIN   INT64_MIN
> +#define INT_LEAST64_MAX   INT64_MAX
> +#define UINT_LEAST8_MAX   UINT8_MAX
> +#define UINT_LEAST16_MAX  UINT16_MAX
> +#define UINT_LEAST32_MAX  UINT32_MAX
> +#define UINT_LEAST64_MAX  UINT64_MAX
> +
> +// 7.18.2.3 Limits of fastest minimum-width integer types
> +#define INT_FAST8_MIN    INT8_MIN
> +#define INT_FAST8_MAX    INT8_MAX
> +#define INT_FAST16_MIN   INT16_MIN
> +#define INT_FAST16_MAX   INT16_MAX
> +#define INT_FAST32_MIN   INT32_MIN
> +#define INT_FAST32_MAX   INT32_MAX
> +#define INT_FAST64_MIN   INT64_MIN
> +#define INT_FAST64_MAX   INT64_MAX
> +#define UINT_FAST8_MAX   UINT8_MAX
> +#define UINT_FAST16_MAX  UINT16_MAX
> +#define UINT_FAST32_MAX  UINT32_MAX
> +#define UINT_FAST64_MAX  UINT64_MAX
> +
> +// 7.18.2.4 Limits of integer types capable of holding object pointers
> +#ifdef _WIN64 // [
> +#  define INTPTR_MIN   INT64_MIN
> +#  define INTPTR_MAX   INT64_MAX
> +#  define UINTPTR_MAX  UINT64_MAX
> +#else // _WIN64 ][
> +#  define INTPTR_MIN   INT32_MIN
> +#  define INTPTR_MAX   INT32_MAX
> +#  define UINTPTR_MAX  UINT32_MAX
> +#endif // _WIN64 ]
> +
> +// 7.18.2.5 Limits of greatest-width integer types
> +#define INTMAX_MIN   INT64_MIN
> +#define INTMAX_MAX   INT64_MAX
> +#define UINTMAX_MAX  UINT64_MAX
> +
> +// 7.18.3 Limits of other integer types
> +
> +#ifdef _WIN64 // [
> +#  define PTRDIFF_MIN  _I64_MIN
> +#  define PTRDIFF_MAX  _I64_MAX
> +#else  // _WIN64 ][
> +#  define PTRDIFF_MIN  _I32_MIN
> +#  define PTRDIFF_MAX  _I32_MAX
> +#endif  // _WIN64 ]
> +
> +#define SIG_ATOMIC_MIN  INT_MIN
> +#define SIG_ATOMIC_MAX  INT_MAX
> +
> +#ifndef SIZE_MAX // [
> +#  ifdef _WIN64 // [
> +#     define SIZE_MAX  _UI64_MAX
> +#  else // _WIN64 ][
> +#     define SIZE_MAX  _UI32_MAX
> +#  endif // _WIN64 ]
> +#endif // SIZE_MAX ]
> +
> +// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
> +#ifndef WCHAR_MIN // [
> +#  define WCHAR_MIN  0
> +#endif  // WCHAR_MIN ]
> +#ifndef WCHAR_MAX // [
> +#  define WCHAR_MAX  _UI16_MAX
> +#endif  // WCHAR_MAX ]
> +
> +#define WINT_MIN  0
> +#define WINT_MAX  _UI16_MAX
> +
> +#endif // __STDC_LIMIT_MACROS ]
> +
> +
> +// 7.18.4 Limits of other integer types
> +
> +#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
> +
> +// 7.18.4.1 Macros for minimum-width integer constants
> +
> +#define INT8_C(val)  val##i8
> +#define INT16_C(val) val##i16
> +#define INT32_C(val) val##i32
> +#define INT64_C(val) val##i64
> +
> +#define UINT8_C(val)  val##ui8
> +#define UINT16_C(val) val##ui16
> +#define UINT32_C(val) val##ui32
> +#define UINT64_C(val) val##ui64
> +
> +// 7.18.4.2 Macros for greatest-width integer constants
> +#define INTMAX_C   INT64_C
> +#define UINTMAX_C  UINT64_C
> +
> +#endif // __STDC_CONSTANT_MACROS ]
> +
> +
> +#endif // _MSC_STDINT_H_ ]
> diff --git a/include/msvc_compat/inttypes.h b/include/msvc_compat/inttypes.h
> deleted file mode 100644
> index a4e6b75..0000000
> --- a/include/msvc_compat/inttypes.h
> +++ /dev/null
> @@ -1,313 +0,0 @@
> -// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
> -// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> -// 
> -//  Copyright (c) 2006 Alexander Chemeris
> -// 
> -// Redistribution and use in source and binary forms, with or without
> -// modification, are permitted provided that the following conditions are met:
> -// 
> -//   1. Redistributions of source code must retain the above copyright notice,
> -//      this list of conditions and the following disclaimer.
> -// 
> -//   2. Redistributions in binary form must reproduce the above copyright
> -//      notice, this list of conditions and the following disclaimer in the
> -//      documentation and/or other materials provided with the distribution.
> -// 
> -//   3. The name of the author may be used to endorse or promote products
> -//      derived from this software without specific prior written permission.
> -// 
> -// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> -// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> -// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> -// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> -// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> -// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> -// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> -// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> -// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> -// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> -// 
> -///////////////////////////////////////////////////////////////////////////////
> -
> -#ifndef _MSC_VER // [
> -#error "Use this header only with Microsoft Visual C++ compilers!"
> -#endif // _MSC_VER ]
> -
> -#ifndef _MSC_INTTYPES_H_ // [
> -#define _MSC_INTTYPES_H_
> -
> -#if _MSC_VER > 1000
> -#pragma once
> -#endif
> -
> -#include "stdint.h"
> -
> -// 7.8 Format conversion of integer types
> -
> -typedef struct {
> -   intmax_t quot;
> -   intmax_t rem;
> -} imaxdiv_t;
> -
> -// 7.8.1 Macros for format specifiers
> -
> -#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
> -
> -#ifdef _WIN64
> -#  define __PRI64_PREFIX        "l"
> -#  define __PRIPTR_PREFIX       "l"
> -#else
> -#  define __PRI64_PREFIX        "ll"
> -#  define __PRIPTR_PREFIX
> -#endif
> -
> -// The fprintf macros for signed integers are:
> -#define PRId8       "d"
> -#define PRIi8       "i"
> -#define PRIdLEAST8  "d"
> -#define PRIiLEAST8  "i"
> -#define PRIdFAST8   "d"
> -#define PRIiFAST8   "i"
> -
> -#define PRId16       "hd"
> -#define PRIi16       "hi"
> -#define PRIdLEAST16  "hd"
> -#define PRIiLEAST16  "hi"
> -#define PRIdFAST16   "hd"
> -#define PRIiFAST16   "hi"
> -
> -#define PRId32       "d"
> -#define PRIi32       "i"
> -#define PRIdLEAST32  "d"
> -#define PRIiLEAST32  "i"
> -#define PRIdFAST32   "d"
> -#define PRIiFAST32   "i"
> -
> -#define PRId64       __PRI64_PREFIX "d"
> -#define PRIi64       __PRI64_PREFIX "i"
> -#define PRIdLEAST64  __PRI64_PREFIX "d"
> -#define PRIiLEAST64  __PRI64_PREFIX "i"
> -#define PRIdFAST64   __PRI64_PREFIX "d"
> -#define PRIiFAST64   __PRI64_PREFIX "i"
> -
> -#define PRIdMAX     __PRI64_PREFIX "d"
> -#define PRIiMAX     __PRI64_PREFIX "i"
> -
> -#define PRIdPTR     __PRIPTR_PREFIX "d"
> -#define PRIiPTR     __PRIPTR_PREFIX "i"
> -
> -// The fprintf macros for unsigned integers are:
> -#define PRIo8       "o"
> -#define PRIu8       "u"
> -#define PRIx8       "x"
> -#define PRIX8       "X"
> -#define PRIoLEAST8  "o"
> -#define PRIuLEAST8  "u"
> -#define PRIxLEAST8  "x"
> -#define PRIXLEAST8  "X"
> -#define PRIoFAST8   "o"
> -#define PRIuFAST8   "u"
> -#define PRIxFAST8   "x"
> -#define PRIXFAST8   "X"
> -
> -#define PRIo16       "ho"
> -#define PRIu16       "hu"
> -#define PRIx16       "hx"
> -#define PRIX16       "hX"
> -#define PRIoLEAST16  "ho"
> -#define PRIuLEAST16  "hu"
> -#define PRIxLEAST16  "hx"
> -#define PRIXLEAST16  "hX"
> -#define PRIoFAST16   "ho"
> -#define PRIuFAST16   "hu"
> -#define PRIxFAST16   "hx"
> -#define PRIXFAST16   "hX"
> -
> -#define PRIo32       "o"
> -#define PRIu32       "u"
> -#define PRIx32       "x"
> -#define PRIX32       "X"
> -#define PRIoLEAST32  "o"
> -#define PRIuLEAST32  "u"
> -#define PRIxLEAST32  "x"
> -#define PRIXLEAST32  "X"
> -#define PRIoFAST32   "o"
> -#define PRIuFAST32   "u"
> -#define PRIxFAST32   "x"
> -#define PRIXFAST32   "X"
> -
> -#define PRIo64       __PRI64_PREFIX "o"
> -#define PRIu64       __PRI64_PREFIX "u"
> -#define PRIx64       __PRI64_PREFIX "x"
> -#define PRIX64       __PRI64_PREFIX "X"
> -#define PRIoLEAST64  __PRI64_PREFIX "o"
> -#define PRIuLEAST64  __PRI64_PREFIX "u"
> -#define PRIxLEAST64  __PRI64_PREFIX "x"
> -#define PRIXLEAST64  __PRI64_PREFIX "X"
> -#define PRIoFAST64   __PRI64_PREFIX "o"
> -#define PRIuFAST64   __PRI64_PREFIX "u"
> -#define PRIxFAST64   __PRI64_PREFIX "x"
> -#define PRIXFAST64   __PRI64_PREFIX "X"
> -
> -#define PRIoMAX     __PRI64_PREFIX "o"
> -#define PRIuMAX     __PRI64_PREFIX "u"
> -#define PRIxMAX     __PRI64_PREFIX "x"
> -#define PRIXMAX     __PRI64_PREFIX "X"
> -
> -#define PRIoPTR     __PRIPTR_PREFIX "o"
> -#define PRIuPTR     __PRIPTR_PREFIX "u"
> -#define PRIxPTR     __PRIPTR_PREFIX "x"
> -#define PRIXPTR     __PRIPTR_PREFIX "X"
> -
> -// The fscanf macros for signed integers are:
> -#define SCNd8       "d"
> -#define SCNi8       "i"
> -#define SCNdLEAST8  "d"
> -#define SCNiLEAST8  "i"
> -#define SCNdFAST8   "d"
> -#define SCNiFAST8   "i"
> -
> -#define SCNd16       "hd"
> -#define SCNi16       "hi"
> -#define SCNdLEAST16  "hd"
> -#define SCNiLEAST16  "hi"
> -#define SCNdFAST16   "hd"
> -#define SCNiFAST16   "hi"
> -
> -#define SCNd32       "ld"
> -#define SCNi32       "li"
> -#define SCNdLEAST32  "ld"
> -#define SCNiLEAST32  "li"
> -#define SCNdFAST32   "ld"
> -#define SCNiFAST32   "li"
> -
> -#define SCNd64       "I64d"
> -#define SCNi64       "I64i"
> -#define SCNdLEAST64  "I64d"
> -#define SCNiLEAST64  "I64i"
> -#define SCNdFAST64   "I64d"
> -#define SCNiFAST64   "I64i"
> -
> -#define SCNdMAX     "I64d"
> -#define SCNiMAX     "I64i"
> -
> -#ifdef _WIN64 // [
> -#  define SCNdPTR     "I64d"
> -#  define SCNiPTR     "I64i"
> -#else  // _WIN64 ][
> -#  define SCNdPTR     "ld"
> -#  define SCNiPTR     "li"
> -#endif  // _WIN64 ]
> -
> -// The fscanf macros for unsigned integers are:
> -#define SCNo8       "o"
> -#define SCNu8       "u"
> -#define SCNx8       "x"
> -#define SCNX8       "X"
> -#define SCNoLEAST8  "o"
> -#define SCNuLEAST8  "u"
> -#define SCNxLEAST8  "x"
> -#define SCNXLEAST8  "X"
> -#define SCNoFAST8   "o"
> -#define SCNuFAST8   "u"
> -#define SCNxFAST8   "x"
> -#define SCNXFAST8   "X"
> -
> -#define SCNo16       "ho"
> -#define SCNu16       "hu"
> -#define SCNx16       "hx"
> -#define SCNX16       "hX"
> -#define SCNoLEAST16  "ho"
> -#define SCNuLEAST16  "hu"
> -#define SCNxLEAST16  "hx"
> -#define SCNXLEAST16  "hX"
> -#define SCNoFAST16   "ho"
> -#define SCNuFAST16   "hu"
> -#define SCNxFAST16   "hx"
> -#define SCNXFAST16   "hX"
> -
> -#define SCNo32       "lo"
> -#define SCNu32       "lu"
> -#define SCNx32       "lx"
> -#define SCNX32       "lX"
> -#define SCNoLEAST32  "lo"
> -#define SCNuLEAST32  "lu"
> -#define SCNxLEAST32  "lx"
> -#define SCNXLEAST32  "lX"
> -#define SCNoFAST32   "lo"
> -#define SCNuFAST32   "lu"
> -#define SCNxFAST32   "lx"
> -#define SCNXFAST32   "lX"
> -
> -#define SCNo64       "I64o"
> -#define SCNu64       "I64u"
> -#define SCNx64       "I64x"
> -#define SCNX64       "I64X"
> -#define SCNoLEAST64  "I64o"
> -#define SCNuLEAST64  "I64u"
> -#define SCNxLEAST64  "I64x"
> -#define SCNXLEAST64  "I64X"
> -#define SCNoFAST64   "I64o"
> -#define SCNuFAST64   "I64u"
> -#define SCNxFAST64   "I64x"
> -#define SCNXFAST64   "I64X"
> -
> -#define SCNoMAX     "I64o"
> -#define SCNuMAX     "I64u"
> -#define SCNxMAX     "I64x"
> -#define SCNXMAX     "I64X"
> -
> -#ifdef _WIN64 // [
> -#  define SCNoPTR     "I64o"
> -#  define SCNuPTR     "I64u"
> -#  define SCNxPTR     "I64x"
> -#  define SCNXPTR     "I64X"
> -#else  // _WIN64 ][
> -#  define SCNoPTR     "lo"
> -#  define SCNuPTR     "lu"
> -#  define SCNxPTR     "lx"
> -#  define SCNXPTR     "lX"
> -#endif  // _WIN64 ]
> -
> -#endif // __STDC_FORMAT_MACROS ]
> -
> -// 7.8.2 Functions for greatest-width integer types
> -
> -// 7.8.2.1 The imaxabs function
> -#define imaxabs _abs64
> -
> -// 7.8.2.2 The imaxdiv function
> -
> -// This is modified version of div() function from Microsoft's div.c found
> -// in %MSVC.NET%\crt\src\div.c
> -#ifdef STATIC_IMAXDIV // [
> -static
> -#else // STATIC_IMAXDIV ][
> -_inline
> -#endif // STATIC_IMAXDIV ]
> -imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
> -{
> -   imaxdiv_t result;
> -
> -   result.quot = numer / denom;
> -   result.rem = numer % denom;
> -
> -   if (numer < 0 && result.rem > 0) {
> -      // did division wrong; must fix up
> -      ++result.quot;
> -      result.rem -= denom;
> -   }
> -
> -   return result;
> -}
> -
> -// 7.8.2.3 The strtoimax and strtoumax functions
> -#define strtoimax _strtoi64
> -#define strtoumax _strtoui64
> -
> -// 7.8.2.4 The wcstoimax and wcstoumax functions
> -#define wcstoimax _wcstoi64
> -#define wcstoumax _wcstoui64
> -
> -
> -#endif // _MSC_INTTYPES_H_ ]
> diff --git a/include/msvc_compat/stdbool.h b/include/msvc_compat/stdbool.h
> deleted file mode 100644
> index da9ee8b..0000000
> --- a/include/msvc_compat/stdbool.h
> +++ /dev/null
> @@ -1,16 +0,0 @@
> -#ifndef stdbool_h
> -#define stdbool_h
> -
> -#include <wtypes.h>
> -
> -/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
> -/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
> -typedef BOOL _Bool;
> -
> -#define bool _Bool
> -#define true 1
> -#define false 0
> -
> -#define __bool_true_false_are_defined 1
> -
> -#endif /* stdbool_h */
> diff --git a/include/msvc_compat/stdint.h b/include/msvc_compat/stdint.h
> deleted file mode 100644
> index d02608a..0000000
> --- a/include/msvc_compat/stdint.h
> +++ /dev/null
> @@ -1,247 +0,0 @@
> -// ISO C9x  compliant stdint.h for Microsoft Visual Studio
> -// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> -// 
> -//  Copyright (c) 2006-2008 Alexander Chemeris
> -// 
> -// Redistribution and use in source and binary forms, with or without
> -// modification, are permitted provided that the following conditions are met:
> -// 
> -//   1. Redistributions of source code must retain the above copyright notice,
> -//      this list of conditions and the following disclaimer.
> -// 
> -//   2. Redistributions in binary form must reproduce the above copyright
> -//      notice, this list of conditions and the following disclaimer in the
> -//      documentation and/or other materials provided with the distribution.
> -// 
> -//   3. The name of the author may be used to endorse or promote products
> -//      derived from this software without specific prior written permission.
> -// 
> -// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> -// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> -// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> -// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> -// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> -// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> -// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> -// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> -// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> -// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> -// 
> -///////////////////////////////////////////////////////////////////////////////
> -
> -#ifndef _MSC_VER // [
> -#error "Use this header only with Microsoft Visual C++ compilers!"
> -#endif // _MSC_VER ]
> -
> -#ifndef _MSC_STDINT_H_ // [
> -#define _MSC_STDINT_H_
> -
> -#if _MSC_VER > 1000
> -#pragma once
> -#endif
> -
> -#include <limits.h>
> -
> -// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
> -// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
> -// or compiler give many errors like this:
> -//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
> -#ifdef __cplusplus
> -extern "C" {
> -#endif
> -#  include <wchar.h>
> -#ifdef __cplusplus
> -}
> -#endif
> -
> -// Define _W64 macros to mark types changing their size, like intptr_t.
> -#ifndef _W64
> -#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
> -#     define _W64 __w64
> -#  else
> -#     define _W64
> -#  endif
> -#endif
> -
> -
> -// 7.18.1 Integer types
> -
> -// 7.18.1.1 Exact-width integer types
> -
> -// Visual Studio 6 and Embedded Visual C++ 4 doesn't
> -// realize that, e.g. char has the same size as __int8
> -// so we give up on __intX for them.
> -#if (_MSC_VER < 1300)
> -   typedef signed char       int8_t;
> -   typedef signed short      int16_t;
> -   typedef signed int        int32_t;
> -   typedef unsigned char     uint8_t;
> -   typedef unsigned short    uint16_t;
> -   typedef unsigned int      uint32_t;
> -#else
> -   typedef signed __int8     int8_t;
> -   typedef signed __int16    int16_t;
> -   typedef signed __int32    int32_t;
> -   typedef unsigned __int8   uint8_t;
> -   typedef unsigned __int16  uint16_t;
> -   typedef unsigned __int32  uint32_t;
> -#endif
> -typedef signed __int64       int64_t;
> -typedef unsigned __int64     uint64_t;
> -
> -
> -// 7.18.1.2 Minimum-width integer types
> -typedef int8_t    int_least8_t;
> -typedef int16_t   int_least16_t;
> -typedef int32_t   int_least32_t;
> -typedef int64_t   int_least64_t;
> -typedef uint8_t   uint_least8_t;
> -typedef uint16_t  uint_least16_t;
> -typedef uint32_t  uint_least32_t;
> -typedef uint64_t  uint_least64_t;
> -
> -// 7.18.1.3 Fastest minimum-width integer types
> -typedef int8_t    int_fast8_t;
> -typedef int16_t   int_fast16_t;
> -typedef int32_t   int_fast32_t;
> -typedef int64_t   int_fast64_t;
> -typedef uint8_t   uint_fast8_t;
> -typedef uint16_t  uint_fast16_t;
> -typedef uint32_t  uint_fast32_t;
> -typedef uint64_t  uint_fast64_t;
> -
> -// 7.18.1.4 Integer types capable of holding object pointers
> -#ifdef _WIN64 // [
> -   typedef signed __int64    intptr_t;
> -   typedef unsigned __int64  uintptr_t;
> -#else // _WIN64 ][
> -   typedef _W64 signed int   intptr_t;
> -   typedef _W64 unsigned int uintptr_t;
> -#endif // _WIN64 ]
> -
> -// 7.18.1.5 Greatest-width integer types
> -typedef int64_t   intmax_t;
> -typedef uint64_t  uintmax_t;
> -
> -
> -// 7.18.2 Limits of specified-width integer types
> -
> -#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
> -
> -// 7.18.2.1 Limits of exact-width integer types
> -#define INT8_MIN     ((int8_t)_I8_MIN)
> -#define INT8_MAX     _I8_MAX
> -#define INT16_MIN    ((int16_t)_I16_MIN)
> -#define INT16_MAX    _I16_MAX
> -#define INT32_MIN    ((int32_t)_I32_MIN)
> -#define INT32_MAX    _I32_MAX
> -#define INT64_MIN    ((int64_t)_I64_MIN)
> -#define INT64_MAX    _I64_MAX
> -#define UINT8_MAX    _UI8_MAX
> -#define UINT16_MAX   _UI16_MAX
> -#define UINT32_MAX   _UI32_MAX
> -#define UINT64_MAX   _UI64_MAX
> -
> -// 7.18.2.2 Limits of minimum-width integer types
> -#define INT_LEAST8_MIN    INT8_MIN
> -#define INT_LEAST8_MAX    INT8_MAX
> -#define INT_LEAST16_MIN   INT16_MIN
> -#define INT_LEAST16_MAX   INT16_MAX
> -#define INT_LEAST32_MIN   INT32_MIN
> -#define INT_LEAST32_MAX   INT32_MAX
> -#define INT_LEAST64_MIN   INT64_MIN
> -#define INT_LEAST64_MAX   INT64_MAX
> -#define UINT_LEAST8_MAX   UINT8_MAX
> -#define UINT_LEAST16_MAX  UINT16_MAX
> -#define UINT_LEAST32_MAX  UINT32_MAX
> -#define UINT_LEAST64_MAX  UINT64_MAX
> -
> -// 7.18.2.3 Limits of fastest minimum-width integer types
> -#define INT_FAST8_MIN    INT8_MIN
> -#define INT_FAST8_MAX    INT8_MAX
> -#define INT_FAST16_MIN   INT16_MIN
> -#define INT_FAST16_MAX   INT16_MAX
> -#define INT_FAST32_MIN   INT32_MIN
> -#define INT_FAST32_MAX   INT32_MAX
> -#define INT_FAST64_MIN   INT64_MIN
> -#define INT_FAST64_MAX   INT64_MAX
> -#define UINT_FAST8_MAX   UINT8_MAX
> -#define UINT_FAST16_MAX  UINT16_MAX
> -#define UINT_FAST32_MAX  UINT32_MAX
> -#define UINT_FAST64_MAX  UINT64_MAX
> -
> -// 7.18.2.4 Limits of integer types capable of holding object pointers
> -#ifdef _WIN64 // [
> -#  define INTPTR_MIN   INT64_MIN
> -#  define INTPTR_MAX   INT64_MAX
> -#  define UINTPTR_MAX  UINT64_MAX
> -#else // _WIN64 ][
> -#  define INTPTR_MIN   INT32_MIN
> -#  define INTPTR_MAX   INT32_MAX
> -#  define UINTPTR_MAX  UINT32_MAX
> -#endif // _WIN64 ]
> -
> -// 7.18.2.5 Limits of greatest-width integer types
> -#define INTMAX_MIN   INT64_MIN
> -#define INTMAX_MAX   INT64_MAX
> -#define UINTMAX_MAX  UINT64_MAX
> -
> -// 7.18.3 Limits of other integer types
> -
> -#ifdef _WIN64 // [
> -#  define PTRDIFF_MIN  _I64_MIN
> -#  define PTRDIFF_MAX  _I64_MAX
> -#else  // _WIN64 ][
> -#  define PTRDIFF_MIN  _I32_MIN
> -#  define PTRDIFF_MAX  _I32_MAX
> -#endif  // _WIN64 ]
> -
> -#define SIG_ATOMIC_MIN  INT_MIN
> -#define SIG_ATOMIC_MAX  INT_MAX
> -
> -#ifndef SIZE_MAX // [
> -#  ifdef _WIN64 // [
> -#     define SIZE_MAX  _UI64_MAX
> -#  else // _WIN64 ][
> -#     define SIZE_MAX  _UI32_MAX
> -#  endif // _WIN64 ]
> -#endif // SIZE_MAX ]
> -
> -// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
> -#ifndef WCHAR_MIN // [
> -#  define WCHAR_MIN  0
> -#endif  // WCHAR_MIN ]
> -#ifndef WCHAR_MAX // [
> -#  define WCHAR_MAX  _UI16_MAX
> -#endif  // WCHAR_MAX ]
> -
> -#define WINT_MIN  0
> -#define WINT_MAX  _UI16_MAX
> -
> -#endif // __STDC_LIMIT_MACROS ]
> -
> -
> -// 7.18.4 Limits of other integer types
> -
> -#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
> -
> -// 7.18.4.1 Macros for minimum-width integer constants
> -
> -#define INT8_C(val)  val##i8
> -#define INT16_C(val) val##i16
> -#define INT32_C(val) val##i32
> -#define INT64_C(val) val##i64
> -
> -#define UINT8_C(val)  val##ui8
> -#define UINT16_C(val) val##ui16
> -#define UINT32_C(val) val##ui32
> -#define UINT64_C(val) val##ui64
> -
> -// 7.18.4.2 Macros for greatest-width integer constants
> -#define INTMAX_C   INT64_C
> -#define UINTMAX_C  UINT64_C
> -
> -#endif // __STDC_CONSTANT_MACROS ]
> -
> -
> -#endif // _MSC_STDINT_H_ ]
> -- 
> 2.0.0.rc2
> 
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss

From mh+jemalloc at glandium.org  Thu May 29 00:25:54 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:25:54 +0900
Subject: [PATCH] Don't use msvc_compat's C99 headers with MSVC versions that
	have (some) C99 support
In-Reply-To: <20140529072539.GA8948@glandium.org>
References: <20140529072539.GA8948@glandium.org>
Message-ID: <1401348354-8985-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac                       |   4 +
 include/msvc_compat/C99/inttypes.h | 313 +++++++++++++++++++++++++++++++++++++
 include/msvc_compat/C99/stdbool.h  |  16 ++
 include/msvc_compat/C99/stdint.h   | 247 +++++++++++++++++++++++++++++
 include/msvc_compat/inttypes.h     | 313 -------------------------------------
 include/msvc_compat/stdbool.h      |  16 --
 include/msvc_compat/stdint.h       | 247 -----------------------------
 7 files changed, 580 insertions(+), 576 deletions(-)
 create mode 100644 include/msvc_compat/C99/inttypes.h
 create mode 100644 include/msvc_compat/C99/stdbool.h
 create mode 100644 include/msvc_compat/C99/stdint.h
 delete mode 100644 include/msvc_compat/inttypes.h
 delete mode 100644 include/msvc_compat/stdbool.h
 delete mode 100644 include/msvc_compat/stdint.h

diff --git a/configure.ac b/configure.ac
index 58f6289..e3c70b4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -155,6 +155,10 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
   AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ])
 fi
 
+if test "x${je_cv_msvc}" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "xno"; then
+  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
+fi
+
 AC_CHECK_SIZEOF([void *])
 if test "x${ac_cv_sizeof_void_p}" = "x8" ; then
   LG_SIZEOF_PTR=3
diff --git a/include/msvc_compat/C99/inttypes.h b/include/msvc_compat/C99/inttypes.h
new file mode 100644
index 0000000..a4e6b75
--- /dev/null
+++ b/include/msvc_compat/C99/inttypes.h
@@ -0,0 +1,313 @@
+// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_INTTYPES_H_ // [
+#define _MSC_INTTYPES_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include "stdint.h"
+
+// 7.8 Format conversion of integer types
+
+typedef struct {
+   intmax_t quot;
+   intmax_t rem;
+} imaxdiv_t;
+
+// 7.8.1 Macros for format specifiers
+
+#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
+
+#ifdef _WIN64
+#  define __PRI64_PREFIX        "l"
+#  define __PRIPTR_PREFIX       "l"
+#else
+#  define __PRI64_PREFIX        "ll"
+#  define __PRIPTR_PREFIX
+#endif
+
+// The fprintf macros for signed integers are:
+#define PRId8       "d"
+#define PRIi8       "i"
+#define PRIdLEAST8  "d"
+#define PRIiLEAST8  "i"
+#define PRIdFAST8   "d"
+#define PRIiFAST8   "i"
+
+#define PRId16       "hd"
+#define PRIi16       "hi"
+#define PRIdLEAST16  "hd"
+#define PRIiLEAST16  "hi"
+#define PRIdFAST16   "hd"
+#define PRIiFAST16   "hi"
+
+#define PRId32       "d"
+#define PRIi32       "i"
+#define PRIdLEAST32  "d"
+#define PRIiLEAST32  "i"
+#define PRIdFAST32   "d"
+#define PRIiFAST32   "i"
+
+#define PRId64       __PRI64_PREFIX "d"
+#define PRIi64       __PRI64_PREFIX "i"
+#define PRIdLEAST64  __PRI64_PREFIX "d"
+#define PRIiLEAST64  __PRI64_PREFIX "i"
+#define PRIdFAST64   __PRI64_PREFIX "d"
+#define PRIiFAST64   __PRI64_PREFIX "i"
+
+#define PRIdMAX     __PRI64_PREFIX "d"
+#define PRIiMAX     __PRI64_PREFIX "i"
+
+#define PRIdPTR     __PRIPTR_PREFIX "d"
+#define PRIiPTR     __PRIPTR_PREFIX "i"
+
+// The fprintf macros for unsigned integers are:
+#define PRIo8       "o"
+#define PRIu8       "u"
+#define PRIx8       "x"
+#define PRIX8       "X"
+#define PRIoLEAST8  "o"
+#define PRIuLEAST8  "u"
+#define PRIxLEAST8  "x"
+#define PRIXLEAST8  "X"
+#define PRIoFAST8   "o"
+#define PRIuFAST8   "u"
+#define PRIxFAST8   "x"
+#define PRIXFAST8   "X"
+
+#define PRIo16       "ho"
+#define PRIu16       "hu"
+#define PRIx16       "hx"
+#define PRIX16       "hX"
+#define PRIoLEAST16  "ho"
+#define PRIuLEAST16  "hu"
+#define PRIxLEAST16  "hx"
+#define PRIXLEAST16  "hX"
+#define PRIoFAST16   "ho"
+#define PRIuFAST16   "hu"
+#define PRIxFAST16   "hx"
+#define PRIXFAST16   "hX"
+
+#define PRIo32       "o"
+#define PRIu32       "u"
+#define PRIx32       "x"
+#define PRIX32       "X"
+#define PRIoLEAST32  "o"
+#define PRIuLEAST32  "u"
+#define PRIxLEAST32  "x"
+#define PRIXLEAST32  "X"
+#define PRIoFAST32   "o"
+#define PRIuFAST32   "u"
+#define PRIxFAST32   "x"
+#define PRIXFAST32   "X"
+
+#define PRIo64       __PRI64_PREFIX "o"
+#define PRIu64       __PRI64_PREFIX "u"
+#define PRIx64       __PRI64_PREFIX "x"
+#define PRIX64       __PRI64_PREFIX "X"
+#define PRIoLEAST64  __PRI64_PREFIX "o"
+#define PRIuLEAST64  __PRI64_PREFIX "u"
+#define PRIxLEAST64  __PRI64_PREFIX "x"
+#define PRIXLEAST64  __PRI64_PREFIX "X"
+#define PRIoFAST64   __PRI64_PREFIX "o"
+#define PRIuFAST64   __PRI64_PREFIX "u"
+#define PRIxFAST64   __PRI64_PREFIX "x"
+#define PRIXFAST64   __PRI64_PREFIX "X"
+
+#define PRIoMAX     __PRI64_PREFIX "o"
+#define PRIuMAX     __PRI64_PREFIX "u"
+#define PRIxMAX     __PRI64_PREFIX "x"
+#define PRIXMAX     __PRI64_PREFIX "X"
+
+#define PRIoPTR     __PRIPTR_PREFIX "o"
+#define PRIuPTR     __PRIPTR_PREFIX "u"
+#define PRIxPTR     __PRIPTR_PREFIX "x"
+#define PRIXPTR     __PRIPTR_PREFIX "X"
+
+// The fscanf macros for signed integers are:
+#define SCNd8       "d"
+#define SCNi8       "i"
+#define SCNdLEAST8  "d"
+#define SCNiLEAST8  "i"
+#define SCNdFAST8   "d"
+#define SCNiFAST8   "i"
+
+#define SCNd16       "hd"
+#define SCNi16       "hi"
+#define SCNdLEAST16  "hd"
+#define SCNiLEAST16  "hi"
+#define SCNdFAST16   "hd"
+#define SCNiFAST16   "hi"
+
+#define SCNd32       "ld"
+#define SCNi32       "li"
+#define SCNdLEAST32  "ld"
+#define SCNiLEAST32  "li"
+#define SCNdFAST32   "ld"
+#define SCNiFAST32   "li"
+
+#define SCNd64       "I64d"
+#define SCNi64       "I64i"
+#define SCNdLEAST64  "I64d"
+#define SCNiLEAST64  "I64i"
+#define SCNdFAST64   "I64d"
+#define SCNiFAST64   "I64i"
+
+#define SCNdMAX     "I64d"
+#define SCNiMAX     "I64i"
+
+#ifdef _WIN64 // [
+#  define SCNdPTR     "I64d"
+#  define SCNiPTR     "I64i"
+#else  // _WIN64 ][
+#  define SCNdPTR     "ld"
+#  define SCNiPTR     "li"
+#endif  // _WIN64 ]
+
+// The fscanf macros for unsigned integers are:
+#define SCNo8       "o"
+#define SCNu8       "u"
+#define SCNx8       "x"
+#define SCNX8       "X"
+#define SCNoLEAST8  "o"
+#define SCNuLEAST8  "u"
+#define SCNxLEAST8  "x"
+#define SCNXLEAST8  "X"
+#define SCNoFAST8   "o"
+#define SCNuFAST8   "u"
+#define SCNxFAST8   "x"
+#define SCNXFAST8   "X"
+
+#define SCNo16       "ho"
+#define SCNu16       "hu"
+#define SCNx16       "hx"
+#define SCNX16       "hX"
+#define SCNoLEAST16  "ho"
+#define SCNuLEAST16  "hu"
+#define SCNxLEAST16  "hx"
+#define SCNXLEAST16  "hX"
+#define SCNoFAST16   "ho"
+#define SCNuFAST16   "hu"
+#define SCNxFAST16   "hx"
+#define SCNXFAST16   "hX"
+
+#define SCNo32       "lo"
+#define SCNu32       "lu"
+#define SCNx32       "lx"
+#define SCNX32       "lX"
+#define SCNoLEAST32  "lo"
+#define SCNuLEAST32  "lu"
+#define SCNxLEAST32  "lx"
+#define SCNXLEAST32  "lX"
+#define SCNoFAST32   "lo"
+#define SCNuFAST32   "lu"
+#define SCNxFAST32   "lx"
+#define SCNXFAST32   "lX"
+
+#define SCNo64       "I64o"
+#define SCNu64       "I64u"
+#define SCNx64       "I64x"
+#define SCNX64       "I64X"
+#define SCNoLEAST64  "I64o"
+#define SCNuLEAST64  "I64u"
+#define SCNxLEAST64  "I64x"
+#define SCNXLEAST64  "I64X"
+#define SCNoFAST64   "I64o"
+#define SCNuFAST64   "I64u"
+#define SCNxFAST64   "I64x"
+#define SCNXFAST64   "I64X"
+
+#define SCNoMAX     "I64o"
+#define SCNuMAX     "I64u"
+#define SCNxMAX     "I64x"
+#define SCNXMAX     "I64X"
+
+#ifdef _WIN64 // [
+#  define SCNoPTR     "I64o"
+#  define SCNuPTR     "I64u"
+#  define SCNxPTR     "I64x"
+#  define SCNXPTR     "I64X"
+#else  // _WIN64 ][
+#  define SCNoPTR     "lo"
+#  define SCNuPTR     "lu"
+#  define SCNxPTR     "lx"
+#  define SCNXPTR     "lX"
+#endif  // _WIN64 ]
+
+#endif // __STDC_FORMAT_MACROS ]
+
+// 7.8.2 Functions for greatest-width integer types
+
+// 7.8.2.1 The imaxabs function
+#define imaxabs _abs64
+
+// 7.8.2.2 The imaxdiv function
+
+// This is modified version of div() function from Microsoft's div.c found
+// in %MSVC.NET%\crt\src\div.c
+#ifdef STATIC_IMAXDIV // [
+static
+#else // STATIC_IMAXDIV ][
+_inline
+#endif // STATIC_IMAXDIV ]
+imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
+{
+   imaxdiv_t result;
+
+   result.quot = numer / denom;
+   result.rem = numer % denom;
+
+   if (numer < 0 && result.rem > 0) {
+      // did division wrong; must fix up
+      ++result.quot;
+      result.rem -= denom;
+   }
+
+   return result;
+}
+
+// 7.8.2.3 The strtoimax and strtoumax functions
+#define strtoimax _strtoi64
+#define strtoumax _strtoui64
+
+// 7.8.2.4 The wcstoimax and wcstoumax functions
+#define wcstoimax _wcstoi64
+#define wcstoumax _wcstoui64
+
+
+#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/C99/stdbool.h b/include/msvc_compat/C99/stdbool.h
new file mode 100644
index 0000000..da9ee8b
--- /dev/null
+++ b/include/msvc_compat/C99/stdbool.h
@@ -0,0 +1,16 @@
+#ifndef stdbool_h
+#define stdbool_h
+
+#include <wtypes.h>
+
+/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
+/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
+typedef BOOL _Bool;
+
+#define bool _Bool
+#define true 1
+#define false 0
+
+#define __bool_true_false_are_defined 1
+
+#endif /* stdbool_h */
diff --git a/include/msvc_compat/C99/stdint.h b/include/msvc_compat/C99/stdint.h
new file mode 100644
index 0000000..d02608a
--- /dev/null
+++ b/include/msvc_compat/C99/stdint.h
@@ -0,0 +1,247 @@
+// ISO C9x  compliant stdint.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006-2008 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_STDINT_H_ // [
+#define _MSC_STDINT_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <limits.h>
+
+// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
+// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
+// or compiler give many errors like this:
+//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
+#ifdef __cplusplus
+extern "C" {
+#endif
+#  include <wchar.h>
+#ifdef __cplusplus
+}
+#endif
+
+// Define _W64 macros to mark types changing their size, like intptr_t.
+#ifndef _W64
+#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
+#     define _W64 __w64
+#  else
+#     define _W64
+#  endif
+#endif
+
+
+// 7.18.1 Integer types
+
+// 7.18.1.1 Exact-width integer types
+
+// Visual Studio 6 and Embedded Visual C++ 4 doesn't
+// realize that, e.g. char has the same size as __int8
+// so we give up on __intX for them.
+#if (_MSC_VER < 1300)
+   typedef signed char       int8_t;
+   typedef signed short      int16_t;
+   typedef signed int        int32_t;
+   typedef unsigned char     uint8_t;
+   typedef unsigned short    uint16_t;
+   typedef unsigned int      uint32_t;
+#else
+   typedef signed __int8     int8_t;
+   typedef signed __int16    int16_t;
+   typedef signed __int32    int32_t;
+   typedef unsigned __int8   uint8_t;
+   typedef unsigned __int16  uint16_t;
+   typedef unsigned __int32  uint32_t;
+#endif
+typedef signed __int64       int64_t;
+typedef unsigned __int64     uint64_t;
+
+
+// 7.18.1.2 Minimum-width integer types
+typedef int8_t    int_least8_t;
+typedef int16_t   int_least16_t;
+typedef int32_t   int_least32_t;
+typedef int64_t   int_least64_t;
+typedef uint8_t   uint_least8_t;
+typedef uint16_t  uint_least16_t;
+typedef uint32_t  uint_least32_t;
+typedef uint64_t  uint_least64_t;
+
+// 7.18.1.3 Fastest minimum-width integer types
+typedef int8_t    int_fast8_t;
+typedef int16_t   int_fast16_t;
+typedef int32_t   int_fast32_t;
+typedef int64_t   int_fast64_t;
+typedef uint8_t   uint_fast8_t;
+typedef uint16_t  uint_fast16_t;
+typedef uint32_t  uint_fast32_t;
+typedef uint64_t  uint_fast64_t;
+
+// 7.18.1.4 Integer types capable of holding object pointers
+#ifdef _WIN64 // [
+   typedef signed __int64    intptr_t;
+   typedef unsigned __int64  uintptr_t;
+#else // _WIN64 ][
+   typedef _W64 signed int   intptr_t;
+   typedef _W64 unsigned int uintptr_t;
+#endif // _WIN64 ]
+
+// 7.18.1.5 Greatest-width integer types
+typedef int64_t   intmax_t;
+typedef uint64_t  uintmax_t;
+
+
+// 7.18.2 Limits of specified-width integer types
+
+#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
+
+// 7.18.2.1 Limits of exact-width integer types
+#define INT8_MIN     ((int8_t)_I8_MIN)
+#define INT8_MAX     _I8_MAX
+#define INT16_MIN    ((int16_t)_I16_MIN)
+#define INT16_MAX    _I16_MAX
+#define INT32_MIN    ((int32_t)_I32_MIN)
+#define INT32_MAX    _I32_MAX
+#define INT64_MIN    ((int64_t)_I64_MIN)
+#define INT64_MAX    _I64_MAX
+#define UINT8_MAX    _UI8_MAX
+#define UINT16_MAX   _UI16_MAX
+#define UINT32_MAX   _UI32_MAX
+#define UINT64_MAX   _UI64_MAX
+
+// 7.18.2.2 Limits of minimum-width integer types
+#define INT_LEAST8_MIN    INT8_MIN
+#define INT_LEAST8_MAX    INT8_MAX
+#define INT_LEAST16_MIN   INT16_MIN
+#define INT_LEAST16_MAX   INT16_MAX
+#define INT_LEAST32_MIN   INT32_MIN
+#define INT_LEAST32_MAX   INT32_MAX
+#define INT_LEAST64_MIN   INT64_MIN
+#define INT_LEAST64_MAX   INT64_MAX
+#define UINT_LEAST8_MAX   UINT8_MAX
+#define UINT_LEAST16_MAX  UINT16_MAX
+#define UINT_LEAST32_MAX  UINT32_MAX
+#define UINT_LEAST64_MAX  UINT64_MAX
+
+// 7.18.2.3 Limits of fastest minimum-width integer types
+#define INT_FAST8_MIN    INT8_MIN
+#define INT_FAST8_MAX    INT8_MAX
+#define INT_FAST16_MIN   INT16_MIN
+#define INT_FAST16_MAX   INT16_MAX
+#define INT_FAST32_MIN   INT32_MIN
+#define INT_FAST32_MAX   INT32_MAX
+#define INT_FAST64_MIN   INT64_MIN
+#define INT_FAST64_MAX   INT64_MAX
+#define UINT_FAST8_MAX   UINT8_MAX
+#define UINT_FAST16_MAX  UINT16_MAX
+#define UINT_FAST32_MAX  UINT32_MAX
+#define UINT_FAST64_MAX  UINT64_MAX
+
+// 7.18.2.4 Limits of integer types capable of holding object pointers
+#ifdef _WIN64 // [
+#  define INTPTR_MIN   INT64_MIN
+#  define INTPTR_MAX   INT64_MAX
+#  define UINTPTR_MAX  UINT64_MAX
+#else // _WIN64 ][
+#  define INTPTR_MIN   INT32_MIN
+#  define INTPTR_MAX   INT32_MAX
+#  define UINTPTR_MAX  UINT32_MAX
+#endif // _WIN64 ]
+
+// 7.18.2.5 Limits of greatest-width integer types
+#define INTMAX_MIN   INT64_MIN
+#define INTMAX_MAX   INT64_MAX
+#define UINTMAX_MAX  UINT64_MAX
+
+// 7.18.3 Limits of other integer types
+
+#ifdef _WIN64 // [
+#  define PTRDIFF_MIN  _I64_MIN
+#  define PTRDIFF_MAX  _I64_MAX
+#else  // _WIN64 ][
+#  define PTRDIFF_MIN  _I32_MIN
+#  define PTRDIFF_MAX  _I32_MAX
+#endif  // _WIN64 ]
+
+#define SIG_ATOMIC_MIN  INT_MIN
+#define SIG_ATOMIC_MAX  INT_MAX
+
+#ifndef SIZE_MAX // [
+#  ifdef _WIN64 // [
+#     define SIZE_MAX  _UI64_MAX
+#  else // _WIN64 ][
+#     define SIZE_MAX  _UI32_MAX
+#  endif // _WIN64 ]
+#endif // SIZE_MAX ]
+
+// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
+#ifndef WCHAR_MIN // [
+#  define WCHAR_MIN  0
+#endif  // WCHAR_MIN ]
+#ifndef WCHAR_MAX // [
+#  define WCHAR_MAX  _UI16_MAX
+#endif  // WCHAR_MAX ]
+
+#define WINT_MIN  0
+#define WINT_MAX  _UI16_MAX
+
+#endif // __STDC_LIMIT_MACROS ]
+
+
+// 7.18.4 Limits of other integer types
+
+#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
+
+// 7.18.4.1 Macros for minimum-width integer constants
+
+#define INT8_C(val)  val##i8
+#define INT16_C(val) val##i16
+#define INT32_C(val) val##i32
+#define INT64_C(val) val##i64
+
+#define UINT8_C(val)  val##ui8
+#define UINT16_C(val) val##ui16
+#define UINT32_C(val) val##ui32
+#define UINT64_C(val) val##ui64
+
+// 7.18.4.2 Macros for greatest-width integer constants
+#define INTMAX_C   INT64_C
+#define UINTMAX_C  UINT64_C
+
+#endif // __STDC_CONSTANT_MACROS ]
+
+
+#endif // _MSC_STDINT_H_ ]
diff --git a/include/msvc_compat/inttypes.h b/include/msvc_compat/inttypes.h
deleted file mode 100644
index a4e6b75..0000000
--- a/include/msvc_compat/inttypes.h
+++ /dev/null
@@ -1,313 +0,0 @@
-// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_INTTYPES_H_ // [
-#define _MSC_INTTYPES_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include "stdint.h"
-
-// 7.8 Format conversion of integer types
-
-typedef struct {
-   intmax_t quot;
-   intmax_t rem;
-} imaxdiv_t;
-
-// 7.8.1 Macros for format specifiers
-
-#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
-
-#ifdef _WIN64
-#  define __PRI64_PREFIX        "l"
-#  define __PRIPTR_PREFIX       "l"
-#else
-#  define __PRI64_PREFIX        "ll"
-#  define __PRIPTR_PREFIX
-#endif
-
-// The fprintf macros for signed integers are:
-#define PRId8       "d"
-#define PRIi8       "i"
-#define PRIdLEAST8  "d"
-#define PRIiLEAST8  "i"
-#define PRIdFAST8   "d"
-#define PRIiFAST8   "i"
-
-#define PRId16       "hd"
-#define PRIi16       "hi"
-#define PRIdLEAST16  "hd"
-#define PRIiLEAST16  "hi"
-#define PRIdFAST16   "hd"
-#define PRIiFAST16   "hi"
-
-#define PRId32       "d"
-#define PRIi32       "i"
-#define PRIdLEAST32  "d"
-#define PRIiLEAST32  "i"
-#define PRIdFAST32   "d"
-#define PRIiFAST32   "i"
-
-#define PRId64       __PRI64_PREFIX "d"
-#define PRIi64       __PRI64_PREFIX "i"
-#define PRIdLEAST64  __PRI64_PREFIX "d"
-#define PRIiLEAST64  __PRI64_PREFIX "i"
-#define PRIdFAST64   __PRI64_PREFIX "d"
-#define PRIiFAST64   __PRI64_PREFIX "i"
-
-#define PRIdMAX     __PRI64_PREFIX "d"
-#define PRIiMAX     __PRI64_PREFIX "i"
-
-#define PRIdPTR     __PRIPTR_PREFIX "d"
-#define PRIiPTR     __PRIPTR_PREFIX "i"
-
-// The fprintf macros for unsigned integers are:
-#define PRIo8       "o"
-#define PRIu8       "u"
-#define PRIx8       "x"
-#define PRIX8       "X"
-#define PRIoLEAST8  "o"
-#define PRIuLEAST8  "u"
-#define PRIxLEAST8  "x"
-#define PRIXLEAST8  "X"
-#define PRIoFAST8   "o"
-#define PRIuFAST8   "u"
-#define PRIxFAST8   "x"
-#define PRIXFAST8   "X"
-
-#define PRIo16       "ho"
-#define PRIu16       "hu"
-#define PRIx16       "hx"
-#define PRIX16       "hX"
-#define PRIoLEAST16  "ho"
-#define PRIuLEAST16  "hu"
-#define PRIxLEAST16  "hx"
-#define PRIXLEAST16  "hX"
-#define PRIoFAST16   "ho"
-#define PRIuFAST16   "hu"
-#define PRIxFAST16   "hx"
-#define PRIXFAST16   "hX"
-
-#define PRIo32       "o"
-#define PRIu32       "u"
-#define PRIx32       "x"
-#define PRIX32       "X"
-#define PRIoLEAST32  "o"
-#define PRIuLEAST32  "u"
-#define PRIxLEAST32  "x"
-#define PRIXLEAST32  "X"
-#define PRIoFAST32   "o"
-#define PRIuFAST32   "u"
-#define PRIxFAST32   "x"
-#define PRIXFAST32   "X"
-
-#define PRIo64       __PRI64_PREFIX "o"
-#define PRIu64       __PRI64_PREFIX "u"
-#define PRIx64       __PRI64_PREFIX "x"
-#define PRIX64       __PRI64_PREFIX "X"
-#define PRIoLEAST64  __PRI64_PREFIX "o"
-#define PRIuLEAST64  __PRI64_PREFIX "u"
-#define PRIxLEAST64  __PRI64_PREFIX "x"
-#define PRIXLEAST64  __PRI64_PREFIX "X"
-#define PRIoFAST64   __PRI64_PREFIX "o"
-#define PRIuFAST64   __PRI64_PREFIX "u"
-#define PRIxFAST64   __PRI64_PREFIX "x"
-#define PRIXFAST64   __PRI64_PREFIX "X"
-
-#define PRIoMAX     __PRI64_PREFIX "o"
-#define PRIuMAX     __PRI64_PREFIX "u"
-#define PRIxMAX     __PRI64_PREFIX "x"
-#define PRIXMAX     __PRI64_PREFIX "X"
-
-#define PRIoPTR     __PRIPTR_PREFIX "o"
-#define PRIuPTR     __PRIPTR_PREFIX "u"
-#define PRIxPTR     __PRIPTR_PREFIX "x"
-#define PRIXPTR     __PRIPTR_PREFIX "X"
-
-// The fscanf macros for signed integers are:
-#define SCNd8       "d"
-#define SCNi8       "i"
-#define SCNdLEAST8  "d"
-#define SCNiLEAST8  "i"
-#define SCNdFAST8   "d"
-#define SCNiFAST8   "i"
-
-#define SCNd16       "hd"
-#define SCNi16       "hi"
-#define SCNdLEAST16  "hd"
-#define SCNiLEAST16  "hi"
-#define SCNdFAST16   "hd"
-#define SCNiFAST16   "hi"
-
-#define SCNd32       "ld"
-#define SCNi32       "li"
-#define SCNdLEAST32  "ld"
-#define SCNiLEAST32  "li"
-#define SCNdFAST32   "ld"
-#define SCNiFAST32   "li"
-
-#define SCNd64       "I64d"
-#define SCNi64       "I64i"
-#define SCNdLEAST64  "I64d"
-#define SCNiLEAST64  "I64i"
-#define SCNdFAST64   "I64d"
-#define SCNiFAST64   "I64i"
-
-#define SCNdMAX     "I64d"
-#define SCNiMAX     "I64i"
-
-#ifdef _WIN64 // [
-#  define SCNdPTR     "I64d"
-#  define SCNiPTR     "I64i"
-#else  // _WIN64 ][
-#  define SCNdPTR     "ld"
-#  define SCNiPTR     "li"
-#endif  // _WIN64 ]
-
-// The fscanf macros for unsigned integers are:
-#define SCNo8       "o"
-#define SCNu8       "u"
-#define SCNx8       "x"
-#define SCNX8       "X"
-#define SCNoLEAST8  "o"
-#define SCNuLEAST8  "u"
-#define SCNxLEAST8  "x"
-#define SCNXLEAST8  "X"
-#define SCNoFAST8   "o"
-#define SCNuFAST8   "u"
-#define SCNxFAST8   "x"
-#define SCNXFAST8   "X"
-
-#define SCNo16       "ho"
-#define SCNu16       "hu"
-#define SCNx16       "hx"
-#define SCNX16       "hX"
-#define SCNoLEAST16  "ho"
-#define SCNuLEAST16  "hu"
-#define SCNxLEAST16  "hx"
-#define SCNXLEAST16  "hX"
-#define SCNoFAST16   "ho"
-#define SCNuFAST16   "hu"
-#define SCNxFAST16   "hx"
-#define SCNXFAST16   "hX"
-
-#define SCNo32       "lo"
-#define SCNu32       "lu"
-#define SCNx32       "lx"
-#define SCNX32       "lX"
-#define SCNoLEAST32  "lo"
-#define SCNuLEAST32  "lu"
-#define SCNxLEAST32  "lx"
-#define SCNXLEAST32  "lX"
-#define SCNoFAST32   "lo"
-#define SCNuFAST32   "lu"
-#define SCNxFAST32   "lx"
-#define SCNXFAST32   "lX"
-
-#define SCNo64       "I64o"
-#define SCNu64       "I64u"
-#define SCNx64       "I64x"
-#define SCNX64       "I64X"
-#define SCNoLEAST64  "I64o"
-#define SCNuLEAST64  "I64u"
-#define SCNxLEAST64  "I64x"
-#define SCNXLEAST64  "I64X"
-#define SCNoFAST64   "I64o"
-#define SCNuFAST64   "I64u"
-#define SCNxFAST64   "I64x"
-#define SCNXFAST64   "I64X"
-
-#define SCNoMAX     "I64o"
-#define SCNuMAX     "I64u"
-#define SCNxMAX     "I64x"
-#define SCNXMAX     "I64X"
-
-#ifdef _WIN64 // [
-#  define SCNoPTR     "I64o"
-#  define SCNuPTR     "I64u"
-#  define SCNxPTR     "I64x"
-#  define SCNXPTR     "I64X"
-#else  // _WIN64 ][
-#  define SCNoPTR     "lo"
-#  define SCNuPTR     "lu"
-#  define SCNxPTR     "lx"
-#  define SCNXPTR     "lX"
-#endif  // _WIN64 ]
-
-#endif // __STDC_FORMAT_MACROS ]
-
-// 7.8.2 Functions for greatest-width integer types
-
-// 7.8.2.1 The imaxabs function
-#define imaxabs _abs64
-
-// 7.8.2.2 The imaxdiv function
-
-// This is modified version of div() function from Microsoft's div.c found
-// in %MSVC.NET%\crt\src\div.c
-#ifdef STATIC_IMAXDIV // [
-static
-#else // STATIC_IMAXDIV ][
-_inline
-#endif // STATIC_IMAXDIV ]
-imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
-{
-   imaxdiv_t result;
-
-   result.quot = numer / denom;
-   result.rem = numer % denom;
-
-   if (numer < 0 && result.rem > 0) {
-      // did division wrong; must fix up
-      ++result.quot;
-      result.rem -= denom;
-   }
-
-   return result;
-}
-
-// 7.8.2.3 The strtoimax and strtoumax functions
-#define strtoimax _strtoi64
-#define strtoumax _strtoui64
-
-// 7.8.2.4 The wcstoimax and wcstoumax functions
-#define wcstoimax _wcstoi64
-#define wcstoumax _wcstoui64
-
-
-#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/stdbool.h b/include/msvc_compat/stdbool.h
deleted file mode 100644
index da9ee8b..0000000
--- a/include/msvc_compat/stdbool.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef stdbool_h
-#define stdbool_h
-
-#include <wtypes.h>
-
-/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
-/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
-typedef BOOL _Bool;
-
-#define bool _Bool
-#define true 1
-#define false 0
-
-#define __bool_true_false_are_defined 1
-
-#endif /* stdbool_h */
diff --git a/include/msvc_compat/stdint.h b/include/msvc_compat/stdint.h
deleted file mode 100644
index d02608a..0000000
--- a/include/msvc_compat/stdint.h
+++ /dev/null
@@ -1,247 +0,0 @@
-// ISO C9x  compliant stdint.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006-2008 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_STDINT_H_ // [
-#define _MSC_STDINT_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include <limits.h>
-
-// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
-// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
-// or compiler give many errors like this:
-//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
-#ifdef __cplusplus
-extern "C" {
-#endif
-#  include <wchar.h>
-#ifdef __cplusplus
-}
-#endif
-
-// Define _W64 macros to mark types changing their size, like intptr_t.
-#ifndef _W64
-#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
-#     define _W64 __w64
-#  else
-#     define _W64
-#  endif
-#endif
-
-
-// 7.18.1 Integer types
-
-// 7.18.1.1 Exact-width integer types
-
-// Visual Studio 6 and Embedded Visual C++ 4 doesn't
-// realize that, e.g. char has the same size as __int8
-// so we give up on __intX for them.
-#if (_MSC_VER < 1300)
-   typedef signed char       int8_t;
-   typedef signed short      int16_t;
-   typedef signed int        int32_t;
-   typedef unsigned char     uint8_t;
-   typedef unsigned short    uint16_t;
-   typedef unsigned int      uint32_t;
-#else
-   typedef signed __int8     int8_t;
-   typedef signed __int16    int16_t;
-   typedef signed __int32    int32_t;
-   typedef unsigned __int8   uint8_t;
-   typedef unsigned __int16  uint16_t;
-   typedef unsigned __int32  uint32_t;
-#endif
-typedef signed __int64       int64_t;
-typedef unsigned __int64     uint64_t;
-
-
-// 7.18.1.2 Minimum-width integer types
-typedef int8_t    int_least8_t;
-typedef int16_t   int_least16_t;
-typedef int32_t   int_least32_t;
-typedef int64_t   int_least64_t;
-typedef uint8_t   uint_least8_t;
-typedef uint16_t  uint_least16_t;
-typedef uint32_t  uint_least32_t;
-typedef uint64_t  uint_least64_t;
-
-// 7.18.1.3 Fastest minimum-width integer types
-typedef int8_t    int_fast8_t;
-typedef int16_t   int_fast16_t;
-typedef int32_t   int_fast32_t;
-typedef int64_t   int_fast64_t;
-typedef uint8_t   uint_fast8_t;
-typedef uint16_t  uint_fast16_t;
-typedef uint32_t  uint_fast32_t;
-typedef uint64_t  uint_fast64_t;
-
-// 7.18.1.4 Integer types capable of holding object pointers
-#ifdef _WIN64 // [
-   typedef signed __int64    intptr_t;
-   typedef unsigned __int64  uintptr_t;
-#else // _WIN64 ][
-   typedef _W64 signed int   intptr_t;
-   typedef _W64 unsigned int uintptr_t;
-#endif // _WIN64 ]
-
-// 7.18.1.5 Greatest-width integer types
-typedef int64_t   intmax_t;
-typedef uint64_t  uintmax_t;
-
-
-// 7.18.2 Limits of specified-width integer types
-
-#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
-
-// 7.18.2.1 Limits of exact-width integer types
-#define INT8_MIN     ((int8_t)_I8_MIN)
-#define INT8_MAX     _I8_MAX
-#define INT16_MIN    ((int16_t)_I16_MIN)
-#define INT16_MAX    _I16_MAX
-#define INT32_MIN    ((int32_t)_I32_MIN)
-#define INT32_MAX    _I32_MAX
-#define INT64_MIN    ((int64_t)_I64_MIN)
-#define INT64_MAX    _I64_MAX
-#define UINT8_MAX    _UI8_MAX
-#define UINT16_MAX   _UI16_MAX
-#define UINT32_MAX   _UI32_MAX
-#define UINT64_MAX   _UI64_MAX
-
-// 7.18.2.2 Limits of minimum-width integer types
-#define INT_LEAST8_MIN    INT8_MIN
-#define INT_LEAST8_MAX    INT8_MAX
-#define INT_LEAST16_MIN   INT16_MIN
-#define INT_LEAST16_MAX   INT16_MAX
-#define INT_LEAST32_MIN   INT32_MIN
-#define INT_LEAST32_MAX   INT32_MAX
-#define INT_LEAST64_MIN   INT64_MIN
-#define INT_LEAST64_MAX   INT64_MAX
-#define UINT_LEAST8_MAX   UINT8_MAX
-#define UINT_LEAST16_MAX  UINT16_MAX
-#define UINT_LEAST32_MAX  UINT32_MAX
-#define UINT_LEAST64_MAX  UINT64_MAX
-
-// 7.18.2.3 Limits of fastest minimum-width integer types
-#define INT_FAST8_MIN    INT8_MIN
-#define INT_FAST8_MAX    INT8_MAX
-#define INT_FAST16_MIN   INT16_MIN
-#define INT_FAST16_MAX   INT16_MAX
-#define INT_FAST32_MIN   INT32_MIN
-#define INT_FAST32_MAX   INT32_MAX
-#define INT_FAST64_MIN   INT64_MIN
-#define INT_FAST64_MAX   INT64_MAX
-#define UINT_FAST8_MAX   UINT8_MAX
-#define UINT_FAST16_MAX  UINT16_MAX
-#define UINT_FAST32_MAX  UINT32_MAX
-#define UINT_FAST64_MAX  UINT64_MAX
-
-// 7.18.2.4 Limits of integer types capable of holding object pointers
-#ifdef _WIN64 // [
-#  define INTPTR_MIN   INT64_MIN
-#  define INTPTR_MAX   INT64_MAX
-#  define UINTPTR_MAX  UINT64_MAX
-#else // _WIN64 ][
-#  define INTPTR_MIN   INT32_MIN
-#  define INTPTR_MAX   INT32_MAX
-#  define UINTPTR_MAX  UINT32_MAX
-#endif // _WIN64 ]
-
-// 7.18.2.5 Limits of greatest-width integer types
-#define INTMAX_MIN   INT64_MIN
-#define INTMAX_MAX   INT64_MAX
-#define UINTMAX_MAX  UINT64_MAX
-
-// 7.18.3 Limits of other integer types
-
-#ifdef _WIN64 // [
-#  define PTRDIFF_MIN  _I64_MIN
-#  define PTRDIFF_MAX  _I64_MAX
-#else  // _WIN64 ][
-#  define PTRDIFF_MIN  _I32_MIN
-#  define PTRDIFF_MAX  _I32_MAX
-#endif  // _WIN64 ]
-
-#define SIG_ATOMIC_MIN  INT_MIN
-#define SIG_ATOMIC_MAX  INT_MAX
-
-#ifndef SIZE_MAX // [
-#  ifdef _WIN64 // [
-#     define SIZE_MAX  _UI64_MAX
-#  else // _WIN64 ][
-#     define SIZE_MAX  _UI32_MAX
-#  endif // _WIN64 ]
-#endif // SIZE_MAX ]
-
-// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
-#ifndef WCHAR_MIN // [
-#  define WCHAR_MIN  0
-#endif  // WCHAR_MIN ]
-#ifndef WCHAR_MAX // [
-#  define WCHAR_MAX  _UI16_MAX
-#endif  // WCHAR_MAX ]
-
-#define WINT_MIN  0
-#define WINT_MAX  _UI16_MAX
-
-#endif // __STDC_LIMIT_MACROS ]
-
-
-// 7.18.4 Limits of other integer types
-
-#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
-
-// 7.18.4.1 Macros for minimum-width integer constants
-
-#define INT8_C(val)  val##i8
-#define INT16_C(val) val##i16
-#define INT32_C(val) val##i32
-#define INT64_C(val) val##i64
-
-#define UINT8_C(val)  val##ui8
-#define UINT16_C(val) val##ui16
-#define UINT32_C(val) val##ui32
-#define UINT64_C(val) val##ui64
-
-// 7.18.4.2 Macros for greatest-width integer constants
-#define INTMAX_C   INT64_C
-#define UINTMAX_C  UINT64_C
-
-#endif // __STDC_CONSTANT_MACROS ]
-
-
-#endif // _MSC_STDINT_H_ ]
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Thu May 29 00:31:20 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:31:20 +0900
Subject: [PATCH] Don't use msvc_compat's C99 headers with MSVC versions
	that have (some) C99 support
In-Reply-To: <1401348354-8985-1-git-send-email-mh+jemalloc@glandium.org>
References: <20140529072539.GA8948@glandium.org>
	<1401348354-8985-1-git-send-email-mh+jemalloc@glandium.org>
Message-ID: <20140529073120.GA9186@glandium.org>

And this one is wrong too. Sorry for the confusion.

On Thu, May 29, 2014 at 04:25:54PM +0900, Mike Hommey wrote:
> From: Mike Hommey <mh at glandium.org>
> 
> ---
>  configure.ac                       |   4 +
>  include/msvc_compat/C99/inttypes.h | 313 +++++++++++++++++++++++++++++++++++++
>  include/msvc_compat/C99/stdbool.h  |  16 ++
>  include/msvc_compat/C99/stdint.h   | 247 +++++++++++++++++++++++++++++
>  include/msvc_compat/inttypes.h     | 313 -------------------------------------
>  include/msvc_compat/stdbool.h      |  16 --
>  include/msvc_compat/stdint.h       | 247 -----------------------------
>  7 files changed, 580 insertions(+), 576 deletions(-)
>  create mode 100644 include/msvc_compat/C99/inttypes.h
>  create mode 100644 include/msvc_compat/C99/stdbool.h
>  create mode 100644 include/msvc_compat/C99/stdint.h
>  delete mode 100644 include/msvc_compat/inttypes.h
>  delete mode 100644 include/msvc_compat/stdbool.h
>  delete mode 100644 include/msvc_compat/stdint.h
> 
> diff --git a/configure.ac b/configure.ac
> index 58f6289..e3c70b4 100644
> --- a/configure.ac
> +++ b/configure.ac
> @@ -155,6 +155,10 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
>    AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ])
>  fi
>  
> +if test "x${je_cv_msvc}" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "xno"; then
> +  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
> +fi
> +
>  AC_CHECK_SIZEOF([void *])
>  if test "x${ac_cv_sizeof_void_p}" = "x8" ; then
>    LG_SIZEOF_PTR=3
> diff --git a/include/msvc_compat/C99/inttypes.h b/include/msvc_compat/C99/inttypes.h
> new file mode 100644
> index 0000000..a4e6b75
> --- /dev/null
> +++ b/include/msvc_compat/C99/inttypes.h
> @@ -0,0 +1,313 @@
> +// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
> +// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> +// 
> +//  Copyright (c) 2006 Alexander Chemeris
> +// 
> +// Redistribution and use in source and binary forms, with or without
> +// modification, are permitted provided that the following conditions are met:
> +// 
> +//   1. Redistributions of source code must retain the above copyright notice,
> +//      this list of conditions and the following disclaimer.
> +// 
> +//   2. Redistributions in binary form must reproduce the above copyright
> +//      notice, this list of conditions and the following disclaimer in the
> +//      documentation and/or other materials provided with the distribution.
> +// 
> +//   3. The name of the author may be used to endorse or promote products
> +//      derived from this software without specific prior written permission.
> +// 
> +// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> +// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> +// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> +// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> +// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> +// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> +// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> +// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> +// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> +// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> +// 
> +///////////////////////////////////////////////////////////////////////////////
> +
> +#ifndef _MSC_VER // [
> +#error "Use this header only with Microsoft Visual C++ compilers!"
> +#endif // _MSC_VER ]
> +
> +#ifndef _MSC_INTTYPES_H_ // [
> +#define _MSC_INTTYPES_H_
> +
> +#if _MSC_VER > 1000
> +#pragma once
> +#endif
> +
> +#include "stdint.h"
> +
> +// 7.8 Format conversion of integer types
> +
> +typedef struct {
> +   intmax_t quot;
> +   intmax_t rem;
> +} imaxdiv_t;
> +
> +// 7.8.1 Macros for format specifiers
> +
> +#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
> +
> +#ifdef _WIN64
> +#  define __PRI64_PREFIX        "l"
> +#  define __PRIPTR_PREFIX       "l"
> +#else
> +#  define __PRI64_PREFIX        "ll"
> +#  define __PRIPTR_PREFIX
> +#endif
> +
> +// The fprintf macros for signed integers are:
> +#define PRId8       "d"
> +#define PRIi8       "i"
> +#define PRIdLEAST8  "d"
> +#define PRIiLEAST8  "i"
> +#define PRIdFAST8   "d"
> +#define PRIiFAST8   "i"
> +
> +#define PRId16       "hd"
> +#define PRIi16       "hi"
> +#define PRIdLEAST16  "hd"
> +#define PRIiLEAST16  "hi"
> +#define PRIdFAST16   "hd"
> +#define PRIiFAST16   "hi"
> +
> +#define PRId32       "d"
> +#define PRIi32       "i"
> +#define PRIdLEAST32  "d"
> +#define PRIiLEAST32  "i"
> +#define PRIdFAST32   "d"
> +#define PRIiFAST32   "i"
> +
> +#define PRId64       __PRI64_PREFIX "d"
> +#define PRIi64       __PRI64_PREFIX "i"
> +#define PRIdLEAST64  __PRI64_PREFIX "d"
> +#define PRIiLEAST64  __PRI64_PREFIX "i"
> +#define PRIdFAST64   __PRI64_PREFIX "d"
> +#define PRIiFAST64   __PRI64_PREFIX "i"
> +
> +#define PRIdMAX     __PRI64_PREFIX "d"
> +#define PRIiMAX     __PRI64_PREFIX "i"
> +
> +#define PRIdPTR     __PRIPTR_PREFIX "d"
> +#define PRIiPTR     __PRIPTR_PREFIX "i"
> +
> +// The fprintf macros for unsigned integers are:
> +#define PRIo8       "o"
> +#define PRIu8       "u"
> +#define PRIx8       "x"
> +#define PRIX8       "X"
> +#define PRIoLEAST8  "o"
> +#define PRIuLEAST8  "u"
> +#define PRIxLEAST8  "x"
> +#define PRIXLEAST8  "X"
> +#define PRIoFAST8   "o"
> +#define PRIuFAST8   "u"
> +#define PRIxFAST8   "x"
> +#define PRIXFAST8   "X"
> +
> +#define PRIo16       "ho"
> +#define PRIu16       "hu"
> +#define PRIx16       "hx"
> +#define PRIX16       "hX"
> +#define PRIoLEAST16  "ho"
> +#define PRIuLEAST16  "hu"
> +#define PRIxLEAST16  "hx"
> +#define PRIXLEAST16  "hX"
> +#define PRIoFAST16   "ho"
> +#define PRIuFAST16   "hu"
> +#define PRIxFAST16   "hx"
> +#define PRIXFAST16   "hX"
> +
> +#define PRIo32       "o"
> +#define PRIu32       "u"
> +#define PRIx32       "x"
> +#define PRIX32       "X"
> +#define PRIoLEAST32  "o"
> +#define PRIuLEAST32  "u"
> +#define PRIxLEAST32  "x"
> +#define PRIXLEAST32  "X"
> +#define PRIoFAST32   "o"
> +#define PRIuFAST32   "u"
> +#define PRIxFAST32   "x"
> +#define PRIXFAST32   "X"
> +
> +#define PRIo64       __PRI64_PREFIX "o"
> +#define PRIu64       __PRI64_PREFIX "u"
> +#define PRIx64       __PRI64_PREFIX "x"
> +#define PRIX64       __PRI64_PREFIX "X"
> +#define PRIoLEAST64  __PRI64_PREFIX "o"
> +#define PRIuLEAST64  __PRI64_PREFIX "u"
> +#define PRIxLEAST64  __PRI64_PREFIX "x"
> +#define PRIXLEAST64  __PRI64_PREFIX "X"
> +#define PRIoFAST64   __PRI64_PREFIX "o"
> +#define PRIuFAST64   __PRI64_PREFIX "u"
> +#define PRIxFAST64   __PRI64_PREFIX "x"
> +#define PRIXFAST64   __PRI64_PREFIX "X"
> +
> +#define PRIoMAX     __PRI64_PREFIX "o"
> +#define PRIuMAX     __PRI64_PREFIX "u"
> +#define PRIxMAX     __PRI64_PREFIX "x"
> +#define PRIXMAX     __PRI64_PREFIX "X"
> +
> +#define PRIoPTR     __PRIPTR_PREFIX "o"
> +#define PRIuPTR     __PRIPTR_PREFIX "u"
> +#define PRIxPTR     __PRIPTR_PREFIX "x"
> +#define PRIXPTR     __PRIPTR_PREFIX "X"
> +
> +// The fscanf macros for signed integers are:
> +#define SCNd8       "d"
> +#define SCNi8       "i"
> +#define SCNdLEAST8  "d"
> +#define SCNiLEAST8  "i"
> +#define SCNdFAST8   "d"
> +#define SCNiFAST8   "i"
> +
> +#define SCNd16       "hd"
> +#define SCNi16       "hi"
> +#define SCNdLEAST16  "hd"
> +#define SCNiLEAST16  "hi"
> +#define SCNdFAST16   "hd"
> +#define SCNiFAST16   "hi"
> +
> +#define SCNd32       "ld"
> +#define SCNi32       "li"
> +#define SCNdLEAST32  "ld"
> +#define SCNiLEAST32  "li"
> +#define SCNdFAST32   "ld"
> +#define SCNiFAST32   "li"
> +
> +#define SCNd64       "I64d"
> +#define SCNi64       "I64i"
> +#define SCNdLEAST64  "I64d"
> +#define SCNiLEAST64  "I64i"
> +#define SCNdFAST64   "I64d"
> +#define SCNiFAST64   "I64i"
> +
> +#define SCNdMAX     "I64d"
> +#define SCNiMAX     "I64i"
> +
> +#ifdef _WIN64 // [
> +#  define SCNdPTR     "I64d"
> +#  define SCNiPTR     "I64i"
> +#else  // _WIN64 ][
> +#  define SCNdPTR     "ld"
> +#  define SCNiPTR     "li"
> +#endif  // _WIN64 ]
> +
> +// The fscanf macros for unsigned integers are:
> +#define SCNo8       "o"
> +#define SCNu8       "u"
> +#define SCNx8       "x"
> +#define SCNX8       "X"
> +#define SCNoLEAST8  "o"
> +#define SCNuLEAST8  "u"
> +#define SCNxLEAST8  "x"
> +#define SCNXLEAST8  "X"
> +#define SCNoFAST8   "o"
> +#define SCNuFAST8   "u"
> +#define SCNxFAST8   "x"
> +#define SCNXFAST8   "X"
> +
> +#define SCNo16       "ho"
> +#define SCNu16       "hu"
> +#define SCNx16       "hx"
> +#define SCNX16       "hX"
> +#define SCNoLEAST16  "ho"
> +#define SCNuLEAST16  "hu"
> +#define SCNxLEAST16  "hx"
> +#define SCNXLEAST16  "hX"
> +#define SCNoFAST16   "ho"
> +#define SCNuFAST16   "hu"
> +#define SCNxFAST16   "hx"
> +#define SCNXFAST16   "hX"
> +
> +#define SCNo32       "lo"
> +#define SCNu32       "lu"
> +#define SCNx32       "lx"
> +#define SCNX32       "lX"
> +#define SCNoLEAST32  "lo"
> +#define SCNuLEAST32  "lu"
> +#define SCNxLEAST32  "lx"
> +#define SCNXLEAST32  "lX"
> +#define SCNoFAST32   "lo"
> +#define SCNuFAST32   "lu"
> +#define SCNxFAST32   "lx"
> +#define SCNXFAST32   "lX"
> +
> +#define SCNo64       "I64o"
> +#define SCNu64       "I64u"
> +#define SCNx64       "I64x"
> +#define SCNX64       "I64X"
> +#define SCNoLEAST64  "I64o"
> +#define SCNuLEAST64  "I64u"
> +#define SCNxLEAST64  "I64x"
> +#define SCNXLEAST64  "I64X"
> +#define SCNoFAST64   "I64o"
> +#define SCNuFAST64   "I64u"
> +#define SCNxFAST64   "I64x"
> +#define SCNXFAST64   "I64X"
> +
> +#define SCNoMAX     "I64o"
> +#define SCNuMAX     "I64u"
> +#define SCNxMAX     "I64x"
> +#define SCNXMAX     "I64X"
> +
> +#ifdef _WIN64 // [
> +#  define SCNoPTR     "I64o"
> +#  define SCNuPTR     "I64u"
> +#  define SCNxPTR     "I64x"
> +#  define SCNXPTR     "I64X"
> +#else  // _WIN64 ][
> +#  define SCNoPTR     "lo"
> +#  define SCNuPTR     "lu"
> +#  define SCNxPTR     "lx"
> +#  define SCNXPTR     "lX"
> +#endif  // _WIN64 ]
> +
> +#endif // __STDC_FORMAT_MACROS ]
> +
> +// 7.8.2 Functions for greatest-width integer types
> +
> +// 7.8.2.1 The imaxabs function
> +#define imaxabs _abs64
> +
> +// 7.8.2.2 The imaxdiv function
> +
> +// This is modified version of div() function from Microsoft's div.c found
> +// in %MSVC.NET%\crt\src\div.c
> +#ifdef STATIC_IMAXDIV // [
> +static
> +#else // STATIC_IMAXDIV ][
> +_inline
> +#endif // STATIC_IMAXDIV ]
> +imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
> +{
> +   imaxdiv_t result;
> +
> +   result.quot = numer / denom;
> +   result.rem = numer % denom;
> +
> +   if (numer < 0 && result.rem > 0) {
> +      // did division wrong; must fix up
> +      ++result.quot;
> +      result.rem -= denom;
> +   }
> +
> +   return result;
> +}
> +
> +// 7.8.2.3 The strtoimax and strtoumax functions
> +#define strtoimax _strtoi64
> +#define strtoumax _strtoui64
> +
> +// 7.8.2.4 The wcstoimax and wcstoumax functions
> +#define wcstoimax _wcstoi64
> +#define wcstoumax _wcstoui64
> +
> +
> +#endif // _MSC_INTTYPES_H_ ]
> diff --git a/include/msvc_compat/C99/stdbool.h b/include/msvc_compat/C99/stdbool.h
> new file mode 100644
> index 0000000..da9ee8b
> --- /dev/null
> +++ b/include/msvc_compat/C99/stdbool.h
> @@ -0,0 +1,16 @@
> +#ifndef stdbool_h
> +#define stdbool_h
> +
> +#include <wtypes.h>
> +
> +/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
> +/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
> +typedef BOOL _Bool;
> +
> +#define bool _Bool
> +#define true 1
> +#define false 0
> +
> +#define __bool_true_false_are_defined 1
> +
> +#endif /* stdbool_h */
> diff --git a/include/msvc_compat/C99/stdint.h b/include/msvc_compat/C99/stdint.h
> new file mode 100644
> index 0000000..d02608a
> --- /dev/null
> +++ b/include/msvc_compat/C99/stdint.h
> @@ -0,0 +1,247 @@
> +// ISO C9x  compliant stdint.h for Microsoft Visual Studio
> +// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> +// 
> +//  Copyright (c) 2006-2008 Alexander Chemeris
> +// 
> +// Redistribution and use in source and binary forms, with or without
> +// modification, are permitted provided that the following conditions are met:
> +// 
> +//   1. Redistributions of source code must retain the above copyright notice,
> +//      this list of conditions and the following disclaimer.
> +// 
> +//   2. Redistributions in binary form must reproduce the above copyright
> +//      notice, this list of conditions and the following disclaimer in the
> +//      documentation and/or other materials provided with the distribution.
> +// 
> +//   3. The name of the author may be used to endorse or promote products
> +//      derived from this software without specific prior written permission.
> +// 
> +// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> +// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> +// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> +// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> +// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> +// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> +// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> +// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> +// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> +// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> +// 
> +///////////////////////////////////////////////////////////////////////////////
> +
> +#ifndef _MSC_VER // [
> +#error "Use this header only with Microsoft Visual C++ compilers!"
> +#endif // _MSC_VER ]
> +
> +#ifndef _MSC_STDINT_H_ // [
> +#define _MSC_STDINT_H_
> +
> +#if _MSC_VER > 1000
> +#pragma once
> +#endif
> +
> +#include <limits.h>
> +
> +// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
> +// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
> +// or compiler give many errors like this:
> +//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
> +#ifdef __cplusplus
> +extern "C" {
> +#endif
> +#  include <wchar.h>
> +#ifdef __cplusplus
> +}
> +#endif
> +
> +// Define _W64 macros to mark types changing their size, like intptr_t.
> +#ifndef _W64
> +#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
> +#     define _W64 __w64
> +#  else
> +#     define _W64
> +#  endif
> +#endif
> +
> +
> +// 7.18.1 Integer types
> +
> +// 7.18.1.1 Exact-width integer types
> +
> +// Visual Studio 6 and Embedded Visual C++ 4 doesn't
> +// realize that, e.g. char has the same size as __int8
> +// so we give up on __intX for them.
> +#if (_MSC_VER < 1300)
> +   typedef signed char       int8_t;
> +   typedef signed short      int16_t;
> +   typedef signed int        int32_t;
> +   typedef unsigned char     uint8_t;
> +   typedef unsigned short    uint16_t;
> +   typedef unsigned int      uint32_t;
> +#else
> +   typedef signed __int8     int8_t;
> +   typedef signed __int16    int16_t;
> +   typedef signed __int32    int32_t;
> +   typedef unsigned __int8   uint8_t;
> +   typedef unsigned __int16  uint16_t;
> +   typedef unsigned __int32  uint32_t;
> +#endif
> +typedef signed __int64       int64_t;
> +typedef unsigned __int64     uint64_t;
> +
> +
> +// 7.18.1.2 Minimum-width integer types
> +typedef int8_t    int_least8_t;
> +typedef int16_t   int_least16_t;
> +typedef int32_t   int_least32_t;
> +typedef int64_t   int_least64_t;
> +typedef uint8_t   uint_least8_t;
> +typedef uint16_t  uint_least16_t;
> +typedef uint32_t  uint_least32_t;
> +typedef uint64_t  uint_least64_t;
> +
> +// 7.18.1.3 Fastest minimum-width integer types
> +typedef int8_t    int_fast8_t;
> +typedef int16_t   int_fast16_t;
> +typedef int32_t   int_fast32_t;
> +typedef int64_t   int_fast64_t;
> +typedef uint8_t   uint_fast8_t;
> +typedef uint16_t  uint_fast16_t;
> +typedef uint32_t  uint_fast32_t;
> +typedef uint64_t  uint_fast64_t;
> +
> +// 7.18.1.4 Integer types capable of holding object pointers
> +#ifdef _WIN64 // [
> +   typedef signed __int64    intptr_t;
> +   typedef unsigned __int64  uintptr_t;
> +#else // _WIN64 ][
> +   typedef _W64 signed int   intptr_t;
> +   typedef _W64 unsigned int uintptr_t;
> +#endif // _WIN64 ]
> +
> +// 7.18.1.5 Greatest-width integer types
> +typedef int64_t   intmax_t;
> +typedef uint64_t  uintmax_t;
> +
> +
> +// 7.18.2 Limits of specified-width integer types
> +
> +#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
> +
> +// 7.18.2.1 Limits of exact-width integer types
> +#define INT8_MIN     ((int8_t)_I8_MIN)
> +#define INT8_MAX     _I8_MAX
> +#define INT16_MIN    ((int16_t)_I16_MIN)
> +#define INT16_MAX    _I16_MAX
> +#define INT32_MIN    ((int32_t)_I32_MIN)
> +#define INT32_MAX    _I32_MAX
> +#define INT64_MIN    ((int64_t)_I64_MIN)
> +#define INT64_MAX    _I64_MAX
> +#define UINT8_MAX    _UI8_MAX
> +#define UINT16_MAX   _UI16_MAX
> +#define UINT32_MAX   _UI32_MAX
> +#define UINT64_MAX   _UI64_MAX
> +
> +// 7.18.2.2 Limits of minimum-width integer types
> +#define INT_LEAST8_MIN    INT8_MIN
> +#define INT_LEAST8_MAX    INT8_MAX
> +#define INT_LEAST16_MIN   INT16_MIN
> +#define INT_LEAST16_MAX   INT16_MAX
> +#define INT_LEAST32_MIN   INT32_MIN
> +#define INT_LEAST32_MAX   INT32_MAX
> +#define INT_LEAST64_MIN   INT64_MIN
> +#define INT_LEAST64_MAX   INT64_MAX
> +#define UINT_LEAST8_MAX   UINT8_MAX
> +#define UINT_LEAST16_MAX  UINT16_MAX
> +#define UINT_LEAST32_MAX  UINT32_MAX
> +#define UINT_LEAST64_MAX  UINT64_MAX
> +
> +// 7.18.2.3 Limits of fastest minimum-width integer types
> +#define INT_FAST8_MIN    INT8_MIN
> +#define INT_FAST8_MAX    INT8_MAX
> +#define INT_FAST16_MIN   INT16_MIN
> +#define INT_FAST16_MAX   INT16_MAX
> +#define INT_FAST32_MIN   INT32_MIN
> +#define INT_FAST32_MAX   INT32_MAX
> +#define INT_FAST64_MIN   INT64_MIN
> +#define INT_FAST64_MAX   INT64_MAX
> +#define UINT_FAST8_MAX   UINT8_MAX
> +#define UINT_FAST16_MAX  UINT16_MAX
> +#define UINT_FAST32_MAX  UINT32_MAX
> +#define UINT_FAST64_MAX  UINT64_MAX
> +
> +// 7.18.2.4 Limits of integer types capable of holding object pointers
> +#ifdef _WIN64 // [
> +#  define INTPTR_MIN   INT64_MIN
> +#  define INTPTR_MAX   INT64_MAX
> +#  define UINTPTR_MAX  UINT64_MAX
> +#else // _WIN64 ][
> +#  define INTPTR_MIN   INT32_MIN
> +#  define INTPTR_MAX   INT32_MAX
> +#  define UINTPTR_MAX  UINT32_MAX
> +#endif // _WIN64 ]
> +
> +// 7.18.2.5 Limits of greatest-width integer types
> +#define INTMAX_MIN   INT64_MIN
> +#define INTMAX_MAX   INT64_MAX
> +#define UINTMAX_MAX  UINT64_MAX
> +
> +// 7.18.3 Limits of other integer types
> +
> +#ifdef _WIN64 // [
> +#  define PTRDIFF_MIN  _I64_MIN
> +#  define PTRDIFF_MAX  _I64_MAX
> +#else  // _WIN64 ][
> +#  define PTRDIFF_MIN  _I32_MIN
> +#  define PTRDIFF_MAX  _I32_MAX
> +#endif  // _WIN64 ]
> +
> +#define SIG_ATOMIC_MIN  INT_MIN
> +#define SIG_ATOMIC_MAX  INT_MAX
> +
> +#ifndef SIZE_MAX // [
> +#  ifdef _WIN64 // [
> +#     define SIZE_MAX  _UI64_MAX
> +#  else // _WIN64 ][
> +#     define SIZE_MAX  _UI32_MAX
> +#  endif // _WIN64 ]
> +#endif // SIZE_MAX ]
> +
> +// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
> +#ifndef WCHAR_MIN // [
> +#  define WCHAR_MIN  0
> +#endif  // WCHAR_MIN ]
> +#ifndef WCHAR_MAX // [
> +#  define WCHAR_MAX  _UI16_MAX
> +#endif  // WCHAR_MAX ]
> +
> +#define WINT_MIN  0
> +#define WINT_MAX  _UI16_MAX
> +
> +#endif // __STDC_LIMIT_MACROS ]
> +
> +
> +// 7.18.4 Limits of other integer types
> +
> +#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
> +
> +// 7.18.4.1 Macros for minimum-width integer constants
> +
> +#define INT8_C(val)  val##i8
> +#define INT16_C(val) val##i16
> +#define INT32_C(val) val##i32
> +#define INT64_C(val) val##i64
> +
> +#define UINT8_C(val)  val##ui8
> +#define UINT16_C(val) val##ui16
> +#define UINT32_C(val) val##ui32
> +#define UINT64_C(val) val##ui64
> +
> +// 7.18.4.2 Macros for greatest-width integer constants
> +#define INTMAX_C   INT64_C
> +#define UINTMAX_C  UINT64_C
> +
> +#endif // __STDC_CONSTANT_MACROS ]
> +
> +
> +#endif // _MSC_STDINT_H_ ]
> diff --git a/include/msvc_compat/inttypes.h b/include/msvc_compat/inttypes.h
> deleted file mode 100644
> index a4e6b75..0000000
> --- a/include/msvc_compat/inttypes.h
> +++ /dev/null
> @@ -1,313 +0,0 @@
> -// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
> -// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> -// 
> -//  Copyright (c) 2006 Alexander Chemeris
> -// 
> -// Redistribution and use in source and binary forms, with or without
> -// modification, are permitted provided that the following conditions are met:
> -// 
> -//   1. Redistributions of source code must retain the above copyright notice,
> -//      this list of conditions and the following disclaimer.
> -// 
> -//   2. Redistributions in binary form must reproduce the above copyright
> -//      notice, this list of conditions and the following disclaimer in the
> -//      documentation and/or other materials provided with the distribution.
> -// 
> -//   3. The name of the author may be used to endorse or promote products
> -//      derived from this software without specific prior written permission.
> -// 
> -// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> -// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> -// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> -// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> -// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> -// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> -// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> -// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> -// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> -// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> -// 
> -///////////////////////////////////////////////////////////////////////////////
> -
> -#ifndef _MSC_VER // [
> -#error "Use this header only with Microsoft Visual C++ compilers!"
> -#endif // _MSC_VER ]
> -
> -#ifndef _MSC_INTTYPES_H_ // [
> -#define _MSC_INTTYPES_H_
> -
> -#if _MSC_VER > 1000
> -#pragma once
> -#endif
> -
> -#include "stdint.h"
> -
> -// 7.8 Format conversion of integer types
> -
> -typedef struct {
> -   intmax_t quot;
> -   intmax_t rem;
> -} imaxdiv_t;
> -
> -// 7.8.1 Macros for format specifiers
> -
> -#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
> -
> -#ifdef _WIN64
> -#  define __PRI64_PREFIX        "l"
> -#  define __PRIPTR_PREFIX       "l"
> -#else
> -#  define __PRI64_PREFIX        "ll"
> -#  define __PRIPTR_PREFIX
> -#endif
> -
> -// The fprintf macros for signed integers are:
> -#define PRId8       "d"
> -#define PRIi8       "i"
> -#define PRIdLEAST8  "d"
> -#define PRIiLEAST8  "i"
> -#define PRIdFAST8   "d"
> -#define PRIiFAST8   "i"
> -
> -#define PRId16       "hd"
> -#define PRIi16       "hi"
> -#define PRIdLEAST16  "hd"
> -#define PRIiLEAST16  "hi"
> -#define PRIdFAST16   "hd"
> -#define PRIiFAST16   "hi"
> -
> -#define PRId32       "d"
> -#define PRIi32       "i"
> -#define PRIdLEAST32  "d"
> -#define PRIiLEAST32  "i"
> -#define PRIdFAST32   "d"
> -#define PRIiFAST32   "i"
> -
> -#define PRId64       __PRI64_PREFIX "d"
> -#define PRIi64       __PRI64_PREFIX "i"
> -#define PRIdLEAST64  __PRI64_PREFIX "d"
> -#define PRIiLEAST64  __PRI64_PREFIX "i"
> -#define PRIdFAST64   __PRI64_PREFIX "d"
> -#define PRIiFAST64   __PRI64_PREFIX "i"
> -
> -#define PRIdMAX     __PRI64_PREFIX "d"
> -#define PRIiMAX     __PRI64_PREFIX "i"
> -
> -#define PRIdPTR     __PRIPTR_PREFIX "d"
> -#define PRIiPTR     __PRIPTR_PREFIX "i"
> -
> -// The fprintf macros for unsigned integers are:
> -#define PRIo8       "o"
> -#define PRIu8       "u"
> -#define PRIx8       "x"
> -#define PRIX8       "X"
> -#define PRIoLEAST8  "o"
> -#define PRIuLEAST8  "u"
> -#define PRIxLEAST8  "x"
> -#define PRIXLEAST8  "X"
> -#define PRIoFAST8   "o"
> -#define PRIuFAST8   "u"
> -#define PRIxFAST8   "x"
> -#define PRIXFAST8   "X"
> -
> -#define PRIo16       "ho"
> -#define PRIu16       "hu"
> -#define PRIx16       "hx"
> -#define PRIX16       "hX"
> -#define PRIoLEAST16  "ho"
> -#define PRIuLEAST16  "hu"
> -#define PRIxLEAST16  "hx"
> -#define PRIXLEAST16  "hX"
> -#define PRIoFAST16   "ho"
> -#define PRIuFAST16   "hu"
> -#define PRIxFAST16   "hx"
> -#define PRIXFAST16   "hX"
> -
> -#define PRIo32       "o"
> -#define PRIu32       "u"
> -#define PRIx32       "x"
> -#define PRIX32       "X"
> -#define PRIoLEAST32  "o"
> -#define PRIuLEAST32  "u"
> -#define PRIxLEAST32  "x"
> -#define PRIXLEAST32  "X"
> -#define PRIoFAST32   "o"
> -#define PRIuFAST32   "u"
> -#define PRIxFAST32   "x"
> -#define PRIXFAST32   "X"
> -
> -#define PRIo64       __PRI64_PREFIX "o"
> -#define PRIu64       __PRI64_PREFIX "u"
> -#define PRIx64       __PRI64_PREFIX "x"
> -#define PRIX64       __PRI64_PREFIX "X"
> -#define PRIoLEAST64  __PRI64_PREFIX "o"
> -#define PRIuLEAST64  __PRI64_PREFIX "u"
> -#define PRIxLEAST64  __PRI64_PREFIX "x"
> -#define PRIXLEAST64  __PRI64_PREFIX "X"
> -#define PRIoFAST64   __PRI64_PREFIX "o"
> -#define PRIuFAST64   __PRI64_PREFIX "u"
> -#define PRIxFAST64   __PRI64_PREFIX "x"
> -#define PRIXFAST64   __PRI64_PREFIX "X"
> -
> -#define PRIoMAX     __PRI64_PREFIX "o"
> -#define PRIuMAX     __PRI64_PREFIX "u"
> -#define PRIxMAX     __PRI64_PREFIX "x"
> -#define PRIXMAX     __PRI64_PREFIX "X"
> -
> -#define PRIoPTR     __PRIPTR_PREFIX "o"
> -#define PRIuPTR     __PRIPTR_PREFIX "u"
> -#define PRIxPTR     __PRIPTR_PREFIX "x"
> -#define PRIXPTR     __PRIPTR_PREFIX "X"
> -
> -// The fscanf macros for signed integers are:
> -#define SCNd8       "d"
> -#define SCNi8       "i"
> -#define SCNdLEAST8  "d"
> -#define SCNiLEAST8  "i"
> -#define SCNdFAST8   "d"
> -#define SCNiFAST8   "i"
> -
> -#define SCNd16       "hd"
> -#define SCNi16       "hi"
> -#define SCNdLEAST16  "hd"
> -#define SCNiLEAST16  "hi"
> -#define SCNdFAST16   "hd"
> -#define SCNiFAST16   "hi"
> -
> -#define SCNd32       "ld"
> -#define SCNi32       "li"
> -#define SCNdLEAST32  "ld"
> -#define SCNiLEAST32  "li"
> -#define SCNdFAST32   "ld"
> -#define SCNiFAST32   "li"
> -
> -#define SCNd64       "I64d"
> -#define SCNi64       "I64i"
> -#define SCNdLEAST64  "I64d"
> -#define SCNiLEAST64  "I64i"
> -#define SCNdFAST64   "I64d"
> -#define SCNiFAST64   "I64i"
> -
> -#define SCNdMAX     "I64d"
> -#define SCNiMAX     "I64i"
> -
> -#ifdef _WIN64 // [
> -#  define SCNdPTR     "I64d"
> -#  define SCNiPTR     "I64i"
> -#else  // _WIN64 ][
> -#  define SCNdPTR     "ld"
> -#  define SCNiPTR     "li"
> -#endif  // _WIN64 ]
> -
> -// The fscanf macros for unsigned integers are:
> -#define SCNo8       "o"
> -#define SCNu8       "u"
> -#define SCNx8       "x"
> -#define SCNX8       "X"
> -#define SCNoLEAST8  "o"
> -#define SCNuLEAST8  "u"
> -#define SCNxLEAST8  "x"
> -#define SCNXLEAST8  "X"
> -#define SCNoFAST8   "o"
> -#define SCNuFAST8   "u"
> -#define SCNxFAST8   "x"
> -#define SCNXFAST8   "X"
> -
> -#define SCNo16       "ho"
> -#define SCNu16       "hu"
> -#define SCNx16       "hx"
> -#define SCNX16       "hX"
> -#define SCNoLEAST16  "ho"
> -#define SCNuLEAST16  "hu"
> -#define SCNxLEAST16  "hx"
> -#define SCNXLEAST16  "hX"
> -#define SCNoFAST16   "ho"
> -#define SCNuFAST16   "hu"
> -#define SCNxFAST16   "hx"
> -#define SCNXFAST16   "hX"
> -
> -#define SCNo32       "lo"
> -#define SCNu32       "lu"
> -#define SCNx32       "lx"
> -#define SCNX32       "lX"
> -#define SCNoLEAST32  "lo"
> -#define SCNuLEAST32  "lu"
> -#define SCNxLEAST32  "lx"
> -#define SCNXLEAST32  "lX"
> -#define SCNoFAST32   "lo"
> -#define SCNuFAST32   "lu"
> -#define SCNxFAST32   "lx"
> -#define SCNXFAST32   "lX"
> -
> -#define SCNo64       "I64o"
> -#define SCNu64       "I64u"
> -#define SCNx64       "I64x"
> -#define SCNX64       "I64X"
> -#define SCNoLEAST64  "I64o"
> -#define SCNuLEAST64  "I64u"
> -#define SCNxLEAST64  "I64x"
> -#define SCNXLEAST64  "I64X"
> -#define SCNoFAST64   "I64o"
> -#define SCNuFAST64   "I64u"
> -#define SCNxFAST64   "I64x"
> -#define SCNXFAST64   "I64X"
> -
> -#define SCNoMAX     "I64o"
> -#define SCNuMAX     "I64u"
> -#define SCNxMAX     "I64x"
> -#define SCNXMAX     "I64X"
> -
> -#ifdef _WIN64 // [
> -#  define SCNoPTR     "I64o"
> -#  define SCNuPTR     "I64u"
> -#  define SCNxPTR     "I64x"
> -#  define SCNXPTR     "I64X"
> -#else  // _WIN64 ][
> -#  define SCNoPTR     "lo"
> -#  define SCNuPTR     "lu"
> -#  define SCNxPTR     "lx"
> -#  define SCNXPTR     "lX"
> -#endif  // _WIN64 ]
> -
> -#endif // __STDC_FORMAT_MACROS ]
> -
> -// 7.8.2 Functions for greatest-width integer types
> -
> -// 7.8.2.1 The imaxabs function
> -#define imaxabs _abs64
> -
> -// 7.8.2.2 The imaxdiv function
> -
> -// This is modified version of div() function from Microsoft's div.c found
> -// in %MSVC.NET%\crt\src\div.c
> -#ifdef STATIC_IMAXDIV // [
> -static
> -#else // STATIC_IMAXDIV ][
> -_inline
> -#endif // STATIC_IMAXDIV ]
> -imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
> -{
> -   imaxdiv_t result;
> -
> -   result.quot = numer / denom;
> -   result.rem = numer % denom;
> -
> -   if (numer < 0 && result.rem > 0) {
> -      // did division wrong; must fix up
> -      ++result.quot;
> -      result.rem -= denom;
> -   }
> -
> -   return result;
> -}
> -
> -// 7.8.2.3 The strtoimax and strtoumax functions
> -#define strtoimax _strtoi64
> -#define strtoumax _strtoui64
> -
> -// 7.8.2.4 The wcstoimax and wcstoumax functions
> -#define wcstoimax _wcstoi64
> -#define wcstoumax _wcstoui64
> -
> -
> -#endif // _MSC_INTTYPES_H_ ]
> diff --git a/include/msvc_compat/stdbool.h b/include/msvc_compat/stdbool.h
> deleted file mode 100644
> index da9ee8b..0000000
> --- a/include/msvc_compat/stdbool.h
> +++ /dev/null
> @@ -1,16 +0,0 @@
> -#ifndef stdbool_h
> -#define stdbool_h
> -
> -#include <wtypes.h>
> -
> -/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
> -/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
> -typedef BOOL _Bool;
> -
> -#define bool _Bool
> -#define true 1
> -#define false 0
> -
> -#define __bool_true_false_are_defined 1
> -
> -#endif /* stdbool_h */
> diff --git a/include/msvc_compat/stdint.h b/include/msvc_compat/stdint.h
> deleted file mode 100644
> index d02608a..0000000
> --- a/include/msvc_compat/stdint.h
> +++ /dev/null
> @@ -1,247 +0,0 @@
> -// ISO C9x  compliant stdint.h for Microsoft Visual Studio
> -// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
> -// 
> -//  Copyright (c) 2006-2008 Alexander Chemeris
> -// 
> -// Redistribution and use in source and binary forms, with or without
> -// modification, are permitted provided that the following conditions are met:
> -// 
> -//   1. Redistributions of source code must retain the above copyright notice,
> -//      this list of conditions and the following disclaimer.
> -// 
> -//   2. Redistributions in binary form must reproduce the above copyright
> -//      notice, this list of conditions and the following disclaimer in the
> -//      documentation and/or other materials provided with the distribution.
> -// 
> -//   3. The name of the author may be used to endorse or promote products
> -//      derived from this software without specific prior written permission.
> -// 
> -// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
> -// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
> -// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
> -// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
> -// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
> -// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
> -// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
> -// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
> -// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
> -// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> -// 
> -///////////////////////////////////////////////////////////////////////////////
> -
> -#ifndef _MSC_VER // [
> -#error "Use this header only with Microsoft Visual C++ compilers!"
> -#endif // _MSC_VER ]
> -
> -#ifndef _MSC_STDINT_H_ // [
> -#define _MSC_STDINT_H_
> -
> -#if _MSC_VER > 1000
> -#pragma once
> -#endif
> -
> -#include <limits.h>
> -
> -// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
> -// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
> -// or compiler give many errors like this:
> -//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
> -#ifdef __cplusplus
> -extern "C" {
> -#endif
> -#  include <wchar.h>
> -#ifdef __cplusplus
> -}
> -#endif
> -
> -// Define _W64 macros to mark types changing their size, like intptr_t.
> -#ifndef _W64
> -#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
> -#     define _W64 __w64
> -#  else
> -#     define _W64
> -#  endif
> -#endif
> -
> -
> -// 7.18.1 Integer types
> -
> -// 7.18.1.1 Exact-width integer types
> -
> -// Visual Studio 6 and Embedded Visual C++ 4 doesn't
> -// realize that, e.g. char has the same size as __int8
> -// so we give up on __intX for them.
> -#if (_MSC_VER < 1300)
> -   typedef signed char       int8_t;
> -   typedef signed short      int16_t;
> -   typedef signed int        int32_t;
> -   typedef unsigned char     uint8_t;
> -   typedef unsigned short    uint16_t;
> -   typedef unsigned int      uint32_t;
> -#else
> -   typedef signed __int8     int8_t;
> -   typedef signed __int16    int16_t;
> -   typedef signed __int32    int32_t;
> -   typedef unsigned __int8   uint8_t;
> -   typedef unsigned __int16  uint16_t;
> -   typedef unsigned __int32  uint32_t;
> -#endif
> -typedef signed __int64       int64_t;
> -typedef unsigned __int64     uint64_t;
> -
> -
> -// 7.18.1.2 Minimum-width integer types
> -typedef int8_t    int_least8_t;
> -typedef int16_t   int_least16_t;
> -typedef int32_t   int_least32_t;
> -typedef int64_t   int_least64_t;
> -typedef uint8_t   uint_least8_t;
> -typedef uint16_t  uint_least16_t;
> -typedef uint32_t  uint_least32_t;
> -typedef uint64_t  uint_least64_t;
> -
> -// 7.18.1.3 Fastest minimum-width integer types
> -typedef int8_t    int_fast8_t;
> -typedef int16_t   int_fast16_t;
> -typedef int32_t   int_fast32_t;
> -typedef int64_t   int_fast64_t;
> -typedef uint8_t   uint_fast8_t;
> -typedef uint16_t  uint_fast16_t;
> -typedef uint32_t  uint_fast32_t;
> -typedef uint64_t  uint_fast64_t;
> -
> -// 7.18.1.4 Integer types capable of holding object pointers
> -#ifdef _WIN64 // [
> -   typedef signed __int64    intptr_t;
> -   typedef unsigned __int64  uintptr_t;
> -#else // _WIN64 ][
> -   typedef _W64 signed int   intptr_t;
> -   typedef _W64 unsigned int uintptr_t;
> -#endif // _WIN64 ]
> -
> -// 7.18.1.5 Greatest-width integer types
> -typedef int64_t   intmax_t;
> -typedef uint64_t  uintmax_t;
> -
> -
> -// 7.18.2 Limits of specified-width integer types
> -
> -#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
> -
> -// 7.18.2.1 Limits of exact-width integer types
> -#define INT8_MIN     ((int8_t)_I8_MIN)
> -#define INT8_MAX     _I8_MAX
> -#define INT16_MIN    ((int16_t)_I16_MIN)
> -#define INT16_MAX    _I16_MAX
> -#define INT32_MIN    ((int32_t)_I32_MIN)
> -#define INT32_MAX    _I32_MAX
> -#define INT64_MIN    ((int64_t)_I64_MIN)
> -#define INT64_MAX    _I64_MAX
> -#define UINT8_MAX    _UI8_MAX
> -#define UINT16_MAX   _UI16_MAX
> -#define UINT32_MAX   _UI32_MAX
> -#define UINT64_MAX   _UI64_MAX
> -
> -// 7.18.2.2 Limits of minimum-width integer types
> -#define INT_LEAST8_MIN    INT8_MIN
> -#define INT_LEAST8_MAX    INT8_MAX
> -#define INT_LEAST16_MIN   INT16_MIN
> -#define INT_LEAST16_MAX   INT16_MAX
> -#define INT_LEAST32_MIN   INT32_MIN
> -#define INT_LEAST32_MAX   INT32_MAX
> -#define INT_LEAST64_MIN   INT64_MIN
> -#define INT_LEAST64_MAX   INT64_MAX
> -#define UINT_LEAST8_MAX   UINT8_MAX
> -#define UINT_LEAST16_MAX  UINT16_MAX
> -#define UINT_LEAST32_MAX  UINT32_MAX
> -#define UINT_LEAST64_MAX  UINT64_MAX
> -
> -// 7.18.2.3 Limits of fastest minimum-width integer types
> -#define INT_FAST8_MIN    INT8_MIN
> -#define INT_FAST8_MAX    INT8_MAX
> -#define INT_FAST16_MIN   INT16_MIN
> -#define INT_FAST16_MAX   INT16_MAX
> -#define INT_FAST32_MIN   INT32_MIN
> -#define INT_FAST32_MAX   INT32_MAX
> -#define INT_FAST64_MIN   INT64_MIN
> -#define INT_FAST64_MAX   INT64_MAX
> -#define UINT_FAST8_MAX   UINT8_MAX
> -#define UINT_FAST16_MAX  UINT16_MAX
> -#define UINT_FAST32_MAX  UINT32_MAX
> -#define UINT_FAST64_MAX  UINT64_MAX
> -
> -// 7.18.2.4 Limits of integer types capable of holding object pointers
> -#ifdef _WIN64 // [
> -#  define INTPTR_MIN   INT64_MIN
> -#  define INTPTR_MAX   INT64_MAX
> -#  define UINTPTR_MAX  UINT64_MAX
> -#else // _WIN64 ][
> -#  define INTPTR_MIN   INT32_MIN
> -#  define INTPTR_MAX   INT32_MAX
> -#  define UINTPTR_MAX  UINT32_MAX
> -#endif // _WIN64 ]
> -
> -// 7.18.2.5 Limits of greatest-width integer types
> -#define INTMAX_MIN   INT64_MIN
> -#define INTMAX_MAX   INT64_MAX
> -#define UINTMAX_MAX  UINT64_MAX
> -
> -// 7.18.3 Limits of other integer types
> -
> -#ifdef _WIN64 // [
> -#  define PTRDIFF_MIN  _I64_MIN
> -#  define PTRDIFF_MAX  _I64_MAX
> -#else  // _WIN64 ][
> -#  define PTRDIFF_MIN  _I32_MIN
> -#  define PTRDIFF_MAX  _I32_MAX
> -#endif  // _WIN64 ]
> -
> -#define SIG_ATOMIC_MIN  INT_MIN
> -#define SIG_ATOMIC_MAX  INT_MAX
> -
> -#ifndef SIZE_MAX // [
> -#  ifdef _WIN64 // [
> -#     define SIZE_MAX  _UI64_MAX
> -#  else // _WIN64 ][
> -#     define SIZE_MAX  _UI32_MAX
> -#  endif // _WIN64 ]
> -#endif // SIZE_MAX ]
> -
> -// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
> -#ifndef WCHAR_MIN // [
> -#  define WCHAR_MIN  0
> -#endif  // WCHAR_MIN ]
> -#ifndef WCHAR_MAX // [
> -#  define WCHAR_MAX  _UI16_MAX
> -#endif  // WCHAR_MAX ]
> -
> -#define WINT_MIN  0
> -#define WINT_MAX  _UI16_MAX
> -
> -#endif // __STDC_LIMIT_MACROS ]
> -
> -
> -// 7.18.4 Limits of other integer types
> -
> -#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
> -
> -// 7.18.4.1 Macros for minimum-width integer constants
> -
> -#define INT8_C(val)  val##i8
> -#define INT16_C(val) val##i16
> -#define INT32_C(val) val##i32
> -#define INT64_C(val) val##i64
> -
> -#define UINT8_C(val)  val##ui8
> -#define UINT16_C(val) val##ui16
> -#define UINT32_C(val) val##ui32
> -#define UINT64_C(val) val##ui64
> -
> -// 7.18.4.2 Macros for greatest-width integer constants
> -#define INTMAX_C   INT64_C
> -#define UINTMAX_C  UINT64_C
> -
> -#endif // __STDC_CONSTANT_MACROS ]
> -
> -
> -#endif // _MSC_STDINT_H_ ]
> -- 
> 2.0.0.rc2
> 
> _______________________________________________
> jemalloc-discuss mailing list
> jemalloc-discuss at canonware.com
> http://www.canonware.com/mailman/listinfo/jemalloc-discuss

From mh+jemalloc at glandium.org  Thu May 29 00:33:02 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:33:02 +0900
Subject: [PATCH] Don't use msvc_compat's C99 headers with MSVC versions that
	have (some) C99 support
In-Reply-To: <20140529073120.GA9186@glandium.org>
References: <20140529073120.GA9186@glandium.org>
Message-ID: <1401348782-9264-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac                       |   4 +
 include/msvc_compat/C99/inttypes.h | 313 +++++++++++++++++++++++++++++++++++++
 include/msvc_compat/C99/stdbool.h  |  16 ++
 include/msvc_compat/C99/stdint.h   | 247 +++++++++++++++++++++++++++++
 include/msvc_compat/inttypes.h     | 313 -------------------------------------
 include/msvc_compat/stdbool.h      |  16 --
 include/msvc_compat/stdint.h       | 247 -----------------------------
 7 files changed, 580 insertions(+), 576 deletions(-)
 create mode 100644 include/msvc_compat/C99/inttypes.h
 create mode 100644 include/msvc_compat/C99/stdbool.h
 create mode 100644 include/msvc_compat/C99/stdint.h
 delete mode 100644 include/msvc_compat/inttypes.h
 delete mode 100644 include/msvc_compat/stdbool.h
 delete mode 100644 include/msvc_compat/stdint.h

diff --git a/configure.ac b/configure.ac
index 58f6289..ec4f38c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -155,6 +155,10 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
   AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ])
 fi
 
+if test "x${je_cv_msvc}" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "xno"; then
+  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat/C99"
+fi
+
 AC_CHECK_SIZEOF([void *])
 if test "x${ac_cv_sizeof_void_p}" = "x8" ; then
   LG_SIZEOF_PTR=3
diff --git a/include/msvc_compat/C99/inttypes.h b/include/msvc_compat/C99/inttypes.h
new file mode 100644
index 0000000..a4e6b75
--- /dev/null
+++ b/include/msvc_compat/C99/inttypes.h
@@ -0,0 +1,313 @@
+// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_INTTYPES_H_ // [
+#define _MSC_INTTYPES_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include "stdint.h"
+
+// 7.8 Format conversion of integer types
+
+typedef struct {
+   intmax_t quot;
+   intmax_t rem;
+} imaxdiv_t;
+
+// 7.8.1 Macros for format specifiers
+
+#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
+
+#ifdef _WIN64
+#  define __PRI64_PREFIX        "l"
+#  define __PRIPTR_PREFIX       "l"
+#else
+#  define __PRI64_PREFIX        "ll"
+#  define __PRIPTR_PREFIX
+#endif
+
+// The fprintf macros for signed integers are:
+#define PRId8       "d"
+#define PRIi8       "i"
+#define PRIdLEAST8  "d"
+#define PRIiLEAST8  "i"
+#define PRIdFAST8   "d"
+#define PRIiFAST8   "i"
+
+#define PRId16       "hd"
+#define PRIi16       "hi"
+#define PRIdLEAST16  "hd"
+#define PRIiLEAST16  "hi"
+#define PRIdFAST16   "hd"
+#define PRIiFAST16   "hi"
+
+#define PRId32       "d"
+#define PRIi32       "i"
+#define PRIdLEAST32  "d"
+#define PRIiLEAST32  "i"
+#define PRIdFAST32   "d"
+#define PRIiFAST32   "i"
+
+#define PRId64       __PRI64_PREFIX "d"
+#define PRIi64       __PRI64_PREFIX "i"
+#define PRIdLEAST64  __PRI64_PREFIX "d"
+#define PRIiLEAST64  __PRI64_PREFIX "i"
+#define PRIdFAST64   __PRI64_PREFIX "d"
+#define PRIiFAST64   __PRI64_PREFIX "i"
+
+#define PRIdMAX     __PRI64_PREFIX "d"
+#define PRIiMAX     __PRI64_PREFIX "i"
+
+#define PRIdPTR     __PRIPTR_PREFIX "d"
+#define PRIiPTR     __PRIPTR_PREFIX "i"
+
+// The fprintf macros for unsigned integers are:
+#define PRIo8       "o"
+#define PRIu8       "u"
+#define PRIx8       "x"
+#define PRIX8       "X"
+#define PRIoLEAST8  "o"
+#define PRIuLEAST8  "u"
+#define PRIxLEAST8  "x"
+#define PRIXLEAST8  "X"
+#define PRIoFAST8   "o"
+#define PRIuFAST8   "u"
+#define PRIxFAST8   "x"
+#define PRIXFAST8   "X"
+
+#define PRIo16       "ho"
+#define PRIu16       "hu"
+#define PRIx16       "hx"
+#define PRIX16       "hX"
+#define PRIoLEAST16  "ho"
+#define PRIuLEAST16  "hu"
+#define PRIxLEAST16  "hx"
+#define PRIXLEAST16  "hX"
+#define PRIoFAST16   "ho"
+#define PRIuFAST16   "hu"
+#define PRIxFAST16   "hx"
+#define PRIXFAST16   "hX"
+
+#define PRIo32       "o"
+#define PRIu32       "u"
+#define PRIx32       "x"
+#define PRIX32       "X"
+#define PRIoLEAST32  "o"
+#define PRIuLEAST32  "u"
+#define PRIxLEAST32  "x"
+#define PRIXLEAST32  "X"
+#define PRIoFAST32   "o"
+#define PRIuFAST32   "u"
+#define PRIxFAST32   "x"
+#define PRIXFAST32   "X"
+
+#define PRIo64       __PRI64_PREFIX "o"
+#define PRIu64       __PRI64_PREFIX "u"
+#define PRIx64       __PRI64_PREFIX "x"
+#define PRIX64       __PRI64_PREFIX "X"
+#define PRIoLEAST64  __PRI64_PREFIX "o"
+#define PRIuLEAST64  __PRI64_PREFIX "u"
+#define PRIxLEAST64  __PRI64_PREFIX "x"
+#define PRIXLEAST64  __PRI64_PREFIX "X"
+#define PRIoFAST64   __PRI64_PREFIX "o"
+#define PRIuFAST64   __PRI64_PREFIX "u"
+#define PRIxFAST64   __PRI64_PREFIX "x"
+#define PRIXFAST64   __PRI64_PREFIX "X"
+
+#define PRIoMAX     __PRI64_PREFIX "o"
+#define PRIuMAX     __PRI64_PREFIX "u"
+#define PRIxMAX     __PRI64_PREFIX "x"
+#define PRIXMAX     __PRI64_PREFIX "X"
+
+#define PRIoPTR     __PRIPTR_PREFIX "o"
+#define PRIuPTR     __PRIPTR_PREFIX "u"
+#define PRIxPTR     __PRIPTR_PREFIX "x"
+#define PRIXPTR     __PRIPTR_PREFIX "X"
+
+// The fscanf macros for signed integers are:
+#define SCNd8       "d"
+#define SCNi8       "i"
+#define SCNdLEAST8  "d"
+#define SCNiLEAST8  "i"
+#define SCNdFAST8   "d"
+#define SCNiFAST8   "i"
+
+#define SCNd16       "hd"
+#define SCNi16       "hi"
+#define SCNdLEAST16  "hd"
+#define SCNiLEAST16  "hi"
+#define SCNdFAST16   "hd"
+#define SCNiFAST16   "hi"
+
+#define SCNd32       "ld"
+#define SCNi32       "li"
+#define SCNdLEAST32  "ld"
+#define SCNiLEAST32  "li"
+#define SCNdFAST32   "ld"
+#define SCNiFAST32   "li"
+
+#define SCNd64       "I64d"
+#define SCNi64       "I64i"
+#define SCNdLEAST64  "I64d"
+#define SCNiLEAST64  "I64i"
+#define SCNdFAST64   "I64d"
+#define SCNiFAST64   "I64i"
+
+#define SCNdMAX     "I64d"
+#define SCNiMAX     "I64i"
+
+#ifdef _WIN64 // [
+#  define SCNdPTR     "I64d"
+#  define SCNiPTR     "I64i"
+#else  // _WIN64 ][
+#  define SCNdPTR     "ld"
+#  define SCNiPTR     "li"
+#endif  // _WIN64 ]
+
+// The fscanf macros for unsigned integers are:
+#define SCNo8       "o"
+#define SCNu8       "u"
+#define SCNx8       "x"
+#define SCNX8       "X"
+#define SCNoLEAST8  "o"
+#define SCNuLEAST8  "u"
+#define SCNxLEAST8  "x"
+#define SCNXLEAST8  "X"
+#define SCNoFAST8   "o"
+#define SCNuFAST8   "u"
+#define SCNxFAST8   "x"
+#define SCNXFAST8   "X"
+
+#define SCNo16       "ho"
+#define SCNu16       "hu"
+#define SCNx16       "hx"
+#define SCNX16       "hX"
+#define SCNoLEAST16  "ho"
+#define SCNuLEAST16  "hu"
+#define SCNxLEAST16  "hx"
+#define SCNXLEAST16  "hX"
+#define SCNoFAST16   "ho"
+#define SCNuFAST16   "hu"
+#define SCNxFAST16   "hx"
+#define SCNXFAST16   "hX"
+
+#define SCNo32       "lo"
+#define SCNu32       "lu"
+#define SCNx32       "lx"
+#define SCNX32       "lX"
+#define SCNoLEAST32  "lo"
+#define SCNuLEAST32  "lu"
+#define SCNxLEAST32  "lx"
+#define SCNXLEAST32  "lX"
+#define SCNoFAST32   "lo"
+#define SCNuFAST32   "lu"
+#define SCNxFAST32   "lx"
+#define SCNXFAST32   "lX"
+
+#define SCNo64       "I64o"
+#define SCNu64       "I64u"
+#define SCNx64       "I64x"
+#define SCNX64       "I64X"
+#define SCNoLEAST64  "I64o"
+#define SCNuLEAST64  "I64u"
+#define SCNxLEAST64  "I64x"
+#define SCNXLEAST64  "I64X"
+#define SCNoFAST64   "I64o"
+#define SCNuFAST64   "I64u"
+#define SCNxFAST64   "I64x"
+#define SCNXFAST64   "I64X"
+
+#define SCNoMAX     "I64o"
+#define SCNuMAX     "I64u"
+#define SCNxMAX     "I64x"
+#define SCNXMAX     "I64X"
+
+#ifdef _WIN64 // [
+#  define SCNoPTR     "I64o"
+#  define SCNuPTR     "I64u"
+#  define SCNxPTR     "I64x"
+#  define SCNXPTR     "I64X"
+#else  // _WIN64 ][
+#  define SCNoPTR     "lo"
+#  define SCNuPTR     "lu"
+#  define SCNxPTR     "lx"
+#  define SCNXPTR     "lX"
+#endif  // _WIN64 ]
+
+#endif // __STDC_FORMAT_MACROS ]
+
+// 7.8.2 Functions for greatest-width integer types
+
+// 7.8.2.1 The imaxabs function
+#define imaxabs _abs64
+
+// 7.8.2.2 The imaxdiv function
+
+// This is modified version of div() function from Microsoft's div.c found
+// in %MSVC.NET%\crt\src\div.c
+#ifdef STATIC_IMAXDIV // [
+static
+#else // STATIC_IMAXDIV ][
+_inline
+#endif // STATIC_IMAXDIV ]
+imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
+{
+   imaxdiv_t result;
+
+   result.quot = numer / denom;
+   result.rem = numer % denom;
+
+   if (numer < 0 && result.rem > 0) {
+      // did division wrong; must fix up
+      ++result.quot;
+      result.rem -= denom;
+   }
+
+   return result;
+}
+
+// 7.8.2.3 The strtoimax and strtoumax functions
+#define strtoimax _strtoi64
+#define strtoumax _strtoui64
+
+// 7.8.2.4 The wcstoimax and wcstoumax functions
+#define wcstoimax _wcstoi64
+#define wcstoumax _wcstoui64
+
+
+#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/C99/stdbool.h b/include/msvc_compat/C99/stdbool.h
new file mode 100644
index 0000000..da9ee8b
--- /dev/null
+++ b/include/msvc_compat/C99/stdbool.h
@@ -0,0 +1,16 @@
+#ifndef stdbool_h
+#define stdbool_h
+
+#include <wtypes.h>
+
+/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
+/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
+typedef BOOL _Bool;
+
+#define bool _Bool
+#define true 1
+#define false 0
+
+#define __bool_true_false_are_defined 1
+
+#endif /* stdbool_h */
diff --git a/include/msvc_compat/C99/stdint.h b/include/msvc_compat/C99/stdint.h
new file mode 100644
index 0000000..d02608a
--- /dev/null
+++ b/include/msvc_compat/C99/stdint.h
@@ -0,0 +1,247 @@
+// ISO C9x  compliant stdint.h for Microsoft Visual Studio
+// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
+// 
+//  Copyright (c) 2006-2008 Alexander Chemeris
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+// 
+//   1. Redistributions of source code must retain the above copyright notice,
+//      this list of conditions and the following disclaimer.
+// 
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+// 
+//   3. The name of the author may be used to endorse or promote products
+//      derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _MSC_VER // [
+#error "Use this header only with Microsoft Visual C++ compilers!"
+#endif // _MSC_VER ]
+
+#ifndef _MSC_STDINT_H_ // [
+#define _MSC_STDINT_H_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <limits.h>
+
+// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
+// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
+// or compiler give many errors like this:
+//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
+#ifdef __cplusplus
+extern "C" {
+#endif
+#  include <wchar.h>
+#ifdef __cplusplus
+}
+#endif
+
+// Define _W64 macros to mark types changing their size, like intptr_t.
+#ifndef _W64
+#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
+#     define _W64 __w64
+#  else
+#     define _W64
+#  endif
+#endif
+
+
+// 7.18.1 Integer types
+
+// 7.18.1.1 Exact-width integer types
+
+// Visual Studio 6 and Embedded Visual C++ 4 doesn't
+// realize that, e.g. char has the same size as __int8
+// so we give up on __intX for them.
+#if (_MSC_VER < 1300)
+   typedef signed char       int8_t;
+   typedef signed short      int16_t;
+   typedef signed int        int32_t;
+   typedef unsigned char     uint8_t;
+   typedef unsigned short    uint16_t;
+   typedef unsigned int      uint32_t;
+#else
+   typedef signed __int8     int8_t;
+   typedef signed __int16    int16_t;
+   typedef signed __int32    int32_t;
+   typedef unsigned __int8   uint8_t;
+   typedef unsigned __int16  uint16_t;
+   typedef unsigned __int32  uint32_t;
+#endif
+typedef signed __int64       int64_t;
+typedef unsigned __int64     uint64_t;
+
+
+// 7.18.1.2 Minimum-width integer types
+typedef int8_t    int_least8_t;
+typedef int16_t   int_least16_t;
+typedef int32_t   int_least32_t;
+typedef int64_t   int_least64_t;
+typedef uint8_t   uint_least8_t;
+typedef uint16_t  uint_least16_t;
+typedef uint32_t  uint_least32_t;
+typedef uint64_t  uint_least64_t;
+
+// 7.18.1.3 Fastest minimum-width integer types
+typedef int8_t    int_fast8_t;
+typedef int16_t   int_fast16_t;
+typedef int32_t   int_fast32_t;
+typedef int64_t   int_fast64_t;
+typedef uint8_t   uint_fast8_t;
+typedef uint16_t  uint_fast16_t;
+typedef uint32_t  uint_fast32_t;
+typedef uint64_t  uint_fast64_t;
+
+// 7.18.1.4 Integer types capable of holding object pointers
+#ifdef _WIN64 // [
+   typedef signed __int64    intptr_t;
+   typedef unsigned __int64  uintptr_t;
+#else // _WIN64 ][
+   typedef _W64 signed int   intptr_t;
+   typedef _W64 unsigned int uintptr_t;
+#endif // _WIN64 ]
+
+// 7.18.1.5 Greatest-width integer types
+typedef int64_t   intmax_t;
+typedef uint64_t  uintmax_t;
+
+
+// 7.18.2 Limits of specified-width integer types
+
+#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
+
+// 7.18.2.1 Limits of exact-width integer types
+#define INT8_MIN     ((int8_t)_I8_MIN)
+#define INT8_MAX     _I8_MAX
+#define INT16_MIN    ((int16_t)_I16_MIN)
+#define INT16_MAX    _I16_MAX
+#define INT32_MIN    ((int32_t)_I32_MIN)
+#define INT32_MAX    _I32_MAX
+#define INT64_MIN    ((int64_t)_I64_MIN)
+#define INT64_MAX    _I64_MAX
+#define UINT8_MAX    _UI8_MAX
+#define UINT16_MAX   _UI16_MAX
+#define UINT32_MAX   _UI32_MAX
+#define UINT64_MAX   _UI64_MAX
+
+// 7.18.2.2 Limits of minimum-width integer types
+#define INT_LEAST8_MIN    INT8_MIN
+#define INT_LEAST8_MAX    INT8_MAX
+#define INT_LEAST16_MIN   INT16_MIN
+#define INT_LEAST16_MAX   INT16_MAX
+#define INT_LEAST32_MIN   INT32_MIN
+#define INT_LEAST32_MAX   INT32_MAX
+#define INT_LEAST64_MIN   INT64_MIN
+#define INT_LEAST64_MAX   INT64_MAX
+#define UINT_LEAST8_MAX   UINT8_MAX
+#define UINT_LEAST16_MAX  UINT16_MAX
+#define UINT_LEAST32_MAX  UINT32_MAX
+#define UINT_LEAST64_MAX  UINT64_MAX
+
+// 7.18.2.3 Limits of fastest minimum-width integer types
+#define INT_FAST8_MIN    INT8_MIN
+#define INT_FAST8_MAX    INT8_MAX
+#define INT_FAST16_MIN   INT16_MIN
+#define INT_FAST16_MAX   INT16_MAX
+#define INT_FAST32_MIN   INT32_MIN
+#define INT_FAST32_MAX   INT32_MAX
+#define INT_FAST64_MIN   INT64_MIN
+#define INT_FAST64_MAX   INT64_MAX
+#define UINT_FAST8_MAX   UINT8_MAX
+#define UINT_FAST16_MAX  UINT16_MAX
+#define UINT_FAST32_MAX  UINT32_MAX
+#define UINT_FAST64_MAX  UINT64_MAX
+
+// 7.18.2.4 Limits of integer types capable of holding object pointers
+#ifdef _WIN64 // [
+#  define INTPTR_MIN   INT64_MIN
+#  define INTPTR_MAX   INT64_MAX
+#  define UINTPTR_MAX  UINT64_MAX
+#else // _WIN64 ][
+#  define INTPTR_MIN   INT32_MIN
+#  define INTPTR_MAX   INT32_MAX
+#  define UINTPTR_MAX  UINT32_MAX
+#endif // _WIN64 ]
+
+// 7.18.2.5 Limits of greatest-width integer types
+#define INTMAX_MIN   INT64_MIN
+#define INTMAX_MAX   INT64_MAX
+#define UINTMAX_MAX  UINT64_MAX
+
+// 7.18.3 Limits of other integer types
+
+#ifdef _WIN64 // [
+#  define PTRDIFF_MIN  _I64_MIN
+#  define PTRDIFF_MAX  _I64_MAX
+#else  // _WIN64 ][
+#  define PTRDIFF_MIN  _I32_MIN
+#  define PTRDIFF_MAX  _I32_MAX
+#endif  // _WIN64 ]
+
+#define SIG_ATOMIC_MIN  INT_MIN
+#define SIG_ATOMIC_MAX  INT_MAX
+
+#ifndef SIZE_MAX // [
+#  ifdef _WIN64 // [
+#     define SIZE_MAX  _UI64_MAX
+#  else // _WIN64 ][
+#     define SIZE_MAX  _UI32_MAX
+#  endif // _WIN64 ]
+#endif // SIZE_MAX ]
+
+// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
+#ifndef WCHAR_MIN // [
+#  define WCHAR_MIN  0
+#endif  // WCHAR_MIN ]
+#ifndef WCHAR_MAX // [
+#  define WCHAR_MAX  _UI16_MAX
+#endif  // WCHAR_MAX ]
+
+#define WINT_MIN  0
+#define WINT_MAX  _UI16_MAX
+
+#endif // __STDC_LIMIT_MACROS ]
+
+
+// 7.18.4 Limits of other integer types
+
+#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
+
+// 7.18.4.1 Macros for minimum-width integer constants
+
+#define INT8_C(val)  val##i8
+#define INT16_C(val) val##i16
+#define INT32_C(val) val##i32
+#define INT64_C(val) val##i64
+
+#define UINT8_C(val)  val##ui8
+#define UINT16_C(val) val##ui16
+#define UINT32_C(val) val##ui32
+#define UINT64_C(val) val##ui64
+
+// 7.18.4.2 Macros for greatest-width integer constants
+#define INTMAX_C   INT64_C
+#define UINTMAX_C  UINT64_C
+
+#endif // __STDC_CONSTANT_MACROS ]
+
+
+#endif // _MSC_STDINT_H_ ]
diff --git a/include/msvc_compat/inttypes.h b/include/msvc_compat/inttypes.h
deleted file mode 100644
index a4e6b75..0000000
--- a/include/msvc_compat/inttypes.h
+++ /dev/null
@@ -1,313 +0,0 @@
-// ISO C9x  compliant inttypes.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_INTTYPES_H_ // [
-#define _MSC_INTTYPES_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include "stdint.h"
-
-// 7.8 Format conversion of integer types
-
-typedef struct {
-   intmax_t quot;
-   intmax_t rem;
-} imaxdiv_t;
-
-// 7.8.1 Macros for format specifiers
-
-#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) // [   See footnote 185 at page 198
-
-#ifdef _WIN64
-#  define __PRI64_PREFIX        "l"
-#  define __PRIPTR_PREFIX       "l"
-#else
-#  define __PRI64_PREFIX        "ll"
-#  define __PRIPTR_PREFIX
-#endif
-
-// The fprintf macros for signed integers are:
-#define PRId8       "d"
-#define PRIi8       "i"
-#define PRIdLEAST8  "d"
-#define PRIiLEAST8  "i"
-#define PRIdFAST8   "d"
-#define PRIiFAST8   "i"
-
-#define PRId16       "hd"
-#define PRIi16       "hi"
-#define PRIdLEAST16  "hd"
-#define PRIiLEAST16  "hi"
-#define PRIdFAST16   "hd"
-#define PRIiFAST16   "hi"
-
-#define PRId32       "d"
-#define PRIi32       "i"
-#define PRIdLEAST32  "d"
-#define PRIiLEAST32  "i"
-#define PRIdFAST32   "d"
-#define PRIiFAST32   "i"
-
-#define PRId64       __PRI64_PREFIX "d"
-#define PRIi64       __PRI64_PREFIX "i"
-#define PRIdLEAST64  __PRI64_PREFIX "d"
-#define PRIiLEAST64  __PRI64_PREFIX "i"
-#define PRIdFAST64   __PRI64_PREFIX "d"
-#define PRIiFAST64   __PRI64_PREFIX "i"
-
-#define PRIdMAX     __PRI64_PREFIX "d"
-#define PRIiMAX     __PRI64_PREFIX "i"
-
-#define PRIdPTR     __PRIPTR_PREFIX "d"
-#define PRIiPTR     __PRIPTR_PREFIX "i"
-
-// The fprintf macros for unsigned integers are:
-#define PRIo8       "o"
-#define PRIu8       "u"
-#define PRIx8       "x"
-#define PRIX8       "X"
-#define PRIoLEAST8  "o"
-#define PRIuLEAST8  "u"
-#define PRIxLEAST8  "x"
-#define PRIXLEAST8  "X"
-#define PRIoFAST8   "o"
-#define PRIuFAST8   "u"
-#define PRIxFAST8   "x"
-#define PRIXFAST8   "X"
-
-#define PRIo16       "ho"
-#define PRIu16       "hu"
-#define PRIx16       "hx"
-#define PRIX16       "hX"
-#define PRIoLEAST16  "ho"
-#define PRIuLEAST16  "hu"
-#define PRIxLEAST16  "hx"
-#define PRIXLEAST16  "hX"
-#define PRIoFAST16   "ho"
-#define PRIuFAST16   "hu"
-#define PRIxFAST16   "hx"
-#define PRIXFAST16   "hX"
-
-#define PRIo32       "o"
-#define PRIu32       "u"
-#define PRIx32       "x"
-#define PRIX32       "X"
-#define PRIoLEAST32  "o"
-#define PRIuLEAST32  "u"
-#define PRIxLEAST32  "x"
-#define PRIXLEAST32  "X"
-#define PRIoFAST32   "o"
-#define PRIuFAST32   "u"
-#define PRIxFAST32   "x"
-#define PRIXFAST32   "X"
-
-#define PRIo64       __PRI64_PREFIX "o"
-#define PRIu64       __PRI64_PREFIX "u"
-#define PRIx64       __PRI64_PREFIX "x"
-#define PRIX64       __PRI64_PREFIX "X"
-#define PRIoLEAST64  __PRI64_PREFIX "o"
-#define PRIuLEAST64  __PRI64_PREFIX "u"
-#define PRIxLEAST64  __PRI64_PREFIX "x"
-#define PRIXLEAST64  __PRI64_PREFIX "X"
-#define PRIoFAST64   __PRI64_PREFIX "o"
-#define PRIuFAST64   __PRI64_PREFIX "u"
-#define PRIxFAST64   __PRI64_PREFIX "x"
-#define PRIXFAST64   __PRI64_PREFIX "X"
-
-#define PRIoMAX     __PRI64_PREFIX "o"
-#define PRIuMAX     __PRI64_PREFIX "u"
-#define PRIxMAX     __PRI64_PREFIX "x"
-#define PRIXMAX     __PRI64_PREFIX "X"
-
-#define PRIoPTR     __PRIPTR_PREFIX "o"
-#define PRIuPTR     __PRIPTR_PREFIX "u"
-#define PRIxPTR     __PRIPTR_PREFIX "x"
-#define PRIXPTR     __PRIPTR_PREFIX "X"
-
-// The fscanf macros for signed integers are:
-#define SCNd8       "d"
-#define SCNi8       "i"
-#define SCNdLEAST8  "d"
-#define SCNiLEAST8  "i"
-#define SCNdFAST8   "d"
-#define SCNiFAST8   "i"
-
-#define SCNd16       "hd"
-#define SCNi16       "hi"
-#define SCNdLEAST16  "hd"
-#define SCNiLEAST16  "hi"
-#define SCNdFAST16   "hd"
-#define SCNiFAST16   "hi"
-
-#define SCNd32       "ld"
-#define SCNi32       "li"
-#define SCNdLEAST32  "ld"
-#define SCNiLEAST32  "li"
-#define SCNdFAST32   "ld"
-#define SCNiFAST32   "li"
-
-#define SCNd64       "I64d"
-#define SCNi64       "I64i"
-#define SCNdLEAST64  "I64d"
-#define SCNiLEAST64  "I64i"
-#define SCNdFAST64   "I64d"
-#define SCNiFAST64   "I64i"
-
-#define SCNdMAX     "I64d"
-#define SCNiMAX     "I64i"
-
-#ifdef _WIN64 // [
-#  define SCNdPTR     "I64d"
-#  define SCNiPTR     "I64i"
-#else  // _WIN64 ][
-#  define SCNdPTR     "ld"
-#  define SCNiPTR     "li"
-#endif  // _WIN64 ]
-
-// The fscanf macros for unsigned integers are:
-#define SCNo8       "o"
-#define SCNu8       "u"
-#define SCNx8       "x"
-#define SCNX8       "X"
-#define SCNoLEAST8  "o"
-#define SCNuLEAST8  "u"
-#define SCNxLEAST8  "x"
-#define SCNXLEAST8  "X"
-#define SCNoFAST8   "o"
-#define SCNuFAST8   "u"
-#define SCNxFAST8   "x"
-#define SCNXFAST8   "X"
-
-#define SCNo16       "ho"
-#define SCNu16       "hu"
-#define SCNx16       "hx"
-#define SCNX16       "hX"
-#define SCNoLEAST16  "ho"
-#define SCNuLEAST16  "hu"
-#define SCNxLEAST16  "hx"
-#define SCNXLEAST16  "hX"
-#define SCNoFAST16   "ho"
-#define SCNuFAST16   "hu"
-#define SCNxFAST16   "hx"
-#define SCNXFAST16   "hX"
-
-#define SCNo32       "lo"
-#define SCNu32       "lu"
-#define SCNx32       "lx"
-#define SCNX32       "lX"
-#define SCNoLEAST32  "lo"
-#define SCNuLEAST32  "lu"
-#define SCNxLEAST32  "lx"
-#define SCNXLEAST32  "lX"
-#define SCNoFAST32   "lo"
-#define SCNuFAST32   "lu"
-#define SCNxFAST32   "lx"
-#define SCNXFAST32   "lX"
-
-#define SCNo64       "I64o"
-#define SCNu64       "I64u"
-#define SCNx64       "I64x"
-#define SCNX64       "I64X"
-#define SCNoLEAST64  "I64o"
-#define SCNuLEAST64  "I64u"
-#define SCNxLEAST64  "I64x"
-#define SCNXLEAST64  "I64X"
-#define SCNoFAST64   "I64o"
-#define SCNuFAST64   "I64u"
-#define SCNxFAST64   "I64x"
-#define SCNXFAST64   "I64X"
-
-#define SCNoMAX     "I64o"
-#define SCNuMAX     "I64u"
-#define SCNxMAX     "I64x"
-#define SCNXMAX     "I64X"
-
-#ifdef _WIN64 // [
-#  define SCNoPTR     "I64o"
-#  define SCNuPTR     "I64u"
-#  define SCNxPTR     "I64x"
-#  define SCNXPTR     "I64X"
-#else  // _WIN64 ][
-#  define SCNoPTR     "lo"
-#  define SCNuPTR     "lu"
-#  define SCNxPTR     "lx"
-#  define SCNXPTR     "lX"
-#endif  // _WIN64 ]
-
-#endif // __STDC_FORMAT_MACROS ]
-
-// 7.8.2 Functions for greatest-width integer types
-
-// 7.8.2.1 The imaxabs function
-#define imaxabs _abs64
-
-// 7.8.2.2 The imaxdiv function
-
-// This is modified version of div() function from Microsoft's div.c found
-// in %MSVC.NET%\crt\src\div.c
-#ifdef STATIC_IMAXDIV // [
-static
-#else // STATIC_IMAXDIV ][
-_inline
-#endif // STATIC_IMAXDIV ]
-imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)
-{
-   imaxdiv_t result;
-
-   result.quot = numer / denom;
-   result.rem = numer % denom;
-
-   if (numer < 0 && result.rem > 0) {
-      // did division wrong; must fix up
-      ++result.quot;
-      result.rem -= denom;
-   }
-
-   return result;
-}
-
-// 7.8.2.3 The strtoimax and strtoumax functions
-#define strtoimax _strtoi64
-#define strtoumax _strtoui64
-
-// 7.8.2.4 The wcstoimax and wcstoumax functions
-#define wcstoimax _wcstoi64
-#define wcstoumax _wcstoui64
-
-
-#endif // _MSC_INTTYPES_H_ ]
diff --git a/include/msvc_compat/stdbool.h b/include/msvc_compat/stdbool.h
deleted file mode 100644
index da9ee8b..0000000
--- a/include/msvc_compat/stdbool.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef stdbool_h
-#define stdbool_h
-
-#include <wtypes.h>
-
-/* MSVC doesn't define _Bool or bool in C, but does have BOOL */
-/* Note this doesn't pass autoconf's test because (bool) 0.5 != true */
-typedef BOOL _Bool;
-
-#define bool _Bool
-#define true 1
-#define false 0
-
-#define __bool_true_false_are_defined 1
-
-#endif /* stdbool_h */
diff --git a/include/msvc_compat/stdint.h b/include/msvc_compat/stdint.h
deleted file mode 100644
index d02608a..0000000
--- a/include/msvc_compat/stdint.h
+++ /dev/null
@@ -1,247 +0,0 @@
-// ISO C9x  compliant stdint.h for Microsoft Visual Studio
-// Based on ISO/IEC 9899:TC2 Committee draft (May 6, 2005) WG14/N1124 
-// 
-//  Copyright (c) 2006-2008 Alexander Chemeris
-// 
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-// 
-//   1. Redistributions of source code must retain the above copyright notice,
-//      this list of conditions and the following disclaimer.
-// 
-//   2. Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-// 
-//   3. The name of the author may be used to endorse or promote products
-//      derived from this software without specific prior written permission.
-// 
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
-// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
-// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-///////////////////////////////////////////////////////////////////////////////
-
-#ifndef _MSC_VER // [
-#error "Use this header only with Microsoft Visual C++ compilers!"
-#endif // _MSC_VER ]
-
-#ifndef _MSC_STDINT_H_ // [
-#define _MSC_STDINT_H_
-
-#if _MSC_VER > 1000
-#pragma once
-#endif
-
-#include <limits.h>
-
-// For Visual Studio 6 in C++ mode and for many Visual Studio versions when
-// compiling for ARM we should wrap <wchar.h> include with 'extern "C++" {}'
-// or compiler give many errors like this:
-//   error C2733: second C linkage of overloaded function 'wmemchr' not allowed
-#ifdef __cplusplus
-extern "C" {
-#endif
-#  include <wchar.h>
-#ifdef __cplusplus
-}
-#endif
-
-// Define _W64 macros to mark types changing their size, like intptr_t.
-#ifndef _W64
-#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
-#     define _W64 __w64
-#  else
-#     define _W64
-#  endif
-#endif
-
-
-// 7.18.1 Integer types
-
-// 7.18.1.1 Exact-width integer types
-
-// Visual Studio 6 and Embedded Visual C++ 4 doesn't
-// realize that, e.g. char has the same size as __int8
-// so we give up on __intX for them.
-#if (_MSC_VER < 1300)
-   typedef signed char       int8_t;
-   typedef signed short      int16_t;
-   typedef signed int        int32_t;
-   typedef unsigned char     uint8_t;
-   typedef unsigned short    uint16_t;
-   typedef unsigned int      uint32_t;
-#else
-   typedef signed __int8     int8_t;
-   typedef signed __int16    int16_t;
-   typedef signed __int32    int32_t;
-   typedef unsigned __int8   uint8_t;
-   typedef unsigned __int16  uint16_t;
-   typedef unsigned __int32  uint32_t;
-#endif
-typedef signed __int64       int64_t;
-typedef unsigned __int64     uint64_t;
-
-
-// 7.18.1.2 Minimum-width integer types
-typedef int8_t    int_least8_t;
-typedef int16_t   int_least16_t;
-typedef int32_t   int_least32_t;
-typedef int64_t   int_least64_t;
-typedef uint8_t   uint_least8_t;
-typedef uint16_t  uint_least16_t;
-typedef uint32_t  uint_least32_t;
-typedef uint64_t  uint_least64_t;
-
-// 7.18.1.3 Fastest minimum-width integer types
-typedef int8_t    int_fast8_t;
-typedef int16_t   int_fast16_t;
-typedef int32_t   int_fast32_t;
-typedef int64_t   int_fast64_t;
-typedef uint8_t   uint_fast8_t;
-typedef uint16_t  uint_fast16_t;
-typedef uint32_t  uint_fast32_t;
-typedef uint64_t  uint_fast64_t;
-
-// 7.18.1.4 Integer types capable of holding object pointers
-#ifdef _WIN64 // [
-   typedef signed __int64    intptr_t;
-   typedef unsigned __int64  uintptr_t;
-#else // _WIN64 ][
-   typedef _W64 signed int   intptr_t;
-   typedef _W64 unsigned int uintptr_t;
-#endif // _WIN64 ]
-
-// 7.18.1.5 Greatest-width integer types
-typedef int64_t   intmax_t;
-typedef uint64_t  uintmax_t;
-
-
-// 7.18.2 Limits of specified-width integer types
-
-#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) // [   See footnote 220 at page 257 and footnote 221 at page 259
-
-// 7.18.2.1 Limits of exact-width integer types
-#define INT8_MIN     ((int8_t)_I8_MIN)
-#define INT8_MAX     _I8_MAX
-#define INT16_MIN    ((int16_t)_I16_MIN)
-#define INT16_MAX    _I16_MAX
-#define INT32_MIN    ((int32_t)_I32_MIN)
-#define INT32_MAX    _I32_MAX
-#define INT64_MIN    ((int64_t)_I64_MIN)
-#define INT64_MAX    _I64_MAX
-#define UINT8_MAX    _UI8_MAX
-#define UINT16_MAX   _UI16_MAX
-#define UINT32_MAX   _UI32_MAX
-#define UINT64_MAX   _UI64_MAX
-
-// 7.18.2.2 Limits of minimum-width integer types
-#define INT_LEAST8_MIN    INT8_MIN
-#define INT_LEAST8_MAX    INT8_MAX
-#define INT_LEAST16_MIN   INT16_MIN
-#define INT_LEAST16_MAX   INT16_MAX
-#define INT_LEAST32_MIN   INT32_MIN
-#define INT_LEAST32_MAX   INT32_MAX
-#define INT_LEAST64_MIN   INT64_MIN
-#define INT_LEAST64_MAX   INT64_MAX
-#define UINT_LEAST8_MAX   UINT8_MAX
-#define UINT_LEAST16_MAX  UINT16_MAX
-#define UINT_LEAST32_MAX  UINT32_MAX
-#define UINT_LEAST64_MAX  UINT64_MAX
-
-// 7.18.2.3 Limits of fastest minimum-width integer types
-#define INT_FAST8_MIN    INT8_MIN
-#define INT_FAST8_MAX    INT8_MAX
-#define INT_FAST16_MIN   INT16_MIN
-#define INT_FAST16_MAX   INT16_MAX
-#define INT_FAST32_MIN   INT32_MIN
-#define INT_FAST32_MAX   INT32_MAX
-#define INT_FAST64_MIN   INT64_MIN
-#define INT_FAST64_MAX   INT64_MAX
-#define UINT_FAST8_MAX   UINT8_MAX
-#define UINT_FAST16_MAX  UINT16_MAX
-#define UINT_FAST32_MAX  UINT32_MAX
-#define UINT_FAST64_MAX  UINT64_MAX
-
-// 7.18.2.4 Limits of integer types capable of holding object pointers
-#ifdef _WIN64 // [
-#  define INTPTR_MIN   INT64_MIN
-#  define INTPTR_MAX   INT64_MAX
-#  define UINTPTR_MAX  UINT64_MAX
-#else // _WIN64 ][
-#  define INTPTR_MIN   INT32_MIN
-#  define INTPTR_MAX   INT32_MAX
-#  define UINTPTR_MAX  UINT32_MAX
-#endif // _WIN64 ]
-
-// 7.18.2.5 Limits of greatest-width integer types
-#define INTMAX_MIN   INT64_MIN
-#define INTMAX_MAX   INT64_MAX
-#define UINTMAX_MAX  UINT64_MAX
-
-// 7.18.3 Limits of other integer types
-
-#ifdef _WIN64 // [
-#  define PTRDIFF_MIN  _I64_MIN
-#  define PTRDIFF_MAX  _I64_MAX
-#else  // _WIN64 ][
-#  define PTRDIFF_MIN  _I32_MIN
-#  define PTRDIFF_MAX  _I32_MAX
-#endif  // _WIN64 ]
-
-#define SIG_ATOMIC_MIN  INT_MIN
-#define SIG_ATOMIC_MAX  INT_MAX
-
-#ifndef SIZE_MAX // [
-#  ifdef _WIN64 // [
-#     define SIZE_MAX  _UI64_MAX
-#  else // _WIN64 ][
-#     define SIZE_MAX  _UI32_MAX
-#  endif // _WIN64 ]
-#endif // SIZE_MAX ]
-
-// WCHAR_MIN and WCHAR_MAX are also defined in <wchar.h>
-#ifndef WCHAR_MIN // [
-#  define WCHAR_MIN  0
-#endif  // WCHAR_MIN ]
-#ifndef WCHAR_MAX // [
-#  define WCHAR_MAX  _UI16_MAX
-#endif  // WCHAR_MAX ]
-
-#define WINT_MIN  0
-#define WINT_MAX  _UI16_MAX
-
-#endif // __STDC_LIMIT_MACROS ]
-
-
-// 7.18.4 Limits of other integer types
-
-#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) // [   See footnote 224 at page 260
-
-// 7.18.4.1 Macros for minimum-width integer constants
-
-#define INT8_C(val)  val##i8
-#define INT16_C(val) val##i16
-#define INT32_C(val) val##i32
-#define INT64_C(val) val##i64
-
-#define UINT8_C(val)  val##ui8
-#define UINT16_C(val) val##ui16
-#define UINT32_C(val) val##ui32
-#define UINT64_C(val) val##ui64
-
-// 7.18.4.2 Macros for greatest-width integer constants
-#define INTMAX_C   INT64_C
-#define UINTMAX_C  UINT64_C
-
-#endif // __STDC_CONSTANT_MACROS ]
-
-
-#endif // _MSC_STDINT_H_ ]
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Thu May 29 00:44:19 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:44:19 +0900
Subject: d04047cc29bbc9d1f87a9346d1601e3dd87b6ca0 broken MSVC builds
Message-ID: <20140529074419.GB9186@glandium.org>

Hi,

d04047cc29bbc9d1f87a9346d1601e3dd87b6ca0 makes rtree.exe assert:
<jemalloc>: z:\jemalloc-dev\include\jemalloc/internal/arena.h:553:
Failed assertion: "ret == small_size2bin_compute(size)"

Cheers,

Mike

From mh+jemalloc at glandium.org  Thu May 29 00:58:21 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 16:58:21 +0900
Subject: [PATCH] Add -FS flag to support parallel builds with MSVC 2013
Message-ID: <1401350301-12812-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac | 1 +
 1 file changed, 1 insertion(+)

diff --git a/configure.ac b/configure.ac
index 5aeaa08..045f62e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -141,6 +141,7 @@ if test "x$CFLAGS" = "x" ; then
     JE_CFLAGS_APPEND([-Zi])
     JE_CFLAGS_APPEND([-MT])
     JE_CFLAGS_APPEND([-W3])
+    JE_CFLAGS_APPEND([-FS])
     CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
   fi
 fi
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Thu May 29 01:01:10 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 17:01:10 +0900
Subject: [PATCH] Make in-tree MSVC builds work
Message-ID: <1401350470-12887-1-git-send-email-mh+jemalloc@glandium.org>

From: Mike Hommey <mh at glandium.org>

---
 configure.ac | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index 045f62e..4944c44 100644
--- a/configure.ac
+++ b/configure.ac
@@ -142,7 +142,7 @@ if test "x$CFLAGS" = "x" ; then
     JE_CFLAGS_APPEND([-MT])
     JE_CFLAGS_APPEND([-W3])
     JE_CFLAGS_APPEND([-FS])
-    CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat"
+    CPPFLAGS="$CPPFLAGS -I${srcdir}/include/msvc_compat"
   fi
 fi
 dnl Append EXTRA_CFLAGS to CFLAGS, if defined.
@@ -157,7 +157,7 @@ if test "x${ac_cv_big_endian}" = "x1" ; then
 fi
 
 if test "x${je_cv_msvc}" = "xyes" -a "x${ac_cv_header_inttypes_h}" = "xno"; then
-  CPPFLAGS="$CPPFLAGS -I${srcroot}/include/msvc_compat/C99"
+  CPPFLAGS="$CPPFLAGS -I${srcdir}/include/msvc_compat/C99"
 fi
 
 AC_CHECK_SIZEOF([void *])
-- 
2.0.0.rc2


From mh+jemalloc at glandium.org  Thu May 29 01:08:13 2014
From: mh+jemalloc at glandium.org (Mike Hommey)
Date: Thu, 29 May 2014 17:08:13 +0900
Subject: [PATCH] Move __func__ to jemalloc_internal_macros.h
In-Reply-To: <20140529000516.GA638@glandium.org>
References: <1400663174-1736-1-git-send-email-mh+jemalloc@glandium.org>
	<20140521094227.GA2323@glandium.org>
	<06F1E41E-3C05-4C38-A721-29DF2097AC1E@canonware.com>
	<20140528033842.GB13199@glandium.org>
	<01553257-8C48-4A29-897D-1C03DBB1CCFA@canonware.com>
	<20140529000516.GA638@glandium.org>
Message-ID: <20140529080813.GC9186@glandium.org>

On Thu, May 29, 2014 at 09:05:16AM +0900, Mike Hommey wrote:
> On Wed, May 28, 2014 at 11:11:52AM -0700, Jason Evans wrote:
> > On May 27, 2014, at 8:38 PM, Mike Hommey <mh+jemalloc at glandium.org>
> > wrote:
> > > On Tue, May 27, 2014 at 04:10:39PM -0700, Jason Evans wrote:
> > >>> As for running tests, the following unit tests crash: - ckh -
> > >>> rtree - tsd
> > >>> 
> > >>> They all crash in malloc_tsd_malloc, which is fishy.
> > >> 
> > >> Probably a bootstrapping order issue, but I don't have any concrete
> > >> guesses as to how it's failing.
> > > 
> > > And it is. It is caused by those tests assuming that jemalloc is
> > > initialized as a side effect of the constructor added in
> > > 20f1fc95adb35ea63dc61f47f2b0ffbd37d39f32, which doesn't run on msvc
> > > builds, and is not needed since there is no fork().
> > > 
> > > Do you think it's better to make jemalloc initialize itself on msvc
> > > builds anyways, or to make those tests explicitely initialize
> > > jemalloc?
> > 
> > I just made a small change to the test harness to address this:
> > 
> > 	https://github.com/jemalloc/jemalloc/commit/26f44df742893306a53a90328e15a62ed11b9e57
> > 
> > I'd rather initialization be automatic so that we don't run into this
> > sort of test fragility in the future.  Let me know if the diff doesn't
> > do the right thing for some reason.
> 
> So, interestingly, this makes SFMT work, while calling malloc_init from
> _init_init_lock makes it crash.

Turns out something else might have make it miraculously work, because I
have a MSVC 2013 build that's back to the old crash I was getting in
SFMT.

Mike

From ppedriana at gmail.com  Thu May 29 15:41:17 2014
From: ppedriana at gmail.com (Paul Pedriana)
Date: Thu, 29 May 2014 15:41:17 -0700
Subject: jemalloc consistent use of bool?...
Message-ID: <5387B78D.9080006@gmail.com>

While tracing through the jemalloc source code, I noticed that it seems 
to use bool inconsistently with respect to success/failure. Sometimes 
true means success and false means failure, while other times it's the 
reverse. For example, the prof_dump_flush function returns true upon 
success and false upon error. But the malloc_init_hard function returns 
false upon success and true upon failure. There appear to be cases of 
functions acting both ways. Or am I misreading the code?

Thanks.


