From jasone at canonware.com  Wed Jul  3 13:37:52 2013
From: jasone at canonware.com (Jason Evans)
Date: Wed, 3 Jul 2013 13:37:52 -0700
Subject: High amount of private clean data in smaps
In-Reply-To: <OFAC412FC4.507268DD-ON87257B98.00131F12-85257B98.00136413@us.ibm.com>
References: <OF519EDCD4.68687AF6-ON87257B82.001634F4-85257B82.0017A177@us.ibm.com>
	<6A918918-587F-4774-9B06-8022E0D2B19A@canonware.com>
	<OF65339387.A3A4F4B3-ON87257B95.004830B3-85257B95.0048B110@us.ibm.com>
	<DE71443A-2202-4B1D-956D-C5AED15F6F79@canonware.com>
	<OFAC412FC4.507268DD-ON87257B98.00131F12-85257B98.00136413@us.ibm.com>
Message-ID: <BEE110C0-6E9D-404D-B259-CB0552D16473@canonware.com>

On Jun 27, 2013, at 8:31 PM, Thomas R Gissel wrote:
> I apologize for the delinquency of my response.  The previously provided stressTest.c does not exhibit the same RSS growth problem as our larger application.   As perhaps an interesting data point, running with 1 arena seems to eliminate or at least mitigate the issue to the point where it is no longer noticeable with our current tests. This seems to indicate internal, across arena, fragmentation, but what is still puzzling is that in the multi-arena configuration the jemalloc stats seem to disconfirm that hypothesis. Specifically, the pattern we see is that after our test has been running for some long period of time, usually several hours, and after our eviction logic has run several eviction cycles, the process begins to and continues to behave in the following way until the test is terminated: jemalloc's mapped statistic and process VmRSS seem to grow in a correlated way while jemalloc's active statistic stays flat.  Does this information give you any insights?  
> 
> 
I can only think of a couple of ways this could happen, barring an outright bug in jemalloc:

- madvise(2) is failing.  You should be able to use strace to determine whether this is an issue.  The only legitimate reason I can think of for this failure would be an interaction with mlockall(2).
- The application is touching memory that has been freed, after it has been purged via madvise(2).

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://jemalloc.net/mailman/jemalloc-discuss/attachments/20130703/a6fb6afa/attachment.html>

From piyush at netskope.com  Mon Jul  8 09:23:40 2013
From: piyush at netskope.com (Piyush Patel)
Date: Mon, 8 Jul 2013 09:23:40 -0700
Subject: valgrind 3.8.1 warnings when doing calloc in jemalloc 3.4
Message-ID: <C18B0E43-B0DB-444A-A486-9CD366E16604@netskope.com>

I've ran into similar issue that Daniel Mezzato ran into(email thread around Dec 11, 2012).  I get following warnings:

==28997== Conditional jump or move depends on uninitialised value(s)
==28997==    at 0x4E438C1: arena_run_split (arena.c:454)
==28997==    by 0x4E441DF: arena_run_alloc_helper (arena.c:645)
==28997==    by 0x4E469ED: arena_malloc_large (arena.c:665)
==28997==    by 0x4E3BA48: calloc (arena.h:930)
==28997==    by 0x400661: main (jemalloc_test.cpp:8)
==28997== 
==28997== Conditional jump or move depends on uninitialised value(s)
==28997==    at 0x4E438E9: arena_run_split (arena.c:454)
==28997==    by 0x4E441DF: arena_run_alloc_helper (arena.c:645)
==28997==    by 0x4E469ED: arena_malloc_large (arena.c:665)
==28997==    by 0x4E3BA48: calloc (arena.h:930)
==28997==    by 0x400661: main (jemalloc_test.cpp:8)


Wondering if these are benin or something I need to worry about.

Below are details of the program and my system
-----------------------------------------------------------------------------------
The small program does following:
int
main(int argc, char** argv)
{
    char *str = (char*)calloc(8192, 1);
    free(str);

    return 0;
}


It's compiled as:
g++  -g -L<path to jemalloc>   jemalloc_test.cpp   -o jemalloc_test -ljemalloc

Valgrind 3.8.1 run as:
valgrind --leak-check=full --soname-synonyms=somalloc=NONE ./jemalloc_test

My system info:
----------------------------
gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.6/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.6.3-1ubuntu5' --with-bugurl=file:///usr/share/doc/gcc-4.6/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.6 --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.6 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --disable-werror --with-arch-32=i686 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) 

valgrind --version
valgrind-3.8.1

jemalloc: 3.4.0

 uname -a
Linux piyush-personal 3.2.0-29-generic #46-Ubuntu SMP Fri Jul 27 17:03:23 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux

Thanks,
Piyush

From jasone at canonware.com  Tue Jul  9 12:53:46 2013
From: jasone at canonware.com (Jason Evans)
Date: Tue, 9 Jul 2013 12:53:46 -0700
Subject: valgrind 3.8.1 warnings when doing calloc in jemalloc 3.4
In-Reply-To: <C18B0E43-B0DB-444A-A486-9CD366E16604@netskope.com>
References: <C18B0E43-B0DB-444A-A486-9CD366E16604@netskope.com>
Message-ID: <A7074D60-C700-481D-8065-209DF83E46FF@canonware.com>

On Jul 8, 2013, at 9:23 AM, Piyush Patel wrote:
> I've ran into similar issue that Daniel Mezzato ran into(email thread around Dec 11, 2012).
> 
> [...]
> 
> jemalloc: 3.4.0

jemalloc 3.3.1 included pretty major changes to valgrind integration, which I'd hoped would be the end of such spurious warnings (the previous report was in the context of 3.2.0).  Your test case should make this bug pretty straightforward to track down; thanks!

Jason

From sebastien.lussier at ubisoft.com  Thu Jul 11 21:52:33 2013
From: sebastien.lussier at ubisoft.com (Sebastien Lussier)
Date: Fri, 12 Jul 2013 00:52:33 -0400
Subject: Reducing memory usage on console
Message-ID: <C7C7B3DB67F94049B1D91EE3CEA9CFB4011E453AD7D4@MDC-MAIL-CMS01.ubisoft.org>

Hello!

I just started testing jemalloc to see if we could improve our memory usage on Xbox & PS3.
What would be the best way to configure jemalloc for such "low-memory" platforms ?

I changed lg_chunk to 19... I'm considering reducing the number of arenas (currently at 12). Or maybe disabling thread caching.

We typically have very few threads making allocations (< 15), and most of them are alive for the whole duration of the game. But their usage of the memory system differs a lot and in some cases I seem to waste arena space if two memory hungry threads ends up in the same arena.
Can I expect good result if I use a single arena ?
 
Did anyone experiment with jemalloc in a similar situation ? I fear disabling all those options will turn jemalloc into an average allocator...

Thanks!
Sebastien 


From colin at novocraft.com  Fri Jul 19 00:41:41 2013
From: colin at novocraft.com (Colin Hercus)
Date: Fri, 19 Jul 2013 15:41:41 +0800
Subject: Using jemalloc with static link
Message-ID: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>

Hi,

I am trying to test a HPC appl'n with jemalloc to see if it can reduce
memory fragmentation and slow memory growth of a long running
multi-threaded app.

This application is statically linked as it's not open source and we need
one binary distribution to run on multiple Linux versions.

If I configure jemalloc without a jemalloc prefix (je_) and link with
-static -ljemalloc I get linker errors for multiply defined symbols

g++  -m64 -Wl,--eh-frame-hdr -o ./bin/xxxx ./obj/xxxx.o  .....   -static
-pthread -lcrypto -lz -lbz2 -ldl  -ljemalloc -lunwind
-Wl,-Map=gccmaps/xxxx.map
/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libcrypto.a(dso_dlfcn.o):
In function `dlfcn_globallookup':
/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o):
In function `__libc_free':
(.text+0x56b0): multiple definition of `free'
jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:1254: first
defined here
/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o):
In function `__libc_malloc':
(.text+0x50d0): multiple definition of `malloc'
jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:857: first
defined here
/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o):
In function `__libc_realloc':
(.text+0x57a0): multiple definition of `realloc'
jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:1105: first
defined here


If I build with a prefix of je_ then linking is okay but memory allocation
is via glibc malloc. The same is true if I dynamically link without a
prefix.

Is there any simple easy way to get je_malloc to hook itself in as a
replacement for malloc the way tcmalloc does?

Any help appreciated.

Thanks, Colin
PS. I have googled for an answer and I really do need to statically link.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://jemalloc.net/mailman/jemalloc-discuss/attachments/20130719/4ef7af05/attachment.html>

From gdhuse at cleversafe.com  Fri Jul 19 08:23:33 2013
From: gdhuse at cleversafe.com (Greg Dhuse)
Date: Fri, 19 Jul 2013 10:23:33 -0500
Subject: Using jemalloc with static link
In-Reply-To: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>
References: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>
Message-ID: <AB5DE35C-211E-439A-AFC0-65EA0B2D1EC5@cleversafe.com>

Hi Colin,


On Jul 19, 2013, at 2:41 AM, Colin Hercus <colin at novocraft.com> wrote:

> Hi,
> 
> I am trying to test a HPC appl'n with jemalloc to see if it can reduce memory fragmentation and slow memory growth of a long running multi-threaded app.
> 
> This application is statically linked as it's not open source and we need one binary distribution to run on multiple Linux versions.
> 
> If I configure jemalloc without a jemalloc prefix (je_) and link with -static -ljemalloc I get linker errors for multiply defined symbols
> 
> g++  -m64 -Wl,--eh-frame-hdr -o ./bin/xxxx ./obj/xxxx.o  .....   -static -pthread -lcrypto -lz -lbz2 -ldl  -ljemalloc -lunwind -Wl,-Map=gccmaps/xxxx.map
> /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libcrypto.a(dso_dlfcn.o): In function `dlfcn_globallookup':
> /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o): In function `__libc_free':
> (.text+0x56b0): multiple definition of `free'
> jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:1254: first defined here
> /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o): In function `__libc_malloc':
> (.text+0x50d0): multiple definition of `malloc'
> jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:857: first defined here
> /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/libc.a(malloc.o): In function `__libc_realloc':
> (.text+0x57a0): multiple definition of `realloc'
> jemalloc.o:/wd5/downloads/malloc/jemalloc-3.4.0/src/jemalloc.c:1105: first defined here
> 
> 
> If I build with a prefix of je_ then linking is okay but memory allocation is via glibc malloc. The same is true if I dynamically link without a prefix.
> 
> Is there any simple easy way to get je_malloc to hook itself in as a replacement for malloc the way tcmalloc does?
> 

One option is to use glibc's mallloc hooks: 
http://www.gnu.org/software/libc/manual/html_node/Hooks-for-Malloc.html

Here's a small example program that hooks malloc and free, calling jemalloc's implementation built with "--with-jemalloc-prefix=je_":

#include <stdlib.h>
#include <jemalloc/jemalloc.h>

/* Prototypes for __malloc_hook, __free_hook */
#include <malloc.h>

/* Prototypes for our hooks.  */
static void my_init_hook (void);
static void *my_malloc_hook (size_t, const void *);
static void my_free_hook (void*, const void *);
     
/* Override initializing hook from the C library. */
void (*__malloc_initialize_hook) (void) = my_init_hook;


static void
my_init_hook (void)
{
	__malloc_hook = my_malloc_hook;
	__free_hook = my_free_hook;
}
     
static void *
my_malloc_hook (size_t size, const void *caller)
{
	return je_malloc(size);
}

static void
my_free_hook (void *ptr, const void *caller) 
{
	je_free(ptr);
}


int main() 
{
	je_malloc_stats_print(NULL, NULL, NULL);

	void *foo = malloc(123);
	je_malloc_stats_print(NULL, NULL, NULL);
	free(foo);

	return 0;
}


Cheers,
 Greg






From jasone at canonware.com  Fri Jul 19 11:27:11 2013
From: jasone at canonware.com (Jason Evans)
Date: Fri, 19 Jul 2013 11:27:11 -0700
Subject: Using jemalloc with static link
In-Reply-To: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>
References: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>
Message-ID: <610E2128-D44C-44A7-9FFB-73FC683B7EB4@canonware.com>

On Jul 19, 2013, at 12:41 AM, Colin Hercus <colin at novocraft.com> wrote:
> I am trying to test a HPC appl'n with jemalloc to see if it can reduce memory fragmentation and slow memory growth of a long running multi-threaded app.
> 
> This application is statically linked as it's not open source and we need one binary distribution to run on multiple Linux versions.
> 
> If I configure jemalloc without a jemalloc prefix (je_) and link with -static -ljemalloc I get linker errors for multiply defined symbols
> 
> g++  -m64 -Wl,--eh-frame-hdr -o ./bin/xxxx ./obj/xxxx.o  .....   -static -pthread -lcrypto -lz -lbz2 -ldl  -ljemalloc -lunwind -Wl,-Map=gccmaps/xxxx.map

There's a good chance that you can make the errors go away by putting -ljemalloc earlier in the link line.  It looks to me like libcrypto is pulling in the glibc malloc symbols, and by the time the libjemalloc portion of linking occurs, it's too late for jemalloc to provide the symbols.  That said, pure static linking is pretty perilous, and I recommend dynamically linking against the system libraries, and linking to static libraries by specifying e.g. libjemalloc_pic.a along with the .o object files (and/or .a archives) in your project.  glibc in particular does an excellent job of maintaining symbol compatibility across many years of releases, so you can ship around a binary that is dynamically linked against glibc with fewer issues than you will run into with a statically linked-in glibc.  glibc protects you from a rather unstable Linux kernel interface, and if you try to run your static binary on top of a substantially different kernel, hilarity will ensue.

> If I build with a prefix of je_ then linking is okay but memory allocation is via glibc malloc. The same is true if I dynamically link without a prefix.
> 
> Is there any simple easy way to get je_malloc to hook itself in as a replacement for malloc the way tcmalloc does?

jemalloc *does* hook itself in as a replacement for glibc malloc, but only if no prefix is specified. =)  You can make a one line change to src/jemalloc.c to unconditionally enable hooking.  Replace:

#if ((is_malloc(je_malloc) == 1) && defined(__GLIBC__) && !defined(__UCLIBC__))

with:

#if 1

Jason

From colin at novocraft.com  Fri Jul 19 20:02:30 2013
From: colin at novocraft.com (Colin Hercus)
Date: Sat, 20 Jul 2013 11:02:30 +0800
Subject: Using jemalloc with static link
In-Reply-To: <610E2128-D44C-44A7-9FFB-73FC683B7EB4@canonware.com>
References: <CAEiri96H=7ueJ1PgFu-FnP3jg0S36=Z9rEcrwoOcYuMwg+pnsA@mail.gmail.com>
	<610E2128-D44C-44A7-9FFB-73FC683B7EB4@canonware.com>
Message-ID: <CAEiri95Zn_4219sLBu7u_rC60WbuihJkEQGxcuwxG83EYBYJhA@mail.gmail.com>

HI Jason,

I'll see if I can use your idea for dynamically linking. There's a few
libraries i would need to do this for but if I can sort this out it would
be good. At the moment I have statically linked releases for a few
different Linux builds.

With regard the is_malloc(je_malloc), I tried commenting out the #if &
#endif lines but the program still used glibc malloc, I guess this may be
order of loading the libraries so I will try with jemalloc first. I'll let
you know if that works.

Thanks for your advice and help.
Colin

On 20 July 2013 02:27, Jason Evans <jasone at canonware.com> wrote:

> On Jul 19, 2013, at 12:41 AM, Colin Hercus <colin at novocraft.com> wrote:
> > I am trying to test a HPC appl'n with jemalloc to see if it can reduce
> memory fragmentation and slow memory growth of a long running
> multi-threaded app.
> >
> > This application is statically linked as it's not open source and we
> need one binary distribution to run on multiple Linux versions.
> >
> > If I configure jemalloc without a jemalloc prefix (je_) and link with
> -static -ljemalloc I get linker errors for multiply defined symbols
> >
> > g++  -m64 -Wl,--eh-frame-hdr -o ./bin/xxxx ./obj/xxxx.o  .....   -static
> -pthread -lcrypto -lz -lbz2 -ldl  -ljemalloc -lunwind
> -Wl,-Map=gccmaps/xxxx.map
>
> There's a good chance that you can make the errors go away by putting
> -ljemalloc earlier in the link line.  It looks to me like libcrypto is
> pulling in the glibc malloc symbols, and by the time the libjemalloc
> portion of linking occurs, it's too late for jemalloc to provide the
> symbols.  That said, pure static linking is pretty perilous, and I
> recommend dynamically linking against the system libraries, and linking to
> static libraries by specifying e.g. libjemalloc_pic.a along with the .o
> object files (and/or .a archives) in your project.  glibc in particular
> does an excellent job of maintaining symbol compatibility across many years
> of releases, so you can ship around a binary that is dynamically linked
> against glibc with fewer issues than you will run into with a statically
> linked-in glibc.  glibc protects you from a rather unstable Linux kernel
> interface, and if you try to run your static binary on top of a
> substantially different kernel, hilarity will ensue.
>
> > If I build with a prefix of je_ then linking is okay but memory
> allocation is via glibc malloc. The same is true if I dynamically link
> without a prefix.
> >
> > Is there any simple easy way to get je_malloc to hook itself in as a
> replacement for malloc the way tcmalloc does?
>
> jemalloc *does* hook itself in as a replacement for glibc malloc, but only
> if no prefix is specified. =)  You can make a one line change to
> src/jemalloc.c to unconditionally enable hooking.  Replace:
>
> #if ((is_malloc(je_malloc) == 1) && defined(__GLIBC__) &&
> !defined(__UCLIBC__))
>
> with:
>
> #if 1
>
> Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://jemalloc.net/mailman/jemalloc-discuss/attachments/20130720/606f17e3/attachment.html>

